&НаСервере
функция ПолучитьНазваниеФирмы() экспорт
	//рез = Константы.НаименованиеФирмы.Получить();
	рез = "Какая-то фирма";
	Возврат рез;
конецФункции //ПолучитьНазваниеФирмы 

&НаСервере
процедура Печать(печФормаЧека, всеПараметрыЧека) экспорт
	макет = ПолучитьОбщийМакет("МакетЧека");
	областьШапкаЧека = макет.ПолучитьОбласть("шапкаЧека");
	областьзаголовокТаблицы = макет.ПолучитьОбласть("заголовокТаблицыЧека");
	областьСтрокаТовара = макет.ПолучитьОбласть("СтрокаТовара");
	областьмаркаСтрока = макет.ПолучитьОбласть("маркаСтрока");
	областьпустаяСтрока = макет.ПолучитьОбласть("пустаяСтрока");
	областьИтого = макет.ПолучитьОбласть("итого");
	областьстрокаТипаОплаты = макет.ПолучитьОбласть("строкаТипОплаты");
	областьндсИтого = макет.ПолучитьОбласть("ндсИтого");
	областьПодвал = макет.ПолучитьОбласть("подвал");
	областТекстQRКода = макет.ПолучитьОбласть("ТекстQRКода");
	областьqrкод = макет.ПолучитьОбласть("qrcode");
	
	областьШапкаЧека.Параметры.НомерЧека = СокрЛП(всеПараметрыЧека.НомерЧека);
	областьШапкаЧека.Параметры.ТипЧека = СокрЛП(всеПараметрыЧека.ТипЧека);
	областьШапкаЧека.Параметры.ДатаИВремя = СокрЛП(всеПараметрыЧека.ДатаИВремяЧека);
	областьШапкаЧека.Параметры.НомерСмены = СокрЛП(всеПараметрыЧека.НомерСмены);
	областьШапкаЧека.Параметры.Кассир = СокрЛП(всеПараметрыЧека.Кассир);
	
	печФормаЧека.Очистить();
	печФормаЧека.Вывести(областьШапкаЧека);
	печФормаЧека.Вывести(областьзаголовокТаблицы);
			
	текНомПоз = 1;
	суммаИтогоЧека = 0;
	Для Каждого поз из всеПараметрыЧека.Позиции цикл
		Если текНомПоз > 1 тогда
			печФормаЧека.Вывести(областьпустаяСтрока);
		конецЕсли;
		областьСтрокаТовара.Параметры.печНомПоз = текНомПоз;
		областьСтрокаТовара.Параметры.Наименовние = поз.Наименование;
		областьСтрокаТовара.Параметры.ПечЦена = поз.Цена;
		областьСтрокаТовара.Параметры.ПечКол = поз.Количество;
		областьСтрокаТовара.Параметры.ПечСумма = поз.Сумма;
		областьСтрокаТовара.Параметры.печПредмРасч = поз.ПредметРасчета;
		областьСтрокаТовара.Параметры.печСпосРасч = поз.СпособРасчета;
		областьСтрокаТовара.Параметры.печРезПровМарки = "";
		Если поз.Свойство("РезультатПроверкиМарки") тогда
			областьСтрокаТовара.Параметры.печРезПровМарки = поз.РезультатПроверкиМарки;
		конецЕсли;
		областьСтрокаТовара.Параметры.ПечСтавкаНДС = поз.СтавкаНДС;
		печФормаЧека.Вывести(областьСтрокаТовара);
		Если поз.Свойство("Марка") тогда
			областьмаркаСтрока.Параметры.печМарка = СокрЛП(поз.Марка);
			печФормаЧека.Вывести(областьмаркаСтрока);
		конецЕсли;		
		текНомПоз = текНомПоз + 1;
	конецЦикла;
	
	печФормаЧека.Вывести(областьпустаяСтрока);
	областьИтого.Параметры.ПечИтогоЧека = всеПараметрыЧека.СуммаЧека;
	печФормаЧека.Вывести(областьИтого);
	для Каждого стрОплаты из всеПараметрыЧека.ТаблицаОплат цикл
		областьстрокаТипаОплаты.Параметры.печТипОплаты = ПреобразоватьВПечетнуюФормуТипОплаты(стрОплаты.Ключ);
		областьстрокаТипаОплаты.Параметры.печСуммаТипаОплаты = стрОплаты.Значение;
		печФормаЧека.Вывести(областьстрокаТипаОплаты);
	конецЦикла;
		
	//печФормаЧека.Вывести(областьндсИтого);
	печФормаЧека.Вывести(областьпустаяСтрока);
	областьПодвал.Параметры.печНазвФирмы = всеПараметрыЧека.ФирмаНазвание;
	областьПодвал.Параметры.печИННФирмы  = всеПараметрыЧека.ИННФирмы;
	областьПодвал.Параметры.печСистНалог = "";
	Если всеПараметрыЧека.Свойство("СистемаНалогообложения") тогда
		областьПодвал.Параметры.печСистНалог = всеПараметрыЧека.СистемаНалогообложения;
	конецЕсли;
	областьПодвал.Параметры.печРегНом    = всеПараметрыЧека.РегНомерККТ;
	областьПодвал.Параметры.печНомФН     = всеПараметрыЧека.НомерФН;
	областьПодвал.Параметры.печНомерЧека = всеПараметрыЧека.НомерЧека;
	областьПодвал.Параметры.печФискПриз  = всеПараметрыЧека.ФискалПризнак;
	печФормаЧека.Вывести(областьПодвал);
	областТекстQRКода.Параметры.печQRКод = всеПараметрыЧека.СтрокаQRКода;
	печФормаЧека.Вывести(областТекстQRКода);
	Если всеПараметрыЧека.СтрокаQRКода <> "" тогда
		КартинкаПечатьQRCode = областьqrкод.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
		КартинкаПечатьQRCode.Картинка = ПолучитьКартинкуQRКода(всеПараметрыЧека.СтрокаQRКода);
		КартинкаПечатьQRCode.Верх = 3;
		КартинкаПечатьQRCode.Высота = 20;
		КартинкаПечатьQRCode.Ширина = 20;
		КартинкаПечатьQRCode.Лево = 28;
		КартинкаПечатьQRCode.ГраницаСверху = Ложь;
		КартинкаПечатьQRCode.ГраницаСлева = Ложь;
		КартинкаПечатьQRCode.ГраницаСправа = Ложь;
		КартинкаПечатьQRCode.ГраницаСнизу = Ложь;
		КартинкаПечатьQRCode.РазмерКартинки = РазмерКартинки.АвтоРазмер;
		печФормаЧека.Вывести(областьqrкод);
	конецЕсли;
конецПроцедуры //Печать   

&НаСервере
функция ПреобразоватьВПечетнуюФормуТипОплаты(типОплаты)
	рез = типОплаты;
	Если типОплаты = "ЗачетАванса" тогда
		рез = "Аванс (зачет ранее оплаченного аванса)";
	иначеЕсли типОплаты = "Кредит" тогда
		рез = "Кредит (рассрочка)";
	конецЕсли;
	возврат рез;
конецФункции //ПреобразоватьВПечетнуюФормуТипОплаты

&НаСервере
Функция ПодключитьКомпонентуИзМакета(Идентификатор)	
	СимволическоеИмя = Идентификатор + "SymbolicName";	
	//Если ПодключитьВнешнююКомпоненту(МестоположениеКомпоненты, СимволическоеИмя) Тогда		
	Если ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаПечатиQRКода", СимволическоеИмя, ТипВнешнейКомпоненты.Native) тогда
		Попытка
			ПодключаемыйМодуль = Новый("AddIn." + СимволическоеИмя + "." + Идентификатор);
			Если ПодключаемыйМодуль = Неопределено Тогда 
				ВызватьИсключение НСтр("ru = 'Оператор Новый вернул Неопределено'");
			КонецЕсли;
		Исключение
			ПодключаемыйМодуль = Неопределено;
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;		
		Если ПодключаемыйМодуль = Неопределено Тогда			
			ТекстОшибки = ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось создать объект внешней компоненты ""%1"", подключенной на сервере
				           |из макета ""%2"",
				           |по причине:
				           |%3'"),
				Идентификатор,
				"",
				ТекстОшибки);			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Подключение внешней компоненты на сервере'",
					КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);			
		КонецЕсли;		
	Иначе		
		ТекстОшибки = ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось подключить внешнюю компоненту ""%1"" на сервере
			           |из макета ""%2""
			           |по причине:
			           |Метод ПодключитьВнешнююКомпоненту вернул Ложь.'"),
			Идентификатор,
			"");
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Подключение внешней компоненты на сервере'",
				КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		
	КонецЕсли;	
	Возврат ПодключаемыйМодуль;	
КонецФункции //ПодключитьКомпонентуИзМакета

&НаСервере
Функция КомпонентаФормированияQRКода()
	
	ТекстОшибки = НСтр("ru = 'Не удалось подключить внешнюю компоненту для генерации QR-кода. Подробности в журнале регистрации.'");
	
	QRCodeGenerator = ПодключитьКомпонентуИзМакета("QRCodeExtension");
	
	Если QRCodeGenerator = Неопределено Тогда 
		СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Возврат QRCodeGenerator;
	
КонецФункции //КомпонентаФормированияQRКода

&НаСервере
функция ПолучитьДвоичныеДанныеQRКода(СтрокаQRКода, УровеньКоррекции = 0, Размер = 200)
	//УстановитьОтключениеБезопасногоРежима(Истина);
	ГенераторQRКода = КомпонентаФормированияQRКода();
	Если ГенераторQRКода = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ДвоичныеДанныеКартинки = ГенераторQRКода.GenerateQRCode(СтрокаQRКода, УровеньКоррекции, Размер);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Формирование QR-кода'", КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ДвоичныеДанныеКартинки;	
конецФункции //ПолучитьДвоичныеДанныеQRКода

&НаСервере
функция ПолучитьКартинкуQRКода(СтрокаQRКода)
	ДвоичныеДанныеQRКода = ПолучитьДвоичныеДанныеQRКода(СтрокаQRКода);
	рез = Новый Картинка(ДвоичныеДанныеQRКода);
	возврат рез;
конецФункции //ПолучитьКартинкуQRКода 

&НаСервере
Функция ПодставитьПараметрыСПроцентом(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = Неопределено;
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр = Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр = Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр = Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр = Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр = Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр = Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр = Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр = Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр = Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = Неопределено Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПодставитьПараметрыВСтроку(Знач ШаблонСтроки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ЕстьПараметрыСПроцентом = Найти(Параметр1, "%")
		Или Найти(Параметр2, "%")
		Или Найти(Параметр3, "%")
		Или Найти(Параметр4, "%")
		Или Найти(Параметр5, "%")
		Или Найти(Параметр6, "%")
		Или Найти(Параметр7, "%")
		Или Найти(Параметр8, "%")
		Или Найти(Параметр9, "%");
		
	Если ЕстьПараметрыСПроцентом Тогда
		Возврат ПодставитьПараметрыСПроцентом(ШаблонСтроки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	КонецЕсли;
	
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%1", Параметр1);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%2", Параметр2);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%3", Параметр3);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%4", Параметр4);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%5", Параметр5);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%6", Параметр6);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%7", Параметр7);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%8", Параметр8);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%9", Параметр9);
	Возврат ШаблонСтроки;
	
КонецФункции

&НаСервере
Процедура СообщитьПользователюВызов(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных,
		Знач Поле,
		Знач ПутьКДанным = "",
		Отказ = Ложь,
		ЭтоОбъект = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	Попытка
		Если ЭтоОбъект Тогда
			Сообщение.УстановитьДанные(КлючДанных);
		Иначе
			Сообщение.КлючДанных = КлючДанных;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
			Сообщение.ПутьКДанным = ПутьКДанным;
		КонецЕсли;
	Исключение
	
	КонецПопытки;
	
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СообщитьПользователю( 
	Знач ТекстСообщенияПользователю,
	Знач КлючДанных = Неопределено,
	Знач Поле = "",
	Знач ПутьКДанным = "",
	Отказ = Ложь) Экспорт
	
	ЭтоОбъект = Ложь;
	
	Если КлючДанных <> Неопределено
		И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
	
	СообщитьПользователюВызов(
		ТекстСообщенияПользователю,
		КлючДанных,
		Поле,
		ПутьКДанным,
		Отказ,
		ЭтоОбъект);
	
КонецПроцедуры

&НаСервере
Функция КодОсновногоЯзыка()
	Возврат Метаданные.ОсновнойЯзык.КодЯзыка;
КонецФункции