//документация по API ККТ Атол
//https://integration.atol.ru/api/?utm_source=yandex.ru&utm_medium=organic&utm_campaign=yandex.ru&utm_referrer=yandex.ru#json-tasks
//документация по API WEB-сервера АТОЛ
//https://app.swaggerhub.com/apis-docs/atol-dev/fptr-web-requests/1.0.1.0
//
#Область ЧтениеИЗаписьНастроекСвязиСККТ

функция ПолучитьЗначениеНастройки(структураНастройкаиСвязиСКТТ, Наимен) экспорт
	рез = Неопределено;
	СтруктутурОднойНастройки = "";
	Если структураНастройкаиСвязиСКТТ.Свойство(Наимен, СтруктутурОднойНастройки) тогда
		Если СтруктутурОднойНастройки.Свойство("Значение") тогда
			рез = СтруктутурОднойНастройки.Значение;
		иначе
			рез = СтруктутурОднойНастройки.ЗначПоУмолч;
		конецЕсли;
	конецЕсли;
	Возврат рез;
конецФункции //ПолучитьЗначениеНастройки

функция СоздатьИзначальнуюСтруктутурОднойНастройки(Наимен, Тип, ЗначПоУмолч = "", Описание = "", СписокВозможныхЗначений = НЕОПРЕДЕЛЕНО, НаимВИнетерфейсе = "")
	струк = Новый Структура;
	струк.Вставить("Наимен", Наимен);
	струк.Вставить("Тип", Тип);
	струк.Вставить("ЗначПоУмолч", ЗначПоУмолч);
	струк.Вставить("СписокЗначений", СписокВозможныхЗначений);
	струк.Вставить("Описание", Описание);
	струк.Вставить("НаимВИнетерфейсе", НаимВИнетерфейсе);
	//струк.Вставить("Значение", "");
	возврат струк;
конецФункции //СоздатьИзначальнуюСтруктутурОднойНастройки

функция НастройкиККТСформироватьСтруктуруИзначальную() экспорт
	структураНастройкаиСвязиСКТТ = Новый Структура;
	СписокВозможныхЗначений = Новый СписокЗначений;
	СписокВозможныхЗначений.Добавить("через COM/USB");
	СписокВозможныхЗначений.Добавить("по IP ккт");
	СписокВозможныхЗначений.Добавить("через сервер ККТ");
	СписокВозможныхЗначений.Добавить("web сервер");
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "ТипСвязи", Тип("Строка"), "через сервер ККТ", "тип связи с ККТ", СписокВозможныхЗначений);
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "IP", Тип("Строка"), "", "IP");
	//ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "IP_ККТ", "", "IP");
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "Порт_IPККТ", Тип("Число"), 0, "порт IP ККТ");
	//ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "IP_СерверККТ", "", "порт IP ККТ");
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "Таймаут_севрерККТ", Тип("Число"), 1000, "Таймаут ожидания ответа от севрера ККТ");
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "НомерCOM", Тип("Число"), 0, "Номер COM порта");
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "УровеньОтладки", Тип("Число"), 0, "Уровень логирования и отладки (0 - самый низкий)");
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "ИмяКассира", Тип("Строка"), "Фамилия ИО кассира", "имяКассира");
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "ФлТестовыйРежим", Тип("Булево"), FALSE, "Тестовый режим (без пробития чеков на ККТ)");
	
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "IDWebККТ", Тип("Строка"), "", "ID ККТ в web-сервере");
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "ПользовательWEB", Тип("Строка"), "", "Пользователь ККТ в web-сервере");
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "ПWEB", Тип("Строка"), "", "П ККТ в web-сервере");
	//структураНастройкаиСвязиСКТТ.Вставить("COMConnect", false);
	//Если исхСтруктура.номерCOM = 0 тогда
	//	структураНастройкаиСвязиСКТТ.Вставить("COMConnect", true);
	//конецЕсли;                                                 
	//структураНастройкаиСвязиСКТТ.Вставить("IDWebККТ", исхСтруктура.IDWebККТ);
	//структураНастройкаиСвязиСКТТ.Вставить("ПользовательWEB", исхСтруктура.ПользовательWEB);
	//структураНастройкаиСвязиСКТТ.Вставить("ПWEB", исхСтруктура.ПWEB);
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "ЭмулироватьЗадержкуОтветаОтИСМ", Тип("Булево"), FALSE, "Иммитация задержки получения ответа от четного знака");
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "ИмитацияНеПолученияОтветаОтЧестногоЗнака", Тип("Булево"), FALSE, "Иммитация ошибки получения ответа от честного знака");
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "МаксимальноеКолПопытокПроверкиМарки", Тип("Число"), 3, "Максимальное количество попыток проверки марки");	
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "неЗакрыватьСоедиениеВОднойТранзакцииПечатиЧека", Тип("Булево"), ИСТИНА, "не отсоединяться от ККТ в одной транзакции");	
	
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "ПоказыватьПечатнуюФормуЧекаПослеПечатиНаККТ", Тип("Булево"), ИСТИНА, "Показывать печатную форму чека после печати чека на ККТ");	
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "ПоказыватьПечатнуюФормуЧекаПередПробитиемНаККТ", Тип("Булево"), ИСТИНА, "Показывать печатную форму перед пробитием чека на ККТ");	
	
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "ПосылатьКомандуНаККТПослеФормированияJSON", Тип("Булево"), ИСТИНА, "Сразу посылать команды на ККТ");	
	Возврат структураНастройкаиСвязиСКТТ;
конецФункции //НастройкиККТСформироватьСтруктуруИзначальную

Процедура СохранитьНастройкиККТ(структураНастройкаиСвязиСКТТ) экспорт
	полноеИмяФайлаНакстроек = ПолучитьПолноеИмяФайлаНастроек();
	тестДокумНастр = Новый ТекстовыйДокумент;
	для каждого элНстр из структураНастройкаиСвязиСКТТ цикл
		текСвойстваНастройки = элНстр.Значение;
		Если текСвойстваНастройки.Свойство("Значение") тогда
			текЗначение = текСвойстваНастройки.Значение;
		иначе
			текЗначение = текСвойстваНастройки.ЗначПоУмолч;
		конецЕсли;
		строчкаНастроек = элНстр.Ключ+";";
		текЗначениеСтрока = СокрЛП(текЗначение);
		Если ТипЗнч(текЗначение) = Тип("Число") тогда
			текЗначениеСтрока = Формат(текЗначение, "ЧЦ=10; ЧДЦ=0; ЧРД=.; ЧН=; ЧГ=");
		иначеЕсли ТипЗнч(текЗначение) = Тип("Булево") тогда
			текЗначениеСтрока = "false";
			Если текЗначение тогда
				текЗначениеСтрока = "true";
			конецЕсли;
		конецЕсли;
		строчкаНастроек = строчкаНастроек+текЗначениеСтрока;
		тестДокумНастр.ДобавитьСтроку(строчкаНастроек);
	конецЦикла;
	тестДокумНастр.Записать(полноеИмяФайлаНакстроек);
конецПроцедуры //СохранитьНастройкиККТ

Функция ПрочитатьНастройкиККТ() экспорт
	полноеИмяФайлаНакстроек = ПолучитьПолноеИмяФайлаНастроек();
	структураНастройкаиСвязиСКТТ = НастройкиККТСформироватьСтруктуруИзначальную();
	файлНастроекПроверкаСущестования = Новый Файл(полноеИмяФайлаНакстроек);		
	файлНастроекСуществует = файлНастроекПроверкаСущестования.Существует();
	Если Не файлНастроекСуществует тогда
		Возврат структураНастройкаиСвязиСКТТ;
	конецЕсли;
	тестДокумНастр = Новый ТекстовыйДокумент;
	тестДокумНастр.Прочитать(полноеИмяФайлаНакстроек);
	всегоСтрокНастроек = тестДокумНастр.КоличествоСтрок();
	для номСтр = 1 по всегоСтрокНастроек цикл
		стрНастройки = тестДокумНастр.ПолучитьСтроку(номСтр);
		Если СокрЛП(стрНастройки) = "" тогда
			Продолжить;
		конецЕсли;
		ключ = ""; значениеСтрока = ""; свойстваНастройки = "";
		ПолучитьКлючИЗначениеИзСтроки(стрНастройки, ключ, значениеСтрока);
		СтруктутурОднойНастройки = "";
		структураНастройкаиСвязиСКТТ.Свойство(ключ, СтруктутурОднойНастройки);
		значение = ПреобразоватьИзСтрокиВЗначениеНастройки(СтруктутурОднойНастройки.Тип, ключ, значениеСтрока);
		Если структураНастройкаиСвязиСКТТ.Свойство(ключ, свойстваНастройки) тогда
			свойстваНастройки.Вставить("Значение", значение);
		конецЕсли;
	конецЦикла;
	Возврат структураНастройкаиСвязиСКТТ;
конецФункции //ПрочитатьНастройкиККТ

функция ПолучитьПолноеИмяФайлаНастроек()
	текКаталогДляНастроек = КаталогВременныхФайлов();
	текКаталогДляНастроек = СтрЗаменить(текКаталогДляНастроек, "Local\Temp\", "");
	текКаталогДляНастроек = текКаталогДляНастроек + "Roaming\";
	КаталогНаДиске = Новый Файл(текКаталогДляНастроек);
	Если НЕ КаталогНаДиске.Существует() тогда        
		СоздатьКаталог(текКаталогДляНастроек);
	конецЕсли;	                                    
	текКаталогДляНастроек = текКаталогДляНастроек + "ATOL\";
	КаталогНаДиске = Новый Файл(текКаталогДляНастроек);
	Если НЕ КаталогНаДиске.Существует() тогда        
		СоздатьКаталог(текКаталогДляНастроек);
	конецЕсли;		                                  
	текКаталогДляНастроек = текКаталогДляНастроек + "drivers10\";
	КаталогНаДиске = Новый Файл(текКаталогДляНастроек);
	Если НЕ КаталогНаДиске.Существует() тогда        
		СоздатьКаталог(текКаталогДляНастроек);
	конецЕсли;		                                  
	текКаталогДляНастроек = текКаталогДляНастроек + "options\";             
	директорияЛогФайловАтол = СокрЛП(текКаталогДляНастроек);
	КаталогНаДиске = Новый Файл(текКаталогДляНастроек);
	Если НЕ КаталогНаДиске.Существует() тогда        
		СоздатьКаталог(текКаталогДляНастроек);
	конецЕсли;		   
	имяФайлаНастроек = "options.ini";
	Возврат текКаталогДляНастроек+имяФайлаНастроек;	
конецФункции //ПолучитьПолноеИмяФайлаНастроек

Процедура ПолучитьКлючИЗначениеИзСтроки(строчкаНастройки, ключ, значение)
	позТочкиСЗап = Найти(строчкаНастройки, ";");
	ключ = Лев(строчкаНастройки, позТочкиСЗап - 1);
	значение = Сред(строчкаНастройки, позТочкиСЗап + 1);	
конецПроцедуры //ПолучитьКлючИЗначениеИзСтроки

функция ПреобразоватьИзСтрокиВЗначениеНастройки(Тип, ключ, значениеСтрока)
	рез = СокрЛП(значениеСтрока);
	Если Тип = Тип("Число") тогда
		рез = Число(значениеСтрока);
	иначеЕсли Тип = Тип("Булево") тогда
		рез = ИСТИНА;
		Если значениеСтрока = "false" тогда
			рез = ЛОЖЬ;
		конецЕсли;
	конецЕсли;
	Возврат рез;
конецФункции //ПреобразоватьИзСтрокиВЗначениеНастройки

функция ДобавитьНастройку(структураНастройкаиСвязиСКТТ, Наимен, Тип, ЗначПоУмолч = НЕОПРЕДЕЛЕНО, Описание = "", СписокВозможныхЗначений = НЕОПРЕДЕЛЕНО, НаимВИнетерфейсе = "")
	структураНастройкаиСвязиСКТТ.Вставить(Наимен, СоздатьИзначальнуюСтруктутурОднойНастройки(Наимен, Тип, ЗначПоУмолч, Описание, СписокВозможныхЗначений, НаимВИнетерфейсе));
конецФункции //ДобавитьНастройку

#КонецОбласти  

#Область ВстариваниеВКонфуУТ11
Функция ПечатьЧекаНаККТВместоВстроеннойВКонфигурацию(докСсылкаПоКоторомуПечатаемЧек, 
									ОповещениеПриЗавершенииПечатиЧека, ФормаДокумента) экспорт
	допПараметры = Новый Структура;
	допПараметры.Вставить("ФормаДокум", ФормаДокумента);
	//проуедура обрабатывающая результат печти чека - она находится в модуле формы документа
	допПараметры.Вставить("ОповещениеПриЗавершенииПечатиЧека", ОповещениеПриЗавершенииПечатиЧека);
	//данные необходимые для формирования чека
	допПараметры.Вставить("докСсылкаПоКоторомуПечатаемЧек", докСсылкаПоКоторомуПечатаемЧек);
    ОбработкаОкончанияПомещения = Новый ОписаниеОповещения
        ("ОбработчикОкончанияПомещения", ЭтотОбъект, допПараметры);    
    НачатьПомещениеФайла(ОбработкаОкончанияПомещения, , 
        "C:\docum\fl\utAtol\НастройкаСвязисККТ_fl.epf", Ложь, ФормаДокумента.УникальныйИдентификатор);	
	возврат ИСТИНА;
	//если вернём ложь, то продолжится стандартная обработка печати чека конфигурации
КонецФункции //ПечатьЧекаНаККТВместоВстроеннойВКонфигурацию ()

Процедура ОбработчикОкончанияПомещения(Результат, Адрес, 
        ВыбранноеИмяФайла, ДополнительныеПараметры) экспорт
    Если НЕ Результат Тогда
        Сообщить("Не удалось открыть обработку печати чека");
		возврат;
	КонецЕсли; 
	имяОбр = ПечатьЧекаККТСервер.ПолучитьИмяВнешнейОбработки(Адрес);	
	ПарамДляФормы = Новый Структура;
	//передаём данные на основе которых можно было бы сформировать чека
	ПарамДляФормы.Вставить("докСсылкаПоКоторомуПечатаемЧек", ДополнительныеПараметры.докСсылкаПоКоторомуПечатаемЧек);
	////передаём форму документа, что спразу же во внешней обработке её модифицировать (записать номер чека)
	//ПарамДляФормы.Вставить("ФормаДокум", ДополнительныеПараметры.ФормаДокум);
	//при закрытии формы документа, форма печати чека тоже закроется
	ФормаОжиданияОтвета = ПолучитьФорму("ВнешняяОбработка."+имяОбр+".Форма.Форма", ПарамДляФормы, ДополнительныеПараметры.ФормаДокум);
	//после закрытия формы печати чека - вызывает процедуру обработки результата печати чека
	ФормаОжиданияОтвета.ОписаниеОповещенияОЗакрытии = ДополнительныеПараметры.ОповещениеПриЗавершенииПечатиЧека;
	//открываем форму, которая нам напечатает чек
	ФормаОжиданияОтвета.Открыть();	
КонецПроцедуры //ОбработчикОкончанияПомещения

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

//печатем чек на кассовом аппарате
//НА ВХОДЕ
//структура - общие данные чека            
// - тип чеа - продажа или возврат
// - кассир - фаимлиия имя отчество кассира
// - система налогообложения //ПАТЕНТ, СНО, УСН, УСН д-р, ПСН
// - сумма оплаты безналичными
// - сумма оплаты наличными
// - сумма оплаты авансом (зачет ранее оплаченного аванса)
//массив позиций чека, в каждой элементе массива структура: товар - тип ТоварныеПозиции; цена - число; количество - число, марка - строка
//структура настроек свызи с атол ККТ
// - тип связи: web, ip, com/usb
// - ip
// - порт Ip
// - номер COM порта                                                   
//оповещение, которое нужно выполнить после печати чека
//COMДрайвера - COM компонента драйвера Атол. По умолчанию Неопределено
//служебные отладочные переменные: уровеньОтладки - уровень отладки от 0 до 3 (3 - свмый высокий), флТестовыйРежим - если TRUE, то чек на ККТ не будет выходить
//НА ВЫХОДЕ
//возвращает в параметр процедуры из ОповещениеПослеПечатиЧека структуру
// - если тип связи не web и COMДрайвера - неопределен, то вернёт в этой переменной COM объект драйвера атол
// - результат boolean - был чек напечатан или нет
// - номер чека
// - код ошибки не равный нулю, если чек не был напечатан
// - описание ошибки, если чек не был напечатан
//если не произошло ошибки, то чек на кассовом аппарате
//результат выполненной операции TRUE
//есил произошла ошибка при печати чека, то на выходе - результат операции FALSE
//так же в верент КОД ОШИБКИ и ОписаниеОшибки
//ПРИМЕР
//стуктура общая данных чека - ОбщиеСвойстваЧека:
//тип чека - продажа
//кассир - Иванова ИИ
//система налогообложения - ПАТЕНТ
//СуммаНаличными - 72
//СуммаБезналичными - 56
//СуммаАванс - 0
//массив позиций чека - таблицаПозицийЧека:  
//                         товар                                  цена  количество    марка (c GS символами и преобраозванная в base64)
//1-ый элемент массива - стркутра:  ТоварнаяПозиции 1, красный, X; 34;  1;          "MDEwNDY1MDExNzI0MDE2MzIxMDAwMDAwMDAwNU5nRh05MTAwMjQdOTJVanBmQW1ETkU2UlNwZWxjVnh2dFBKSEhHbC84VUx6UWpQWklOQjhaL1dZUFVZTWRsN0RFUmVIUE56MXRsd3F1OHB3SXRMaXRSODViL1huT0VSZHl1UT09"
//2-ый элемент массива - стркутра:  ТоварнаяПозиции 2, красный, X; 34;  1;          "MDEwNDY0MDAxNjc0ODI3MzIxMGpFbiUpQk5CYmcwQR05MUZGRDAdOTJkR1Z6ZEdnSFg1UXIzTTBJdmh3Z2ZyRVhzVSsrQ2xQWFJaZEJ4WWorU0VBPQ=="
//3-ый элемент массива - стркутра:  ТоварнаяПозиции 3, синий, XL; 12;  5            
//структура настроек связи с ККТ - НастройкаиСвязиСКТТ                        
//тип связи: COM/USB
//номер COM - 0
//ip - 192.168.0.23
//порт ip - 0          
//оповещение после печати чека - ОповещениеПослеПечатиЧека: ПослеПечатиЧека
//НА ВЫХОДЕ                                                             
//если чек был напечтан успешно
//возвращает в параметр процедуры из ОповещениеПослеПечатиЧека структуру
// - Результат - ИСТИНА
// - COMДрайверККТ10 - COMОбъект драйвера атол
// - НомерЧека - 123
//чек на ККТ
//1 позция: ТоварнаяПозиции 1, красный, X по цене 34 в количестве 1; на сумму 34 [M+] - маркированный товар - прошёл проверку
//2 позция: ТоварнаяПозиции 2, красный, X по цене 34 в количестве 1; на сумму 34 [M+] - маркированный товар - прошёл проверку
//3 позция: ТоварнаяПозиции 3, синий, XL по цене 12 в количестве 5; на сумму 60 
процедура ПечатьЧекаНаККТ(ФормаВладелец, ОбщиеСвойстваЧека, таблицаПозицийЧека, НастройкаиСвязиСКТТ, ОповещениеПослеПечатиЧека, COMДрайверККТ10 = Неопределено) экспорт
	Если таблицаПозицийЧека.Количество() = 0 тогда
		//возращаем результат печати чека в модуль, из которого команда печати чека была вызвана
		стрРезПечатиЧека = Новый Структура;
		стрРезПечатиЧека.Вставить("Результат", ЛОЖЬ);
		стрРезПечатиЧека.Вставить("КодОшибки", -1);
		стрРезПечатиЧека.Вставить("описаниеОшибки", "Нет позиций для печти чека");
		стрРезПечатиЧека.Вставить("COMДрайверККТ10", COMДрайверККТ10);				
		ВыполнитьОбработкуОповещения(ОповещениеПослеПечатиЧека, стрРезПечатиЧека);
		Возврат;
	конецЕсли;
	Если НЕ ОбщиеСвойстваЧека.Свойство("СуммаЧека") тогда
		СуммаЧека = 0;
		для Каждого поз из таблицаПозицийЧека цикл
			СуммаЧека = СуммаЧека + поз.Количество*поз.Цена;
		конецЦикла; //перебор позиций чека
		ОбщиеСвойстваЧека.Вставить("СуммаЧека", СуммаЧека);
	конецЕсли;
	
	//создаём отдельный массив марок для передачи в функию проверки марок
	массивМарок = Новый Массив;
	для Каждого поз из таблицаПозицийЧека цикл  
		Если поз.Свойство("марка") тогда
			Если СокрЛП(поз.Марка) <> "" тогда
				массивМарок.Добавить(Новый Структура);
				текИндЛок = массивМарок.Количество() - 1;
				ТекащяМаркаСтруктура = массивМарок[текИндЛок];
				ТекащяМаркаСтруктура.Вставить("марка", поз.Марка);
			конецЕсли;
		конецЕсли;
	конецЦикла; //перебор позиций чека
	
	//НеЗакрыватьСоединениеСККТ = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "неЗакрыватьСоедиениеВОднойТранзакцииПечатиЧека");
	УровеньОтладки = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "УровеньОтладки");
	//ФлТестовыйРежим = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "ФлТестовыйРежим");
	всеПараметрыЧека = Новый Структура;
	всеПараметрыЧека.Вставить("ФормаВладелец", ФормаВладелец);		
	всеПараметрыЧека.Вставить("списПараметровЧека", ОбщиеСвойстваЧека);
	всеПараметрыЧека.Вставить("массивЧека", таблицаПозицийЧека);	
	всеПараметрыЧека.Вставить("массивМарок", массивМарок);	
	всеПараметрыЧека.Вставить("НастройкаиСвязиСКТТ", НастройкаиСвязиСКТТ);	
	всеПараметрыЧека.Вставить("COMДрайверККТ10", COMДрайверККТ10);	
	всеПараметрыЧека.Вставить("ОповещениеПослеПечатиЧека", ОповещениеПослеПечатиЧека);		
	
	ПроверитьИИсправитьСтрокиОплат(ОбщиеСвойстваЧека, ОбщиеСвойстваЧека.СуммаЧека);
	
	Если ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "ПоказыватьПечатнуюФормуЧекаПередПробитиемНаККТ") тогда
		ОповещениеПослеЗакрытияФормыПредварительногоПросмотраЧека = 
			Новый ОписаниеОповещения("ПослеЗакрытияФормыПредварительногоПросмотраЧека", 
				ЭтотОбъект, всеПараметрыЧека);
		ПарамДляФормы = Новый Структура;
		JSONЧека = СформироватьJSONЧека(ОбщиеСвойстваЧека, таблицаПозицийЧека, УровеньОтладки);		
		ПарамДляФормы.Вставить("ПараметрJSONЧека", JSONЧека);
		ФормаПредварительногоПросмотраЧека = ПолучитьФорму("ОбщаяФорма.ФормаПредварительногоПросмотраЧека", ПарамДляФормы, ФормаВладелец);
		ФормаПредварительногоПросмотраЧека.ОписаниеОповещенияОЗакрытии = ОповещениеПослеЗакрытияФормыПредварительногоПросмотраЧека;
		ФормаПредварительногоПросмотраЧека.Открыть();
	иначе
		резПоказаПредварительногоПросмотраЧека = Новый Структура;
		резПоказаПредварительногоПросмотраЧека.Вставить("Результат", true);		
		ПослеЗакрытияФормыПредварительногоПросмотраЧека(резПоказаПредварительногоПросмотраЧека, всеПараметрыЧека);
	конецЕсли;
конецПроцедуры //ПечатьЧекаНаККТ

процедура ПослеЗакрытияФормыПредварительногоПросмотраЧека(резЗакрытияПредварительногоПросмотраЧека, всеПараметрыЧека) экспорт
	стрРезПечатиЧека = Новый Структура;
	резЗакрытияФормыПредваритПросмЧека = ИСТИНА;
	Если резЗакрытияПредварительногоПросмотраЧека = НЕОПРЕДЕЛЕНО тогда
		резЗакрытияФормыПредваритПросмЧека = ЛОЖЬ;
	иначеЕсли Не резЗакрытияПредварительногоПросмотраЧека.Результат тогда
		резЗакрытияФормыПредваритПросмЧека = ЛОЖЬ;
	конецЕсли;
	Если НЕ резЗакрытияФормыПредваритПросмЧека тогда
		//пользователь отменил печать чека
		стрОписаниеОшибки = "Печать чека отменена пользователем";
		стрРезПечатиЧека.Вставить("Результат", ЛОЖЬ);
		стрРезПечатиЧека.Вставить("КодОшибки", -2);
		стрРезПечатиЧека.Вставить("описаниеОшибки", стрОписаниеОшибки);
		стрРезПечатиЧека.Вставить("COMДрайверККТ10", всеПараметрыЧека.COMДрайверККТ10);
		ВыполнитьОбработкуОповещения(всеПараметрыЧека.ОповещениеПослеПечатиЧека, стрРезПечатиЧека);
		Возврат;	
		//если печать чека отменена пользловатлем
	иначеЕсли резЗакрытияПредварительногоПросмотраЧека.Свойство("ТаблицаОплат") тогда
		//меням суммы оплат
		//ЗаполнитьНовымиСуммамиОплат(всеПараметрыЧека.списПараметровЧека, резЗакрытияПредварительногоПросмотраЧека.ТаблицаОплат);
		для Каждого стрОплатНовые из резЗакрытияПредварительногоПросмотраЧека.ТаблицаОплат цикл
			всеПараметрыЧека.списПараметровЧека.Вставить(стрОплатНовые.Ключ, стрОплатНовые.Значение);
		конецЦикла;			
	конецЕсли;
	
	НеЗакрыватьСоединениеСККТ = ПолучитьЗначениеНастройки(всеПараметрыЧека.НастройкаиСвязиСКТТ, "неЗакрыватьСоедиениеВОднойТранзакцииПечатиЧека");
	УровеньОтладки = ПолучитьЗначениеНастройки(всеПараметрыЧека.НастройкаиСвязиСКТТ, "УровеньОтладки");
	ФлТестовыйРежим = ПолучитьЗначениеНастройки(всеПараметрыЧека.НастройкаиСвязиСКТТ, "ФлТестовыйРежим");
	
	//получаем статус смены
	исходящийJSON = СформироватьJSONПолученияСтатусаСмены(УровеньОтладки);
	ответJSON = "";
	описаниеОшибки = ""; КодОшибки = 0; ПодключатьсяКККТ = ИСТИНА;
	РезультатКоммандыПолученияСтатусаСмены = ВыполнитьЗаданиеJSON(всеПараметрыЧека.COMДрайверККТ10, всеПараметрыЧека.НастройкаиСвязиСКТТ, исходящийJSON, 
					   		   		 		ответJSON, описаниеОшибки, КодОшибки, ПодключатьсяКККТ, НеЗакрыватьСоединениеСККТ);
	//											
	статусСмены = "";									 
	если РезультатКоммандыПолученияСтатусаСмены тогда
		статусСмены = ПолучитьЗнчениеПоляИзJSON(ответJSON, "state");
		Если статусСмены = "" тогда                                                                      
			статусСмены = ПолучитьЗнчениеПоляИзJSON(ответJSON, "status");									 
		конецЕсли;                                                    
	конецЕсли;       
	Если статусСмены = "expired" тогда
		стрРезПечатиЧека = Новый Структура;
		стрРезПечатиЧека.Вставить("Результат", ЛОЖЬ);
		стрРезПечатиЧека.Вставить("КодОшибки", -2);
		стрРезПечатиЧека.Вставить("описаниеОшибки", "Открытая смена превысила 24 часа. Закройте смену на кассе.");
		стрРезПечатиЧека.Вставить("COMДрайверККТ10", всеПараметрыЧека.COMДрайверККТ10);				
		Если НеЗакрыватьСоединениеСККТ тогда
			Отключиться(всеПараметрыЧека.COMДрайверККТ10, УровеньОтладки, ФлТестовыйРежим);
		конецЕсли;
		ВыполнитьОбработкуОповещения(всеПараметрыЧека.ОповещениеПослеПечатиЧека, стрРезПечатиЧека);
		Возврат;		
		//сменв превысила 24 часа
	конецЕсли;
	
	Если всеПараметрыЧека.массивМарок.Количество() > 0 тогда
		ОповещениеПослеПроверкиВсехМарок = Новый ОписаниеОповещения("ПродолжитьПечатьЧекаПослеПроверкиМарок", ЭтотОбъект, всеПараметрыЧека);
		ОткрытьСменуЕслиСменаНеОткрыта(всеПараметрыЧека, статусСмены, НеЗакрыватьСоединениеСККТ);
		ПроверитьМарки(всеПараметрыЧека.массивМарок, ОповещениеПослеПроверкиВсехМарок, всеПараметрыЧека);
	иначе                                      
		резПроверкиМарок = Новый Структура;
		резПроверкиМарок.Вставить("Результат", true);
		ПродолжитьПечатьЧекаПослеПроверкиМарок(резПроверкиМарок, всеПараметрыЧека);
	конецЕсли;		
конецПроцедуры //ПослеПоказаПечатнойФормыПредварительногоПросмотраЧекаККТ

//продожение функции ПечатьЧекаНаККТ
//
процедура ПродолжитьПечатьЧекаПослеПроверкиМарок(СтрРезультатПроверки, всеПараметрыЧека) экспорт
	НеЗакрыватьСоединениеСККТ = ПолучитьЗначениеНастройки(всеПараметрыЧека.НастройкаиСвязиСКТТ, "неЗакрыватьСоедиениеВОднойТранзакцииПечатиЧека");
	УровеньОтладки = ПолучитьЗначениеНастройки(всеПараметрыЧека.НастройкаиСвязиСКТТ, "УровеньОтладки");
	ФлТестовыйРежим = ПолучитьЗначениеНастройки(всеПараметрыЧека.НастройкаиСвязиСКТТ, "ФлТестовыйРежим");
	
	стрРезПечатиЧека = Новый Структура;
	Если Не СтрРезультатПроверки.Результат тогда		                                    
		//не получилось проверить марки  
		//Если СтрРезультатПроверки.Свойство("резПроверкиМарок") тогда
			ответJSON = "";
			исходящийJSON = СформироватьJSONПрерватьПроверкуМарки(УровеньОтладки);
			ВыполнитьЗаданиеJSON(всеПараметрыЧека.COMДрайверККТ10, всеПараметрыЧека.НастройкаиСвязиСКТТ, исходящийJSON, 
									ответJSON, , , ?(НеЗакрыватьСоединениеСККТ, ЛОЖЬ, ИСТИНА), НеЗакрыватьСоединениеСККТ);
			ответJSON = "";
			исходящийJSON = СформироватьJSONОчиститьТаблицуПроверокМаркок(УровеньОтладки);
			ВыполнитьЗаданиеJSON(всеПараметрыЧека.COMДрайверККТ10, всеПараметрыЧека.НастройкаиСвязиСКТТ, исходящийJSON, 
								  ответJSON, , , ?(НеЗакрыватьСоединениеСККТ, ЛОЖЬ, ИСТИНА), ЛОЖЬ);	
			Если СтрРезультатПроверки.Свойство("JSONЗапрос") тогда
				стрРезПечатиЧека.Вставить("JSONЗапрос", СтрРезультатПроверки.JSONЗапрос);
			конецЕсли;                                            
			Если СтрРезультатПроверки.Свойство("JSONЧека") тогда
				стрРезПечатиЧека.Вставить("JSONЧека", СтрРезультатПроверки.JSONЧека);
			конецЕсли;                                          
			Если СтрРезультатПроверки.Свойство("ответJSON") тогда
				стрРезПечатиЧека.Вставить("ответJSON", СтрРезультатПроверки.ответJSON);
			конецЕсли;
			стрРезПечатиЧека.Вставить("Результат", ЛОЖЬ);
			стрРезПечатиЧека.Вставить("КодОшибки", СтрРезультатПроверки.КодОшибки);
			стрРезПечатиЧека.Вставить("описаниеОшибки", СтрРезультатПроверки.описаниеОшибки);
			стрРезПечатиЧека.Вставить("COMДрайверККТ10", всеПараметрыЧека.COMДрайверККТ10);		
			ВыполнитьОбработкуОповещения(всеПараметрыЧека.ОповещениеПослеПечатиЧека, стрРезПечатиЧека);
			Возврат;	
		//конецЕсли; //если не получилось проверить марки
	конецЕсли;
	
	//переносим результат проверок марок в таблицу чеков
	Если СтрРезультатПроверки.Свойство("резПроверкиМарок") тогда
		для Каждого стрМарки из всеПараметрыЧека.массивЧека цикл
			Если НЕ стрМарки.Свойство("Марка") тогда
				Продолжить;
			конецЕсли;
			для Каждого резПроверкиМарки из СтрРезультатПроверки.резПроверкиМарок цикл
				Если стрМарки.Марка = резПроверкиМарки.Марка тогда
					Для каждого эл из резПроверкиМарки цикл
						Если Врег(эл.Ключ) = Врег("Марка") тогда
							Продолжить;
						конецЕсли;
						стрМарки.Вставить(эл.Ключ, эл.Значение);
					конецЦикла;
					прервать;
				конецЕсли;
			конецЦикла;		
		конецЦикла;
	конецЕсли;
	
	ответJSON = "";
	описаниеОшибки = ""; КодОшибки = 0;
	исходящийJSON = СформироватьJSONЧека(всеПараметрыЧека.списПараметровЧека, всеПараметрыЧека.массивЧека, УровеньОтладки);
	стрРезПечатиЧека.Вставить("JSONЧека", исходящийJSON);
	резПечатиЧека = ВыполнитьЗаданиеJSON(всеПараметрыЧека.COMДрайверККТ10, всеПараметрыЧека.НастройкаиСвязиСКТТ, исходящийJSON, 
				ответJSON, описаниеОшибки, КодОшибки, ?(НеЗакрыватьСоединениеСККТ, ЛОЖЬ, ИСТИНА), ЛОЖЬ);
	стрРезПечатиЧека.Вставить("ответJSON", ответJSON);							   
	
	если не резПечатиЧека тогда
		стрРезПечатиЧека.Вставить("Результат", ЛОЖЬ);
		стрРезПечатиЧека.Вставить("JSONЗапрос", исходящийJSON);
		стрРезПечатиЧека.Вставить("JSONЧека", исходящийJSON);
		стрРезПечатиЧека.Вставить("ответJSON", ответJSON);
		стрРезПечатиЧека.Вставить("КодОшибки", КодОшибки);		
		стрРезПечатиЧека.Вставить("описаниеОшибки", описаниеОшибки);
		стрРезПечатиЧека.Вставить("COMДрайверККТ10", всеПараметрыЧека.COMДрайверККТ10);                      
		//возращаем результат печати чека в модуль из, которого команда печати чека была вызвана
		ВыполнитьОбработкуОповещения(всеПараметрыЧека.ОповещениеПослеПечатиЧека, стрРезПечатиЧека);
		Возврат;	
	конецЕсли;          
								
	//возращаем результат печати чека в модуль, из которого команда печати чека была вызвана
	НомерЧека = ПолучитьЗнчениеПоляИзJSON(ответJSON, "fiscalDocumentNumber");
	стрРезПечатиЧека.Вставить("Результат", ИСТИНА);
	//стрРезПечатиЧека.Вставить("ответJSON", ответJSON);
	стрРезПечатиЧека.Вставить("НомерЧека", НомерЧека);
	стрРезПечатиЧека.Вставить("COMДрайверККТ10", всеПараметрыЧека.COMДрайверККТ10);		
	ВыполнитьОбработкуОповещения(всеПараметрыЧека.ОповещениеПослеПечатиЧека, стрРезПечатиЧека);
конецПроцедуры //ПродолжитьПечатьЧекаПослеПроверкиМарок

//продожение функции ПечатьЧекаНаККТ
//
процедура ПроверитьМарки(массивМарок, ОповещениеПослеПроверкиМарок, всеПараметрыЧека, параметрыПроверкиМарки  = Неопределено)
	НеЗакрыватьСоединениеСККТ = ПолучитьЗначениеНастройки(всеПараметрыЧека.НастройкаиСвязиСКТТ, "неЗакрыватьСоедиениеВОднойТранзакцииПечатиЧека");
	УровеньОтладки = ПолучитьЗначениеНастройки(всеПараметрыЧека.НастройкаиСвязиСКТТ, "УровеньОтладки");
	
	Если параметрыПроверкиМарки = Неопределено тогда
		параметрыПроверкиМарки = Новый Структура;
		параметрыПроверкиМарки.Вставить("массивМарок", массивМарок);
		параметрыПроверкиМарки.Вставить("ТекущийИндекс", 0);
		параметрыПроверкиМарки.Вставить("ВсегоПопыток", ПолучитьЗначениеНастройки(всеПараметрыЧека.НастройкаиСвязиСКТТ, "МаксимальноеКолПопытокПроверкиМарки"));
		параметрыПроверкиМарки.Вставить("описаниеОшибки", "OK");
		параметрыПроверкиМарки.Вставить("ОповещениеПослеПроверкиМарок", ОповещениеПослеПроверкиМарок);
		параметрыПроверкиМарки.Вставить("ВсеПараметрыЧека", ВсеПараметрыЧека);
	конецЕсли;                                                                     
	стрРезПроверкиМарок = Новый Структура;
	стрРезПроверкиМарок.Вставить("Результат", ЛОЖЬ);
	ТекущийИндекс = параметрыПроверкиМарки.ТекущийИндекс;   
	Если ТекущийИндекс > массивМарок.Количество() - 1 тогда              
		стрРезПроверкиМарок.Вставить("Результат", ИСТИНА);
		стрРезПроверкиМарок.Вставить("резПроверкиМарок", массивМарок);	
		ВыполнитьОбработкуОповещения(ОповещениеПослеПроверкиМарок, стрРезПроверкиМарок);
		Возврат;
	конецЕсли;
	//начать проверку марки                       
	ТекущаяМарка = массивМарок[ТекущийИндекс].марка;
	//ЭтоЧекВозврата = ЛОЖЬ;
	//Если Свойство(всеПараметрыЧека.списПараметровЧека.ЭтоЧекВозврата) тогда
	//	ЭтоЧекВозврата = всеПараметрыЧека.списПараметровЧека.ЭтоЧекВозврата;	
	//конецЕсли;
	исходящийJSON = СформироватьJSONПроверкиМакри(ТекущаяМарка, всеПараметрыЧека.списПараметровЧека.ЭтоЧекВозврата, УровеньОтладки);
	ответJSON = "";
	описаниеОшибки = ""; КодОшибки = 0;
	резЗапускаЗаданияПроверкиМарки = ВыполнитьЗаданиеJSON(всеПараметрыЧека.COMДрайверККТ10, всеПараметрыЧека.НастройкаиСвязиСКТТ, исходящийJSON, 
					   		   		 ответJSON, описаниеОшибки, КодОшибки, ?(НеЗакрыватьСоединениеСККТ, ЛОЖЬ, ИСТИНА), НеЗакрыватьСоединениеСККТ);
	если не резЗапускаЗаданияПроверкиМарки тогда
		стрРезПроверкиМарок.Вставить("JSONЗапрос", исходящийJSON);
		стрРезПроверкиМарок.Вставить("ответJSON", ответJSON);													 
		
		стрРезПроверкиМарок.Вставить("описаниеОшибки", описаниеОшибки);
		стрРезПроверкиМарок.Вставить("КодОшибки", КодОшибки);			
		ВыполнитьОбработкуОповещения(ОповещениеПослеПроверкиМарок, стрРезПроверкиМарок);
		Возврат;
	конецЕсли;          	
	//обработка ответа ответJSON
	//....
	
	//число попыток проверки марок
	параметрыПроверкиМарки.Вставить("НомерПопытки", 1);                                                          
	
	//получить статус проверки марки                                                                   	
	исходящийJSON = СформироватьJSONПолученияСтатусаПроверкиМарки(УровеньОтладки);
	ответJSON = "";
	описаниеОшибки = ""; КодОшибки = 0;
	резПолченияСтатусаПроверкиМарки = ВыполнитьЗаданиеJSON(всеПараметрыЧека.COMДрайверККТ10, всеПараметрыЧека.НастройкаиСвязиСКТТ, исходящийJSON,
					   		   		 	ответJSON, описаниеОшибки, КодОшибки,
											?(НеЗакрыватьСоединениеСККТ, ЛОЖЬ, ИСТИНА), НеЗакрыватьСоединениеСККТ);
	если не резПолченияСтатусаПроверкиМарки тогда
		стрРезПроверкиМарок.Вставить("JSONЗапрос", исходящийJSON);
		стрРезПроверкиМарок.Вставить("ответJSON", ответJSON);													 
		
		стрРезПроверкиМарок.Вставить("описаниеОшибки", описаниеОшибки);
		стрРезПроверкиМарок.Вставить("КодОшибки", КодОшибки);			
		ВыполнитьОбработкуОповещения(ОповещениеПослеПроверкиМарок, стрРезПроверкиМарок);
		Возврат;
	конецЕсли;          		
	МаркаПроверена = ПолучитьСтатусМаркиИзJSONОтвета(ответJSON);
	Если ПолучитьЗначениеНастройки(всеПараметрыЧека.НастройкаиСвязиСКТТ, "ЭмулироватьЗадержкуОтветаОтИСМ") тогда
		Если ПолучитьЗначениеНастройки(всеПараметрыЧека.НастройкаиСвязиСКТТ, "ИмитацияНеПолученияОтветаОтЧестногоЗнака") тогда
			Если параметрыПроверкиМарки.НомерПопытки <= параметрыПроверкиМарки.ВсегоПопыток тогда			
				МаркаПроверена = ЛОЖЬ;
			конецЕсли;						
		иначе
			Если параметрыПроверкиМарки.НомерПопытки < параметрыПроверкиМарки.ВсегоПопыток тогда			
				МаркаПроверена = ЛОЖЬ;
			конецЕсли;			
		конецЕсли;
	конецЕсли;	
	
	Если НЕ МаркаПроверена тогда                  
		//продолжаем опрашивать статус проверки марки
		//увеличиваем число попвток проверок марки
		параметрыПроверкиМарки.Вставить("НомерПопытки", параметрыПроверкиМарки.НомерПопытки + 1);
		Оповещение = Новый ОписаниеОповещения("ПродолжитьПолученияСтатусаМарки", ЭтотОбъект, параметрыПроверкиМарки);
		ПоказатьПредупреждение(Оповещение, "Идёт проверка марки """ + ПеревестиМаркуИзBASE64(СокрЛП(массивМарок[ТекущийИндекс].марка), true) + """. " 
								"Попытка " + СокрЛП(параметрыПроверкиМарки.НомерПопытки - 1) + "/" + 
								СокрЛП(параметрыПроверкиМарки.ВсегоПопыток), 1, "Проверка марки...");
		Возврат;								
	конецЕсли;
	//если марка проверена
	//принимаем марку
	
	//если марка с ошибками, то выжать диалог запроса принять марку или нет
	ПринятьМарку = ИСТИНА;
	исходящийJSON = СформироватьJSONПринятияИлиОтказаМарки(ПринятьМарку, УровеньОтладки);
	ответJSON = "";
	описаниеОшибки = ""; КодОшибки = 0;
	резКомандыПринятьМарку = ВыполнитьЗаданиеJSON(всеПараметрыЧека.COMДрайверККТ10, всеПараметрыЧека.НастройкаиСвязиСКТТ, исходящийJSON, 
					   		   		 ответJSON, описаниеОшибки, КодОшибки,
										?(НеЗакрыватьСоединениеСККТ, ЛОЖЬ, ИСТИНА), НеЗакрыватьСоединениеСККТ);
	если не резКомандыПринятьМарку тогда
		стрРезПроверкиМарок.Вставить("JSONЗапрос", исходящийJSON);
		стрРезПроверкиМарок.Вставить("ответJSON", ответJSON);													 	
		
		стрРезПроверкиМарок.Вставить("описаниеОшибки", описаниеОшибки);
		стрРезПроверкиМарок.Вставить("КодОшибки", КодОшибки);			
		ВыполнитьОбработкуОповещения(ОповещениеПослеПроверкиМарок, стрРезПроверкиМарок);
		Возврат;
	конецЕсли;          			
	
	//читаем результат проверки марки                                                     
	ПрочитатьРезультатПроврекиМаркиизJSONОтвета(ответJSON, массивМарок[ТекущийИндекс]);
	//переходим к проверке следующей марки              
	ПослеПолученияСтатусаМарки(массивМарок, параметрыПроверкиМарки);
конецПроцедуры //ПроверитьМарки                                      

//продожение функции ПроверитьМарки, ПечатьЧекаНаККТ
//
процедура ПродолжитьПолученияСтатусаМарки(параметрыПроверкиМарки) экспорт
	НеЗакрыватьСоединениеСККТ = ПолучитьЗначениеНастройки(параметрыПроверкиМарки.всеПараметрыЧека.НастройкаиСвязиСКТТ, "неЗакрыватьСоедиениеВОднойТранзакцииПечатиЧека");
	УровеньОтладки = ПолучитьЗначениеНастройки(параметрыПроверкиМарки.всеПараметрыЧека.НастройкаиСвязиСКТТ, "УровеньОтладки");
	
	массивМарок   = параметрыПроверкиМарки.массивМарок;                     
	ТекущийИндекс = параметрыПроверкиМарки.ТекущийИндекс;
	стрРезПроверкиМарок = Новый Структура;
	Если параметрыПроверкиМарки.НомерПопытки > параметрыПроверкиМарки.ВсегоПопыток тогда
		//ошибка - залогировать                         
		стрРезПроверкиМарок.Вставить("Результат", ЛОЖЬ);	
		стрРезПроверкиМарок.Вставить("описаниеОшибки", "Ошибка: не удалось получить статус проверки марки """ + 
				ПеревестиМаркуИзBASE64(СокрЛП(массивМарок[ТекущийИндекс].марка), true) + """.");
		стрРезПроверкиМарок.Вставить("КодОшибки", -1);	
		ВыполнитьОбработкуОповещения(параметрыПроверкиМарки.ОповещениеПослеПроверкиМарок, стрРезПроверкиМарок);
		Возврат;
	конецЕсли;
	//получить статус проверки марки                                                                   
	исходящийJSON = СформироватьJSONПолученияСтатусаПроверкиМарки(УровеньОтладки);
	ответJSON = "";
	описаниеОшибки = ""; КодОшибки = 0;
	резПолченияСтатусаПроверкиМарки = ВыполнитьЗаданиеJSON(параметрыПроверкиМарки.всеПараметрыЧека.COMДрайверККТ10, параметрыПроверкиМарки.всеПараметрыЧека.НастройкаиСвязиСКТТ, исходящийJSON, 
					   		   		 ответJSON, описаниеОшибки, КодОшибки,
										?(НеЗакрыватьСоединениеСККТ, ЛОЖЬ, ИСТИНА), НеЗакрыватьСоединениеСККТ);
	если не резПолченияСтатусаПроверкиМарки тогда
		стрРезПроверкиМарок.Вставить("JSONЗапрос", исходящийJSON);
		стрРезПроверкиМарок.Вставить("ответJSON", ответJSON);													 										 
										 
		стрРезПроверкиМарок.Вставить("Результат", ЛОЖЬ);									 
		стрРезПроверкиМарок.Вставить("описаниеОшибки", описаниеОшибки);
		стрРезПроверкиМарок.Вставить("КодОшибки", КодОшибки);			
		ВыполнитьОбработкуОповещения(параметрыПроверкиМарки.ОповещениеПослеПроверкиМарок, стрРезПроверкиМарок);
		Возврат;
	конецЕсли;          		
	
	МаркаПроверена = ПолучитьСтатусМаркиИзJSONОтвета(ответJSON);	
	
	Если ПолучитьЗначениеНастройки(параметрыПроверкиМарки.всеПараметрыЧека.НастройкаиСвязиСКТТ, "ЭмулироватьЗадержкуОтветаОтИСМ") тогда
		Если ПолучитьЗначениеНастройки(параметрыПроверкиМарки.всеПараметрыЧека.НастройкаиСвязиСКТТ, "ИмитацияНеПолученияОтветаОтЧестногоЗнака") тогда
			Если параметрыПроверкиМарки.НомерПопытки <= параметрыПроверкиМарки.ВсегоПопыток тогда			
				МаркаПроверена = ЛОЖЬ;
			конецЕсли;						
		иначе
			Если параметрыПроверкиМарки.НомерПопытки < параметрыПроверкиМарки.ВсегоПопыток тогда			
				МаркаПроверена = ЛОЖЬ;
			конецЕсли;			
		конецЕсли;
	конецЕсли;	
		
	//Если параметрыПроверкиМарки.всеПараметрыЧека.флТестовыйРежим тогда
	//	//иммитация проверки марки
	//	Если параметрыПроверкиМарки.НомерПопытки <= параметрыПроверкиМарки.ВсегоПопыток тогда
	//		МаркаПроверена = ЛОЖЬ;
	//	конецЕсли;	
	//конецЕсли;
	//если марка ещё не проверена                                      
	Если НЕ МаркаПроверена тогда
		параметрыПроверкиМарки.Вставить("НомерПопытки", параметрыПроверкиМарки.НомерПопытки + 1);
		Оповещение = Новый ОписаниеОповещения("ПродолжитьПолученияСтатусаМарки", ЭтотОбъект, параметрыПроверкиМарки);
		ПоказатьПредупреждение(Оповещение, "Идёт проверка марки """ + ПеревестиМаркуИзBASE64(СокрЛП(массивМарок[ТекущийИндекс].марка), true) + """. " 
								"Попытка " + СокрЛП(параметрыПроверкиМарки.НомерПопытки - 1) + "/" + СокрЛП(параметрыПроверкиМарки.ВсегоПопыток), 1, "Проверка марки...");
		Возврат;
	конецЕсли;
	//если статус марки получен
	//принимаем марку
	ПринятьМарку = ИСТИНА;
	исходящийJSON = СформироватьJSONПринятияИлиОтказаМарки(ПринятьМарку, УровеньОтладки);
	ответJSON = "";
	описаниеОшибки = ""; КодОшибки = 0;
	резКомандыПринятьМарку = ВыполнитьЗаданиеJSON(параметрыПроверкиМарки.всеПараметрыЧека.COMДрайверККТ10, параметрыПроверкиМарки.всеПараметрыЧека.НастройкаиСвязиСКТТ, исходящийJSON, 
					   		   		 ответJSON, описаниеОшибки, КодОшибки,
										?(НеЗакрыватьСоединениеСККТ, ЛОЖЬ, ИСТИНА), НеЗакрыватьСоединениеСККТ);	
	 если не резКомандыПринятьМарку тогда
		стрРезПроверкиМарок.Вставить("JSONЗапрос", исходящийJSON);
		стрРезПроверкиМарок.Вставить("ответJSON", ответJSON);													 										 
		 
		стрРезПроверкиМарок.Вставить("Результат", ЛОЖЬ);									 
		стрРезПроверкиМарок.Вставить("описаниеОшибки", описаниеОшибки);
		стрРезПроверкиМарок.Вставить("КодОшибки", КодОшибки);			
		ВыполнитьОбработкуОповещения(параметрыПроверкиМарки.ОповещениеПослеПроверкиМарок, стрРезПроверкиМарок);
		Возврат;
	конецЕсли;          			
									 
	//читаем результат проверки марки	
	ПрочитатьРезультатПРоврекиМаркиизJSONОтвета(ответJSON, массивМарок[ТекущийИндекс]);
	//переходим к проверке следующей марки                
	ПослеПолученияСтатусаМарки(массивМарок, параметрыПроверкиМарки);
конецПроцедуры //ПродолжитьПолученияСтатусаМарки

//продолжение функции ПроверитьМарки, ПечатьЧекаНаККТ
//
процедура ПослеПолученияСтатусаМарки(массивМарок, параметрыПроверкиМарки)
	параметрыПроверкиМарки.Вставить("ТекущийИндекс", параметрыПроверкиМарки.ТекущийИндекс + 1); 
	ПроверитьМарки(массивМарок, параметрыПроверкиМарки.ОповещениеПослеПроверкиМарок, параметрыПроверкиМарки.ВсеПараметрыЧека, параметрыПроверкиМарки);
конецПроцедуры //ПослеПолученияСтатусаМарки

функция ЗакрытьКассовуюСмену(Кассир, НастройкаиСвязиСКТТ, COMДрайверККТ10 = Неопределено, КодОшибки = 0, описаниеОшибки = "") экспорт
	УровеньОтладки = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "УровеньОтладки");
	
	РезультатЗакрытияСмены = Новый Структура;
	РезультатЗакрытияСмены.Вставить("Результат", ИСТИНА);									 
	исходящийJSON = СформироватьJSONЗакрытияСмены(Кассир, УровеньОтладки);
	ответJSON = "";
	описаниеОшибки = ""; КодОшибки = 0;
	резКомандыЗакрытияСмены = ВыполнитьЗаданиеJSON(COMДрайверККТ10, НастройкаиСвязиСКТТ, исходящийJSON, 
					   		   		 ответJSON, описаниеОшибки, КодОшибки);	
	РезультатЗакрытияСмены.Вставить("JSONЗапрос", исходящийJSON);
	РезультатЗакрытияСмены.Вставить("ответJSON", ответJSON);													 										 									 
	если не резКомандыЗакрытияСмены тогда 
		РезультатЗакрытияСмены.Вставить("Результат", ЛОЖЬ);									 
		РезультатЗакрытияСмены.Вставить("описаниеОшибки", описаниеОшибки);
		РезультатЗакрытияСмены.Вставить("КодОшибки", КодОшибки);
	иначе
		номерСмены = ПолучитьЗнчениеПоляИзJSON(ответJSON, "shiftNumber");                    
		РезультатЗакрытияСмены.Вставить("Номер_смены", номерСмены);									 
	конецЕсли;     
	Возврат РезультатЗакрытияСмены;
конецФункции //ЗакрытьКассовуюСмену
	
функция ЗалогироватьОпреацию(уровеньЛога, операция, уровеньОтладки = 1, рез = TRUE, кодОшибки = "", описОшибки = "", сумма = 0) экспорт
	резЗаписиВЛог = ИСТИНА;
	Если уровеньЛога > уровеньОтладки тогда
		Возврат ИСТИНА;
	конецЕсли;
	текстЛогов = Новый ТекстовыйДокумент;
	дирЛогФайлов = ПолучитьДиректориюЛогФайлов();
	датаФ = Формат(ТекущаяДата(), "ДФ=ггггММдд");
	полноеИмяФайлаЛога = дирЛогФайлов + датаФ+"logs1c.txt";
	ФайлНаДиске = Новый Файл(полноеИмяФайлаЛога);
	Если ФайлНаДиске.Существует() тогда        
		текстЛогов.Прочитать(полноеИмяФайлаЛога);
	иначе                                 
		старшеДней = 10;
		УдалитьФайлыЛогов(дирЛогФайлов, старшеДней, уровеньОтладки);
	конецЕсли;	                               			
	Ошибки = ""; выпНеВыл = "выполнена успешно";
	Если Не рез тогда
		Ошибки = "код:" + СокрЛП(кодОшибки)+". "+СокрЛП(кодОшибки);
		выпНеВыл = "не выполнена";
	конецЕсли;
	стрЗаписи = СокрЛП(ТекущаяУниверсальнаяДатаВМиллисекундах()) + ";" + СокрЛП(ТекущаяДата()) + ";" + "Операция:"+СокрЛП(операция)+" "+выпНеВыл+Ошибки;
	текстЛогов.ДобавитьСтроку(стрЗаписи);
	текстЛогов.Записать(полноеИмяФайлаЛога, КодировкаТекста.UTF8);
	Если уровеньОтладки >=3 тогда
		Сообщить(стрЗаписи);
	конецЕсли;
	Возврат резЗаписиВЛог;
конецФункции //ЗалогироватьОпреацию         

функция СоздатьОбъектДрайвера(уровеньОтладки = 1, флТестовыйРежим = FALSE, описаниеОшибки = "")
	Если уровеньОтладки >=3 тогда
		Сообщить("начало: СоздатьОбъектДрайвера");				
	конецЕсли;
	описаниеОшибки = "";
	try
		COMДрайверККТ10 = Новый COMОбъект("AddIn.Fptr10");
		//отладка                
		Если уровеньОтладки >=3 тогда
			Сообщить("COMОбъект(""AddIn.Fptr10"" создан");						
		конецЕсли;
	except                                                          
		описаниеОшибки  = ОписаниеОшибки();		
		COMДрайверККТ10 = Неопределено;
		стрОшибки       = описаниеОшибки;
		Сообщить(стрОшибки);
		ЗалогироватьОпреацию(0, "СоздатьОбъектДрайвера", уровеньОтладки, False, , стрОшибки);					
	endtry;
	Если уровеньОтладки >=3 тогда
		Сообщить("конец: СоздатьОбъектДрайвера");				
	конецЕсли;	
	Возврат COMДрайверККТ10;
конецФункции //СоздатьОбъектДрайвера

функция ПолучитьОбъектДрайвера10(COMДрайверККТ10 = Неопределено, уровеньОтладки = 1, флТестовыйРежим = FALSE, описаниеОшибки = "") экспорт
	Если уровеньОтладки >=3 тогда
		Сообщить("начало: ПолучитьОбъектДрайвера10");			
	конецЕсли;
	Если COMДрайверККТ10 = Неопределено тогда
		COMДрайверККТ10 = СоздатьОбъектДрайвера(уровеньОтладки, флТестовыйРежим, описаниеОшибки);
		Если COMДрайверККТ10 = Неопределено тогда
			стрОшибки = описаниеОшибки;
			Сообщить(стрОшибки);
			ЗалогироватьОпреацию(0, "ПолучитьОбъектДрайвера10", уровеньОтладки, False, , стрОшибки);			
		конецЕсли;
	конецЕсли;
	Если уровеньОтладки >=3 тогда
		Сообщить("конец: ПолучитьОбъектДрайвера10");			
	конецЕсли;	
	возврат COMДрайверККТ10;
конецФункции //ПолучитьОбъектДрайвера10

функция Подключиться(COMДрайверККТ10 = Неопределено, НастройкаиСвязиСКТТ = Неопределено, описаниеОшибки = "", КодОшибки = 0)
	УровеньОтладки = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "УровеньОтладки");
	ФлТестовыйРежим = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "ФлТестовыйРежим");	
	
	Если УровеньОтладки >=3 тогда
		Сообщить("начало: Подключиться");		
	конецЕсли;
	рез = ЛОЖЬ;                                      
	Если ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "ТипСвязи") = "web сервер" 
	тогда
		//проврека связи с ККТ через http запрос
		Если УровеньОтладки >=3 тогда
			Сообщить("web подключение ещё не реализовано");		
			Сообщить("конец: Подключиться");		
		конецЕсли;			
		Возврат рез;
	конецЕсли;
	COMДрайверККТ10 = ПолучитьОбъектДрайвера10(COMДрайверККТ10, УровеньОтладки, ФлТестовыйРежим, описаниеОшибки);
	Если COMДрайверККТ10 = Неопределено тогда
		стрОшибки = "Ошибка создание COM объекта драйвера (возможно драйвер ККТ АТОЛ ещё не установлен:" + СокрЛП(описаниеОшибки);
		Если УровеньОтладки >=2 тогда
			Сообщить(стрОшибки);
		конецЕсли;    
		описаниеОшибки = стрОшибки;
		КодОшибки = -1;
		ЗалогироватьОпреацию(0, "Подключение к ККТ", УровеньОтладки, False, , стрОшибки);
		Если уровеньОтладки >=3 тогда
			Сообщить("драйвер ККТ атол не установлен");		
			Сообщить("конец: Подключиться");		
		конецЕсли;					
		Возврат рез;
	конецЕсли;                   
	
	Если ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "ТипСвязи") = "web сервер" тогда
		//если черз веб - сервер, то просто отсылка get запросов
		//нужен, соответсвенно IP адрес web сервера ККТ
		//НастройкаСвязи.IPWebСеврера
	иначеЕсли ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "ТипСвязи") = "по IP ккт" тогда
		//касса имеет свой ip
		COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_MODEL, COMДрайверККТ10.LIBFPTR_MODEL_ATOL_AUTO);
		COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_PORT, COMДрайверККТ10.LIBFPTR_PORT_TCPIP);
		COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_IPADDRESS, ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "IP"));
		COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_IPPORT, ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "Порт_IPККТ"));
	иначеЕсли ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "ТипСвязи") = "через сервер ККТ" тогда
		//через сервер ККТ - должен быть открыт порт на компьютере с к кассой 19524                                      
		COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_MODEL, COMДрайверККТ10.LIBFPTR_MODEL_ATOL_AUTO);
		COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_REMOTE_SERVER_ADDR, ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "IP"));
		COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_REMOTE_SERVER_CONNECTION_TIMEOUT, ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "Таймаут_севрерККТ"));
		//и com порту                                                                                            
		Если ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "НомерCOM") > 0 тогда
    		COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_PORT, COMДрайверККТ10.LIBFPTR_PORT_COM);
	    	COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_COM_FILE, ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "НомерCOM"));
    		COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_BAUDRATE, COMДрайверККТ10.LIBFPTR_PORT_BR_115200);					
		иначе
			COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_PORT, COMДрайверККТ10.LIBFPTR_PORT_USB);
		конецЕсли;
    	COMДрайверККТ10.applySingleSettings();	
	иначеЕсли ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "ТипСвязи") = "через COM/USB" тогда
		//по com порту                                                                                                   
		Если ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "НомерCOM") > 0 тогда
    		COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_PORT, COMДрайверККТ10.LIBFPTR_PORT_COM);
	    	COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_COM_FILE, ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "НомерCOM"));
    		COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_BAUDRATE, COMДрайверККТ10.LIBFPTR_PORT_BR_115200);
		иначе
			COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_PORT, COMДрайверККТ10.LIBFPTR_PORT_USB);
		конецЕсли;
	иначе
		//ничего не делаем, возможно кассовый аппарат сам подцепится по текщий настройкам драйвера
	конецЕсли;	
	
	рез = ИСТИНА; резОткрыт = 0; 
	Если Не ФлТестовыйРежим тогда
		резОткрыт = COMДрайверККТ10.Open();
	конецЕсли;               
	Если резОткрыт <> 0 тогда
		кодОшибки = COMДрайверККТ10.errorCode();
		описаниеОшибки = COMДрайверККТ10.errorDescription();          
		ЗалогироватьОпреацию(0, "Подключение к ККТ", УровеньОтладки, False, кодОшибки, описаниеОшибки);
		рез = ЛОЖЬ;
	конецЕсли;
	Если УровеньОтладки >=3 тогда
		Сообщить("конец: Подключиться");		
	конецЕсли;	
	Возврат рез;
конецФункции //Подключиться

функция ПроверитьКорректностьJSON(COMДрайверККТ10, JSON, уровеньОтладки = 1, флТестовыйРежим = FALSE, описаниеОшибки = "", КодОшибки = 0) экспорт
	рез = ИСТИНА;    
	Возврат рез;
	Если уровеньОтладки >= 3 тогда
		Сообщить("начало: ПроверитьКорректностьJSON");	
	конецЕсли;				
	рез = ИСТИНА;    
	Если COMДрайверККТ10 = Неопределено тогда           
		Если уровеньОтладки >= 3 тогда
			Сообщить("конец (COMДрайверККТ10 неопределено): ПроверитьКорректностьJSON");	
		конецЕсли;
		Возврат рез;
	конецЕсли;	
    COMДрайверККТ10.setParam(COMДрайверККТ10.LIBFPTR_PARAM_JSON_DATA, JSON);
    резВалид = COMДрайверККТ10.validateJson();
	Если резВалид <> 0 тогда
		кодОшибки = COMДрайверККТ10.errorCode();
		описаниеОшибки = COMДрайверККТ10.errorDescription();          		
		стрОшибки = описаниеОшибки;
		Если уровеньОтладки >=2 тогда
			Сообщить(стрОшибки);
		конецЕсли;
		ЗалогироватьОпреацию(0, "ПроверитьКорректностьJSON", уровеньОтладки, False, КодОшибки, стрОшибки);					
		рез = ЛОЖЬ;
	конецЕсли;		                                              
	Если уровеньОтладки >= 3 тогда
		Сообщить("конец: ПроверитьКорректностьJSON");	
	конецЕсли;							
	Возврат рез;
конецФункции //ПроверитьКорректностьJSON                  

функция ПолучитьМокОтветНаJSONКомманду(JSONЗадание, уровеньОтладки = 1, результатГотов = ИСТИНА)
	Если уровеньОтладки >= 3 тогда
		Сообщить("начало: ПолучитьМокОтветНаJSONКомманду");	
	конецЕсли;	  
	типОперации = ПолучитьЗнчениеПоляИзJSON(JSONЗадание, "type");
	json = Новый ЗаписьJSON;                   
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб);
	json.УстановитьСтроку(ПараметрыЗаписиJSON);
	json.ЗаписатьНачалоОбъекта();	
	Если Найти(JSONЗадание, "getMarkingCodeValidationStatus") > 0 тогда
		//Если результатГотов тогда
			json.ЗаписатьИмяСвойства("ready");
			json.ЗаписатьЗначение(результатГотов);
			json.ЗаписатьИмяСвойства("sentImcRequest");
			json.ЗаписатьЗначение(true);               			
			json.ЗаписатьИмяСвойства("driverError");
			json.ЗаписатьНачалоОбъекта();
			json.ЗаписатьИмяСвойства("code");
			json.ЗаписатьЗначение(0);               						
			json.ЗаписатьКонецОбъекта();			
			json.ЗаписатьИмяСвойства("onlineValidation");
			json.ЗаписатьНачалоОбъекта();
				json.ЗаписатьИмяСвойства("itemInfoCheckResult");
				json.ЗаписатьНачалоОбъекта();                       
					json.ЗаписатьИмяСвойства("imcCheckFlag");
					json.ЗаписатьЗначение(true);               														
					json.ЗаписатьИмяСвойства("imcCheckResult");
					json.ЗаписатьЗначение(true);               														
					json.ЗаписатьИмяСвойства("imcStatusInfo");
					json.ЗаписатьЗначение(true);               														
					json.ЗаписатьИмяСвойства("ecrStandAloneFlag");
					json.ЗаписатьЗначение(true);               																			
				json.ЗаписатьКонецОбъекта();						
				json.ЗаписатьИмяСвойства("markOperatorItemStatus");
				json.ЗаписатьЗначение("itemEstimatedStatusCorrect");               										
				json.ЗаписатьИмяСвойства("markOperatorResponse");
				json.ЗаписатьНачалоОбъекта();
					json.ЗаписатьИмяСвойства("responseStatus");
					json.ЗаписатьЗначение(true);               														
					json.ЗаписатьИмяСвойства("itemStatusCheck");
					json.ЗаписатьЗначение(true);               																							
				json.ЗаписатьКонецОбъекта();										
				json.ЗаписатьИмяСвойства("markOperatorResponseResult");
				json.ЗаписатьЗначение("correct");               										
				json.ЗаписатьИмяСвойства("imcType");
				json.ЗаписатьЗначение("imcFmVerifyCode88");               										
				json.ЗаписатьИмяСвойства("imcBarcode");
				json.ЗаписатьЗначение("MDEwMjkwMDAwMDQ3NTgzMDIxTWRFZng6WHA2WUZkNx05MTgwMjkdOTJhUUlRa0k3b0hYbXpHL21kS3h6Q1VDS1RKSFhvQk9EZG1DZE01azhRajdnYVpWMnhibjY2eEJYR0lLcnRmdnFQSU5BMmprYmp5ajMvTytreTZvdTFOQT09");               										
				json.ЗаписатьИмяСвойства("imcModeProcessing");
				json.ЗаписатьЗначение(0);               														
			json.ЗаписатьКонецОбъекта();						
		//иначе     			
		//конецЕсли;
	иначеЕсли Найти(JSONЗадание, "acceptMarkingCode") > 0 тогда
		json.ЗаписатьИмяСвойства("itemInfoCheckResult");
		json.ЗаписатьНачалоОбъекта();
			json.ЗаписатьИмяСвойства("ecrStandAloneFlag");
			json.ЗаписатьЗначение(false);
			json.ЗаписатьИмяСвойства("imcCheckFlag");
			json.ЗаписатьЗначение(true);						
			json.ЗаписатьИмяСвойства("imcCheckResult");
			json.ЗаписатьЗначение(true);						
			json.ЗаписатьИмяСвойства("imcEstimatedStatusCorrect");
			json.ЗаписатьЗначение(true);						
			json.ЗаписатьИмяСвойства("imcStatusInfo");
			json.ЗаписатьЗначение(true);									
		json.ЗаписатьКонецОбъекта();
	иначеЕсли (Найти(JSONЗадание, "sell") > 0) или (Найти(JSONЗадание, "sellReturn") > 0) тогда
		json.ЗаписатьИмяСвойства("fiscalParams");
		json.ЗаписатьНачалоОбъекта();
			json.ЗаписатьИмяСвойства("fiscalDocumentDateTime");
			json.ЗаписатьЗначение("2023-11-09T09:54:00+03:00");
			json.ЗаписатьИмяСвойства("fiscalDocumentNumber");
			json.ЗаписатьЗначение(123);						
			json.ЗаписатьИмяСвойства("fiscalDocumentSign");
			json.ЗаписатьЗначение("1494325660");						
			json.ЗаписатьИмяСвойства("fiscalReceiptNumber");
			json.ЗаписатьЗначение(1);						
			json.ЗаписатьИмяСвойства("fnNumber");
			json.ЗаписатьЗначение("9999078900000961");									
			json.ЗаписатьИмяСвойства("registrationNumber");
			json.ЗаписатьЗначение("0000000001002292");									
			json.ЗаписатьИмяСвойства("shiftNumber");
			json.ЗаписатьЗначение(12);									
			json.ЗаписатьИмяСвойства("total");
			json.ЗаписатьЗначение(72.34);									
			json.ЗаписатьИмяСвойства("fnsUrl");
			json.ЗаписатьЗначение("www.nalog.gov.ru");												
		json.ЗаписатьКонецОбъекта();
		json.ЗаписатьИмяСвойства("warnings");               
		json.ЗаписатьЗначение("");						
	иначеЕсли Найти(JSONЗадание, "closeShift") тогда
		json.ЗаписатьИмяСвойства("fiscalParams");
		json.ЗаписатьНачалоОбъекта();
			json.ЗаписатьИмяСвойства("fiscalDocumentDateTime");
			json.ЗаписатьЗначение("");
			json.ЗаписатьИмяСвойства("fiscalDocumentNumber");
			json.ЗаписатьЗначение(69);						
			json.ЗаписатьИмяСвойства("fiscalDocumentSign");
			json.ЗаписатьЗначение("1494325660");						
			json.ЗаписатьИмяСвойства("fnNumber");
			json.ЗаписатьЗначение("9999078900000961");									
			json.ЗаписатьИмяСвойства("registrationNumber");
			json.ЗаписатьЗначение("0000000001002292");									
			json.ЗаписатьИмяСвойства("shiftNumber");
			json.ЗаписатьЗначение(14);									
			json.ЗаписатьИмяСвойства("receiptsCount");
			json.ЗаписатьЗначение(72);									
			json.ЗаписатьИмяСвойства("fnsUrl");
			json.ЗаписатьЗначение("www.nalog.gov.ru");												
		json.ЗаписатьКонецОбъекта();
		json.ЗаписатьИмяСвойства("warnings");               
		json.ЗаписатьЗначение("");						
	иначеЕсли Найти(JSONЗадание, "getRegistrationInfo") тогда
		json.ЗаписатьИмяСвойства("organization");
		json.ЗаписатьНачалоОбъекта();
			json.ЗаписатьИмяСвойства("name");
			json.ЗаписатьЗначение("ООО ""Организация какая-то""");
			json.ЗаписатьИмяСвойства("taxationTypes");
			json.ЗаписатьНачалоМассива();
				json.ЗаписатьЗначение("patent"); //osn, usnIncome, usnIncomeOutcome, esn, patent
			json.ЗаписатьКонецМассива();
		json.ЗаписатьКонецОбъекта();		
	иначеЕсли Найти(JSONЗадание, "getShiftStatus") тогда
		json.ЗаписатьИмяСвойства("shiftStatus");
		json.ЗаписатьНачалоОбъекта();
			json.ЗаписатьИмяСвойства("documentsCount");
			json.ЗаписатьЗначение(2);
			json.ЗаписатьИмяСвойства("state");
			json.ЗаписатьЗначение("opened"); //opened, closed, expired
		json.ЗаписатьКонецОбъекта();				
	иначе                                  
		json.ЗаписатьИмяСвойства("operation");    
		json.ЗаписатьЗначение(типОперации);
		json.ЗаписатьИмяСвойства("result");
		json.ЗаписатьЗначение("мок ответ от ККК");
		json.ЗаписатьИмяСвойства("result code");
		json.ЗаписатьЗначение(0);				
	конецЕсли;
	json.ЗаписатьКонецОбъекта();
	Если уровеньОтладки >= 3 тогда
		Сообщить("конец: ПолучитьМокОтветНаJSONКомманду");	
	конецЕсли;					
	Возврат json.Закрыть();
конецФункции //ПолучитьМокОтветНаJSONКомманду

//Процедура ОнТик() экспорт  
//	//НомерТика = НомерТика + 1;
//	//Элементы.ДекорацияСостояние.Заголовок = СокрЛП(НомерТика);
//	//Сообщить("номер тика="+СокрЛП(СокрЛП(НомерТика)));
//	//ОтветJSON = ПолучитьМокОтветНаJSONКомманду(JSONЗадание);
//	json = Новый ЗаписьJSON;                   
//	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб);
//	json.УстановитьСтроку(ПараметрыЗаписиJSON);
//	json.ЗаписатьНачалоОбъекта();		
//		json.ЗаписатьИмяСвойства("shiftStatus");
//		json.ЗаписатьНачалоОбъекта();
//			json.ЗаписатьИмяСвойства("documentsCount");
//			json.ЗаписатьЗначение(2);
//			json.ЗаписатьИмяСвойства("state");
//			json.ЗаписатьЗначение("opened"); //opened, closed, expired
//		json.ЗаписатьКонецОбъекта();					
//	json.ЗаписатьКонецОбъекта();
//	json.Закрыть();
//	//ОбработатьОвтетJSON();
//конецПроцедуры //ОнТик

функция ПослеЗакртияФормыПолученияОтветаОтККТ(Результат, ДопПараметры) экспорт
	Сообщить("Реузльтата = " + СокрЛП(Результат));
конецФункции //ПослеЗакртияФормыПолученияОтветаОтККТ

Функция ВыполнитьЗаданиеJSONАсинх(ФормаВладелец, НастройкаиСвязиСКТТ, JSONЗадание, ОтветJSON) экспорт
	ПарамДляФормы = Новый Структура;
	ПарамДляФормы.Вставить("ПараметрМойПараметр", "Значение параметра");
	//ФормаОжиданияОтвета = ПолучитьФорму("ОбщаяФорма.ОкноПродавца", ПарамДляФормы, ФормаВладелец);
	ФормаОжиданияОтвета = ПолучитьФорму("ОбщаяФорма.ФормаОжиданияОтветаОтККТ", ПарамДляФормы, ФормаВладелец);
	описаниеПриЗакрытии = Новый ОписаниеОповещения("ПослеЗакртияФормыПолученияОтветаОтККТ", ЭтотОбъект);
	ФормаОжиданияОтвета.ОписаниеОповещенияОЗакрытии = описаниеПриЗакрытии;
	//ОткрытьФорму("ОбщаяФорма.ФормаОжиданияОтветаОтККТ", ПарамДляФормы
	ФормаОжиданияОтвета.Открыть();
	//ПодключитьОбработчикОжидания("ПечатьЧекаНаККТКлиент.ОнТик", 1, false);
конецФункции //ВыполнитьЗаданиеJSONАсинх

//отправка на кассу задания. например, напечать чек или сформировать z-отчет и прочие
//входные данные JSON - задание
//выходные данные: ответ от кассы в ввиде json, boolean - была ли отправлена команда на ККТ 
//документация по JSON - заданиям на сайте производителя кассы атол
//https://integration.atol.ru/api/#json-tasks
функция ВыполнитьЗаданиеJSON(COMДрайверККТ10, НастройкаиСвязиСКТТ, JSONЗадание, ОтветJSON, описаниеОшибки = "", 
								КодОшибки = 0, ПодключатьсяКККТ = ИСТИНА, 
									НеЗакрыватьСоединениеСККТ = FALSE) экспорт
	УровеньОтладки = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "УровеньОтладки");
	ФлТестовыйРежим = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "ФлТестовыйРежим");	
	
	Если УровеньОтладки >= 3 тогда
		Сообщить("начало: ВыполнитьЗаданиеJSON");	
	конецЕсли;			
	рез = ИСТИНА;
	ОтветJSON = "";
	Если ПодключатьсяКККТ тогда
		резПодкл = Подключиться(COMДрайверККТ10, НастройкаиСвязиСКТТ, описаниеОшибки, КодОшибки);
		Если НЕ резПодкл тогда
			стрОшибки = описаниеОшибки;
			Если уровеньОтладки >=2 тогда
				Сообщить(стрОшибки);
			конецЕсли;
			ЗалогироватьОпреацию(0, "Подключение ККТ в ВыполнитьЗаданиеJSON", УровеньОтладки, False, КодОшибки, стрОшибки);
			рез = ЛОЖЬ;
			Если уровеньОтладки >= 3 тогда
				Сообщить("конец: ВыполнитьЗаданиеJSON");	
			конецЕсли;					
			Возврат рез;
		конецЕсли;	
	конецЕсли;
	
	резПровКоманды = 0;
	Если УровеньОтладки >= 3 тогда
    	COMДрайверККТ10.setParam(COMДрайверККТ10.LIBFPTR_PARAM_JSON_DATA, JSONЗадание);
    	резПровКоманды = COMДрайверККТ10.validateJson();
	конецЕсли;  
	Если резПровКоманды <> 0 тогда                                          
		ЛокОписаниеОшибки = COMДрайверККТ10.errorDescription();
		Если Найти(ЛокОписаниеОшибки, "validateTask") > 0 тогда
			резПровКоманды = 0;
			//флТестовыйРежим = ЛОЖЬ;
		конецЕсли;
	конецЕсли;
	Если резПровКоманды <> 0 тогда
		кодОшибки = COMДрайверККТ10.errorCode();
		описаниеОшибки = COMДрайверККТ10.errorDescription();          		
		Если УровеньОтладки >=2 тогда
			Сообщить(описаниеОшибки);
		конецЕсли;
		ЗалогироватьОпреацию(0, "проверить корректность JSON в ВыполнитьЗаданиеJSON", УровеньОтладки, False, КодОшибки, описаниеОшибки);
		рез = ЛОЖЬ;                                               
	конецЕсли;		                                                  	
	
	Если резПровКоманды = 0 тогда    
		резВыпКоманды = 0;
		Если Не ФлТестовыйРежим тогда
    		COMДрайверККТ10.setParam(COMДрайверККТ10.LIBFPTR_PARAM_JSON_DATA, JSONЗадание);
    		резВыпКоманды = COMДрайверККТ10.processJson();
		конецЕсли;
		Если резВыпКоманды <> 0 тогда
			кодОшибки = COMДрайверККТ10.errorCode();
			описаниеОшибки = COMДрайверККТ10.errorDescription();          		
			Если УровеньОтладки >=2 тогда
				Сообщить(описаниеОшибки);
			конецЕсли;
			ЗалогироватьОпреацию(0, "ВыполнитьЗаданиеJSON", УровеньОтладки, False, КодОшибки, описаниеОшибки);					
			рез = ЛОЖЬ;                                               
		иначе                        
			Если Не ФлТестовыйРежим тогда
				ОтветJSON = COMДрайверККТ10.getParamString(COMДрайверККТ10.LIBFPTR_PARAM_JSON_DATA);
			иначе
				ОтветJSON = ПолучитьМокОтветНаJSONКомманду(JSONЗадание);
			конецЕсли;
		конецЕсли;		                                                  
	конецЕсли;
	
	Если НЕ НеЗакрыватьСоединениеСККТ тогда
		ОписаниеОшибкиОтключения = "";
		КодОшибкиОтключения = 0;
		резОтключ = Отключиться(COMДрайверККТ10, УровеньОтладки, ФлТестовыйРежим, ОписаниеОшибкиОтключения, КодОшибкиОтключения);
		Если НЕ резОтключ тогда
			стрОшибки = ОписаниеОшибкиОтключения;
			Если УровеньОтладки >=2 тогда
				Сообщить(стрОшибки);
			конецЕсли;
			ЗалогироватьОпреацию(0, "Отключение от ККТ в ВыполнитьЗаданиеJSON", УровеньОтладки, False, КодОшибкиОтключения, стрОшибки);
		конецЕсли;        
	конецЕсли;
	Если УровеньОтладки >= 3 тогда
		Сообщить("конец: ВыполнитьЗаданиеJSON");	
	конецЕсли;						
	возврат рез;
конецФункции //ВыполнитьЗаданиеJSON

функция ПолучитьСтатусПровекркиМаркиЧерезДрайвер(COMДрайверККТ10, НастройкаиСвязиСКТТ, ОтветJSON, описаниеОшибки = "", КодОшибки = 0) экспорт	
	УровеньОтладки = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "УровеньОтладки");
	ФлТестовыйРежим = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "ФлТестовыйРежим");	
	
	рез = ЛОЖЬ;
	Если уровеньОтладки >= 3 тогда
		Сообщить("начало: ПолучитьСтатусПровекркиМаркиЧерезДрайвер");	
	конецЕсли;			                                                  
	ОтветJSON = "";
	резПодкл = Подключиться(COMДрайверККТ10, НастройкаиСвязиСКТТ, описаниеОшибки, КодОшибки);
	Если НЕ резПодкл тогда
		стрОшибки = описаниеОшибки;
		Если уровеньОтладки >=2 тогда
			Сообщить(стрОшибки);
		конецЕсли;
		ЗалогироватьОпреацию(0, "Подключение ККТ в ПолучитьСтатусПровекркиМаркиЧерезДрайвер", УровеньОтладки, False, КодОшибки, стрОшибки);
		Если уровеньОтладки >= 3 тогда
			Сообщить("конец: ПолучитьСтатусПровекркиМаркиЧерезДрайвер");	
		конецЕсли;					
		Возврат рез;
	конецЕсли;	                     
	Если Не флТестовыйРежим тогда
		COMДрайверККТ10.getMarkingCodeValidationStatus();
		if COMДрайверККТ10.getParamBool(COMДрайверККТ10.LIBFPTR_PARAM_MARKING_CODE_VALIDATION_READY) <> 0 
		then
			рез = ИСТИНА;                                                                            
		endif;                                                                                       
	иначе
		рез = ИСТИНА;
	конецЕсли;
	
	json = Новый ЗаписьJSON;                   
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб);
	json.УстановитьСтроку(ПараметрыЗаписиJSON);
	json.ЗаписатьНачалоОбъекта();
		json.ЗаписатьИмяСвойства("ready");
		json.ЗаписатьЗначение(рез);
	json.ЗаписатьКонецОбъекта();
	ОтветJSON = json.Закрыть();	
	
	ОписаниеОшибкиОтключения = "";
	КодОшибкиОтключения = 0;
	резОтключ = Отключиться(COMДрайверККТ10, УровеньОтладки, ФлТестовыйРежим, ОписаниеОшибкиОтключения, КодОшибкиОтключения);
	Если НЕ резОтключ тогда
		стрОшибки = ОписаниеОшибкиОтключения;
		Если уровеньОтладки >=2 тогда
			Сообщить(стрОшибки);
		конецЕсли;
		ЗалогироватьОпреацию(0, "Отключение от ККТ в ПолучитьСтатусПровекркиМаркиЧерезДрайвер", УровеньОтладки, False, КодОшибкиОтключения, стрОшибки);
	конецЕсли;        	
	Если УровеньОтладки >= 3 тогда
		Сообщить("конец: ПолучитьСтатусПровекркиМаркиЧерезДрайвер");	
	конецЕсли;						
	Возврат рез;
конецФункции //ПолучитьСтатусПровекркиМаркиЧерезДрайвер

функция ПолучитьРезультатПроверкиКодаМаркировкиЧерезДрайвер(COMДрайверККТ10, НастройкаиСвязиСКТТ, ОтветJSON, описаниеОшибки = "", КодОшибки = 0) экспорт
	УровеньОтладки = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "УровеньОтладки");
	ФлТестовыйРежим = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "ФлТестовыйРежим");	
	
	рез = ЛОЖЬ;
	Если уровеньОтладки >= 3 тогда
		Сообщить("начало: ПолучитьРезультатПроверкиКодаМаркировкиЧерезДрайвер");	
	конецЕсли;			                                                     
	ОтветJSON = "";
	резПодкл = Подключиться(COMДрайверККТ10, НастройкаиСвязиСКТТ, описаниеОшибки, КодОшибки);
	Если НЕ резПодкл тогда
		стрОшибки = описаниеОшибки;
		Если УровеньОтладки >=2 тогда
			Сообщить(стрОшибки);
		конецЕсли;
		ЗалогироватьОпреацию(0, "Подключение ККТ в ПолучитьРезультатПроверкиКодаМаркировкиЧерезДрайвер", уровеньОтладки, False, КодОшибки, стрОшибки);
		рез = ЛОЖЬ;
		Если уровеньОтладки >= 3 тогда
			Сообщить("конец: ПолучитьРезультатПроверкиКодаМаркировкиЧерезДрайвер");	
		конецЕсли;					
		Возврат рез;
	конецЕсли;
	рез = Истина;
	Если Не ФлТестовыйРежим тогда                                                                           	
		ValidationResult=COMДрайверККТ10.getParamInt(COMДрайверККТ10.LIBFPTR_PARAM_MARKING_CODE_ONLINE_VALIDATION_RESULT);
	иначе               
		ValidationResult = 15; //всё OK
	конецЕсли;                       
	
	imcCheckFlag = false; imcCheckResult = false;  imcStatusInfo = false; imcEstimatedStatusCorrect = false;
	Если ValidationResult = 15 тогда                                                                       
		imcCheckFlag = true; imcCheckResult = true; imcStatusInfo = true; imcEstimatedStatusCorrect = true;
	иначеЕсли ValidationResult = 7 тогда                                                                   
		imcCheckFlag = true; imcCheckResult = true; imcStatusInfo = true; imcEstimatedStatusCorrect = false;
	иначеЕсли ValidationResult = 3 тогда                                                                   
		imcCheckFlag = true; imcCheckResult = true; imcStatusInfo = false; imcEstimatedStatusCorrect = false;
	иначеЕсли ValidationResult = 1 тогда                                                                   
		imcCheckFlag = true; imcCheckResult = false; imcStatusInfo = false; imcEstimatedStatusCorrect = false;
	иначеЕсли ValidationResult = 0 тогда                                                                   
		imcCheckFlag = false; imcCheckResult = false; imcStatusInfo = false; imcEstimatedStatusCorrect = false;
	иначеЕсли ValidationResult = 5 тогда                                                                   
		imcCheckFlag = true; imcCheckResult = false; imcStatusInfo = true; imcEstimatedStatusCorrect = false;
	иначеЕсли ValidationResult = 2 тогда                                                                   
		imcCheckFlag = false; imcCheckResult = true; imcStatusInfo = false; imcEstimatedStatusCorrect = false;
	иначеЕсли ValidationResult = 4 тогда                                                                   
		imcCheckFlag = false; imcCheckResult = false; imcStatusInfo = true; imcEstimatedStatusCorrect = false;
	иначеЕсли ValidationResult = 6 тогда                                                                   
		imcCheckFlag = false; imcCheckResult = true; imcStatusInfo = true; imcEstimatedStatusCorrect = false;
	иначеЕсли ValidationResult = 8 тогда                                                                   
		imcCheckFlag = false; imcCheckResult = false; imcStatusInfo = false; imcEstimatedStatusCorrect = true;
	иначеЕсли ValidationResult = 9 тогда                                                                   
		imcCheckFlag = true; imcCheckResult = false; imcStatusInfo = false; imcEstimatedStatusCorrect = true;
	иначеЕсли ValidationResult = 10 тогда                                                                   
		imcCheckFlag = false; imcCheckResult = true; imcStatusInfo = false; imcEstimatedStatusCorrect = true;
	иначеЕсли ValidationResult = 11 тогда                                                                   
		imcCheckFlag = true; imcCheckResult = true; imcStatusInfo = false; imcEstimatedStatusCorrect = true;
	иначеЕсли ValidationResult = 12 тогда                                                                   
		imcCheckFlag = false; imcCheckResult = false; imcStatusInfo = true; imcEstimatedStatusCorrect = true;
	иначеЕсли ValidationResult = 13 тогда                                                                   
		imcCheckFlag = true; imcCheckResult = false; imcStatusInfo = true; imcEstimatedStatusCorrect = true;
	иначеЕсли ValidationResult = 14 тогда                                                                   
		imcCheckFlag = false; imcCheckResult = true; imcStatusInfo = true; imcEstimatedStatusCorrect = true;		
	конецЕсли;

	json = Новый ЗаписьJSON;                   
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб);
	json.УстановитьСтроку(ПараметрыЗаписиJSON);
	json.ЗаписатьНачалоОбъекта();
		json.ЗаписатьИмяСвойства("itemInfoCheckResult");
		json.ЗаписатьНачалоОбъекта();
			json.ЗаписатьИмяСвойства("ecrStandAloneFlag");
			json.ЗаписатьЗначение(false);
			json.ЗаписатьИмяСвойства("imcCheckFlag");
			json.ЗаписатьЗначение(imcCheckFlag);						
			json.ЗаписатьИмяСвойства("imcCheckResult");
			json.ЗаписатьЗначение(imcCheckResult);						
			json.ЗаписатьИмяСвойства("imcEstimatedStatusCorrect");
			json.ЗаписатьЗначение(imcEstimatedStatusCorrect);						
			json.ЗаписатьИмяСвойства("imcStatusInfo");
			json.ЗаписатьЗначение(imcStatusInfo);									
		json.ЗаписатьКонецОбъекта();
	json.ЗаписатьКонецОбъекта();
	ОтветJSON = json.Закрыть();
	
	ОписаниеОшибкиОтключения = "";
	КодОшибкиОтключения = 0;
	резОтключ = Отключиться(COMДрайверККТ10, УровеньОтладки, ФлТестовыйРежим, ОписаниеОшибкиОтключения, КодОшибкиОтключения);
	Если НЕ резОтключ тогда
		стрОшибки = ОписаниеОшибкиОтключения;
		Если УровеньОтладки >=2 тогда
			Сообщить(стрОшибки);
		конецЕсли;
		ЗалогироватьОпреацию(0, "Отключение от ККТ в ПолучитьРезультатПроверкиКодаМаркировкиЧерезДрайвер", УровеньОтладки, False, КодОшибкиОтключения, стрОшибки);
	конецЕсли;        	
	Возврат рез;
конецФункции //ПолучитьРезультатПроверкиКодаМаркировкиЧерезДрайвер

функция СформироватьJSONПроверкиМакри(марка, ЭтоЧекВозврата = ЛОЖЬ, уровеньОтладки) экспорт
	Если уровеньОтладки >= 3 тогда
		Сообщить("начало: СформироватьJSONПроверкиМакри");	
	конецЕсли;		

	планируемыСтатусМарки = "itemPieceSold";
	если ЭтоЧекВозврата тогда
		планируемыСтатусМарки = "itemPieceReturn";
	конецЕсли;                                  
		
	json = Новый ЗаписьJSON;                   
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб);
	json.УстановитьСтроку(ПараметрыЗаписиJSON);
	json.ЗаписатьНачалоОбъекта();
	json.ЗаписатьИмяСвойства("type");
	json.ЗаписатьЗначение("beginMarkingCodeValidation");
	json.ЗаписатьИмяСвойства("params");
	json.ЗаписатьНачалоОбъекта();
	json.ЗаписатьИмяСвойства("imcType");
	json.ЗаписатьЗначение("auto");
	json.ЗаписатьИмяСвойства("imc");
	json.ЗаписатьЗначение(марка);	
	json.ЗаписатьИмяСвойства("itemEstimatedStatus");
	json.ЗаписатьЗначение(планируемыСтатусМарки);	
	//json.ЗаписатьИмяСвойства("itemQuantity");
	//json.ЗаписатьЗначение(1);	
	//json.ЗаписатьИмяСвойства("itemUnits");
	//json.ЗаписатьЗначение("piece"); //штуки	
	json.ЗаписатьИмяСвойства("imcModeProcessing");
	json.ЗаписатьЗначение(0);	
	json.ЗаписатьКонецОбъекта();
	json.ЗаписатьКонецОбъекта();
	Если уровеньОтладки >= 3 тогда
		Сообщить("конец: СформироватьJSONПроверкиМакри");	
	конецЕсли;			
	возврат json.Закрыть();
конецФункции //СформироватьJSONПроверкиМакри

функция СформироватьJSONПолученияСтатусаПроверкиМарки(уровеньОтладки = 1) экспорт
	Если уровеньОтладки >= 3 тогда
		Сообщить("начало: СформироватьJSONПолученияСтатусаПроверкиМарки");	
	конецЕсли;		

	json = Новый ЗаписьJSON;                   
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб);
	json.УстановитьСтроку(ПараметрыЗаписиJSON);
	json.ЗаписатьНачалоОбъекта();	
	json.ЗаписатьИмяСвойства("type");
	json.ЗаписатьЗначение("getMarkingCodeValidationStatus");	
	json.ЗаписатьКонецОбъекта();
	Если уровеньОтладки >= 3 тогда
		Сообщить("конец: СформироватьJSONПолученияСтатусаПроверкиМарки");	
	конецЕсли;			
	возврат json.Закрыть();	
конецФункции //СформироватьJSONПолученияСтатусаПроверкиМарки

функция СформироватьJSONПрерватьПроверкуМарки(уровеньОтладки = 1) экспорт
	Если уровеньОтладки >= 3 тогда
		Сообщить("начало: СформироватьJSONПрерватьПроверкуМарки");	
	конецЕсли;		

	json = Новый ЗаписьJSON;                   
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб);
	json.УстановитьСтроку(ПараметрыЗаписиJSON);
	json.ЗаписатьНачалоОбъекта();	
	json.ЗаписатьИмяСвойства("type");
	json.ЗаписатьЗначение("cancelMarkingCodeValidation");	
	json.ЗаписатьКонецОбъекта();                            
	Если уровеньОтладки >= 3 тогда
		Сообщить("конец: СформироватьJSONПрерватьПроверкуМарки");	
	конецЕсли;			
	возврат json.Закрыть();			
конецФункции //СформироватьJSONПрерватьПроверкуМарки

функция СформироватьJSONПринятияИлиОтказаМарки(Приянть = ИСТИНА, уровеньОтладки = 1) экспорт
	Если уровеньОтладки >= 3 тогда
		Сообщить("начало: СформироватьJSONПринятияИлиОтказаМарки");	
	конецЕсли;		
	
	acceptOrRejectMark = "acceptMarkingCode";
	если НЕ Приянть тогда
		acceptOrRejectMark = "declineMarkingCode";
	конецЕсли;
	
	json = Новый ЗаписьJSON;                   
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб);
	json.УстановитьСтроку(ПараметрыЗаписиJSON);
	json.ЗаписатьНачалоОбъекта();	
	json.ЗаписатьИмяСвойства("type");
	json.ЗаписатьЗначение(acceptOrRejectMark);	
	json.ЗаписатьКонецОбъекта();
	Если уровеньОтладки >= 3 тогда
		Сообщить("конец: СформироватьJSONПринятияИлиОтказаМарки");	
	конецЕсли;			
	возврат json.Закрыть();		
конецФункции //СформироватьJSONПолученияСтатусаПроверкиМаврки

функция ПринятьМаркуНапрямуюЧерезДрайвер(COMДрайверККТ10 = Неопределено, НастройкаиСвязиСКТТ, описаниеОшибки = "", КодОшибки = 0) экспорт
	УровеньОтладки = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "УровеньОтладки");
	ФлТестовыйРежим = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "ФлТестовыйРежим");		
	
	Если УровеньОтладки >= 3 тогда
		Сообщить("начало: ПринятьМаркуНапрямуюЧерезДрайвер");	
	конецЕсли;			
	рез = ИСТИНА;
	резПодкл = Подключиться(COMДрайверККТ10, НастройкаиСвязиСКТТ, описаниеОшибки, КодОшибки);
	Если НЕ резПодкл тогда
		стрОшибки = описаниеОшибки;
		Если УровеньОтладки >=2 тогда
			Сообщить(стрОшибки);
		конецЕсли;
		ЗалогироватьОпреацию(0, "Подключение ККТ в ПринятьМаркуНапрямуюЧерезДрайвер", УровеньОтладки, False, КодОшибки, стрОшибки);
		рез = ЛОЖЬ;
		Если УровеньОтладки >= 3 тогда
			Сообщить("конец: ПринятьМаркуНапрямуюЧерезДрайвер");	
		конецЕсли;					
		Возврат рез;
	конецЕсли;	    
	
	резВыпКоманды = 0;
	Если Не ФлТестовыйРежим тогда                                                                           	
	   	резВыпКоманды = COMДрайверККТ10.acceptMarkingCode();
	конецЕсли;
	Если резВыпКоманды <> 0 тогда
		кодОшибки = COMДрайверККТ10.errorCode();
		описаниеОшибки = COMДрайверККТ10.errorDescription();          		
		Если уровеньОтладки >=2 тогда
			Сообщить(описаниеОшибки);
		конецЕсли;
		ЗалогироватьОпреацию(0, "ПринятьМаркуНапрямуюЧерезДрайвер", уровеньОтладки, False, КодОшибки, описаниеОшибки);					
		рез = ЛОЖЬ;                                               
	конецЕсли;		                                                  
	
	ОписаниеОшибкиОтключения = "";
	КодОшибкиОтключения = 0;
	резОтключ = Отключиться(COMДрайверККТ10, УровеньОтладки, ФлТестовыйРежим, ОписаниеОшибкиОтключения, КодОшибкиОтключения);
	Если НЕ резОтключ тогда
		стрОшибки = ОписаниеОшибкиОтключения;
		Если УровеньОтладки >=2 тогда
			Сообщить(стрОшибки);
		конецЕсли;
		ЗалогироватьОпреацию(0, "Отключение от ККТ в ПринятьМаркуНапрямуюЧерезДрайвер", УровеньОтладки, False, КодОшибкиОтключения, стрОшибки);
	конецЕсли;
	Если УровеньОтладки >= 3 тогда
		Сообщить("конец: ПринятьМаркуНапрямуюЧерезДрайвер");	
	конецЕсли;						
	возврат рез; 
конецФункции //ПринятьМаркуНапрямуюЧерезДрайвер

функция СформироватьJSONОчиститьТаблицуПроверокМаркок(уровеньОтладки = 1) экспорт
	Если уровеньОтладки >= 3 тогда
		Сообщить("начало: СформироватьJSONОчиститьТаблицуПроверокМаркок");	
	конецЕсли;		

	json = Новый ЗаписьJSON;                   
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб);
	json.УстановитьСтроку(ПараметрыЗаписиJSON);
	json.ЗаписатьНачалоОбъекта();	
	json.ЗаписатьИмяСвойства("type");
	json.ЗаписатьЗначение("clearMarkingCodeValidationResult");	
	json.ЗаписатьКонецОбъекта();
	Если уровеньОтладки >= 3 тогда
		Сообщить("конец: СформироватьJSONОчиститьТаблицуПроверокМаркок");	
	конецЕсли;			
	возврат json.Закрыть();		
конецФункции //СформироватьJSONОчиститьТаблицуПроверокМаркок

функция СформироватьJSONЧека(ОбщиеСвйостваЧека, массивТоваровов, уровеньОтладки = 1) экспорт
	Если уровеньОтладки >= 3 тогда
		Сообщить("начало: СформироватьJSONЧека");	
	конецЕсли;		
	
	кассир = СокрЛП(ОбщиеСвйостваЧека.Кассир);
	типЧека = "sell";
	планируемыСтатусМарки = "itemPieceSold";
	если ОбщиеСвйостваЧека.ЭтоЧекВозврата тогда
		типЧека = "sellReturn";             
		планируемыСтатусМарки = "itemPieceReturn";
	конецЕсли;                                  
	//taxation = ;
	
	json = Новый ЗаписьJSON;                   
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб);
	json.УстановитьСтроку(ПараметрыЗаписиJSON);
	json.ЗаписатьНачалоОбъекта();
	json.ЗаписатьИмяСвойства("type");
	json.ЗаписатьЗначение(типЧека);  
	json.ЗаписатьИмяСвойства("operator");
	json.ЗаписатьНачалоОбъекта();
		json.ЗаписатьИмяСвойства("name");
		json.ЗаписатьЗначение(кассир);  
	json.ЗаписатьКонецОбъекта();     
	json.ЗаписатьИмяСвойства("items");
	json.ЗаписатьНачалоМассива();   
	ОбщаяСуммаЧека = 0;
		для каждого позицияСтр из массивТоваровов цикл
			предметРасчета = "commodity";
			Если ВРег(позицияСтр.ПредметРасчета) = ВРег("платеж") тогда
				предметРасчета = "payment";
			конецЕсли;
			признакРасчета = "fullPayment";
			Если ВРег(позицияСтр.ПризнакРасчета) = ВРег("предоплата 100%") тогда
				признакРасчета = "fullPrepayment";
			иначеЕсли ВРег(позицияСтр.ПризнакРасчета) = ВРег("предоплата частичная") тогда
				признакРасчета = "prepayment";
			иначеЕсли Врег(позицияСтр.ПризнакРасчета) = Врег("аванс")  тогда
				признакРасчета = "advance";				
			иначеЕсли Врег(позицияСтр.ПризнакРасчета) = Врег("частичный расчет")  тогда
				признакРасчета = "partialPayment";							
			иначеЕсли Врег(позицияСтр.ПризнакРасчета) = Врег("рассрочка")  тогда
				признакРасчета = "credit";								
			иначеЕсли Врег(позицияСтр.ПризнакРасчета) = Врег("оплата рассрочки")  тогда
				признакРасчета = "creditPayment";												
			конецЕсли;		
			json.ЗаписатьНачалоОбъекта();
			json.ЗаписатьИмяСвойства("type");
			json.ЗаписатьЗначение("position");  
			json.ЗаписатьИмяСвойства("name");
			json.ЗаписатьЗначение(СокрЛП(позицияСтр.Товар));  			
			json.ЗаписатьИмяСвойства("price");
			json.ЗаписатьЗначение(позицияСтр.Цена);  									
			json.ЗаписатьИмяСвойства("quantity");
			json.ЗаписатьЗначение(позицияСтр.Количество);  						
			текущСуммаПозиции = позицияСтр.Цена*позицияСтр.Количество;
			ОбщаяСуммаЧека = ОбщаяСуммаЧека + текущСуммаПозиции;
			json.ЗаписатьИмяСвойства("amount");
			json.ЗаписатьЗначение(текущСуммаПозиции);  									
			json.ЗаписатьИмяСвойства("measurementUnit");
			json.ЗаписатьЗначение("0");  						
			json.ЗаписатьИмяСвойства("paymentMethod");
			json.ЗаписатьЗначение(признакРасчета); //fullPayment, fullPrepayment, prepayment, advance
			json.ЗаписатьИмяСвойства("paymentObject");
			json.ЗаписатьЗначение("commodity");  			
			json.ЗаписатьИмяСвойства("tax");
			json.ЗаписатьНачалоОбъекта();
				json.ЗаписатьИмяСвойства("type");
				json.ЗаписатьЗначение("none");  			
			json.ЗаписатьКонецОбъекта();      
			Если позицияСтр.Свойство("марка") тогда
				json.ЗаписатьИмяСвойства("imcParams");
				json.ЗаписатьНачалоОбъекта(); 
				json.ЗаписатьИмяСвойства("imcType");    
				json.ЗаписатьЗначение("auto");
				json.ЗаписатьИмяСвойства("imc");
				json.ЗаписатьЗначение(позицияСтр.марка);
				json.ЗаписатьИмяСвойства("itemEstimatedStatus");
				json.ЗаписатьЗначение(планируемыСтатусМарки);
				json.ЗаписатьИмяСвойства("imcModeProcessing");
				json.ЗаписатьЗначение(0);                     
				json.ЗаписатьИмяСвойства("itemInfoCheckResult");
				json.ЗаписатьНачалоОбъекта();
					json.ЗаписатьИмяСвойства("imcCheckFlag");
					если позицияСтр.Свойство("imcCheckFlag") тогда
						json.ЗаписатьЗначение(позицияСтр.imcCheckFlag);                     
					иначе                                                                   
						json.ЗаписатьЗначение(false);                     
					конецЕсли;
					json.ЗаписатьИмяСвойства("imcCheckResult");   
					если позицияСтр.Свойство("imcCheckResult") тогда
						json.ЗаписатьЗначение(позицияСтр.imcCheckResult);                     
					иначе                                                                     
						json.ЗаписатьЗначение(false);                     
					конецЕсли;
					json.ЗаписатьИмяСвойства("imcStatusInfo");      
					если позицияСтр.Свойство("imcStatusInfo") тогда
						json.ЗаписатьЗначение(позицияСтр.imcStatusInfo);                     
					иначе                                                                    
						json.ЗаписатьЗначение(false);                     
					конецЕсли;
					json.ЗаписатьИмяСвойства("imcEstimatedStatusCorrect");
					если позицияСтр.Свойство("imcEstimatedStatusCorrect") тогда
						json.ЗаписатьЗначение(позицияСтр.imcEstimatedStatusCorrect);                     
					иначе
						json.ЗаписатьЗначение(false);                     
					конецЕсли;
					json.ЗаписатьИмяСвойства("ecrStandAloneFlag");
					json.ЗаписатьЗначение(false);                     					
				json.ЗаписатьКонецОбъекта();
				json.ЗаписатьКонецОбъекта();      
			конецЕсли;
			json.ЗаписатьКонецОбъекта(); //позиции
		конецЦикла;
	json.ЗаписатьКонецМассива();
	json.ЗаписатьИмяСвойства("payments");
	json.ЗаписатьНачалоМассива();                        
	СуммаОплаты = 0;
	Если ОбщиеСвйостваЧека.Наличными > 0 тогда
		json.ЗаписатьНачалоОбъекта();
		json.ЗаписатьИмяСвойства("type");
		json.ЗаписатьЗначение("cash");
		json.ЗаписатьИмяСвойства("sum");
		json.ЗаписатьЗначение(ОбщиеСвйостваЧека.Наличными);		
		json.ЗаписатьКонецОбъекта();
		СуммаОплаты = СуммаОплаты + ОбщиеСвйостваЧека.Наличными;
	конецЕсли;
	Если ОбщиеСвйостваЧека.Безналичными > 0 тогда
		json.ЗаписатьНачалоОбъекта();
		json.ЗаписатьИмяСвойства("type");
		json.ЗаписатьЗначение("electronically");
		json.ЗаписатьИмяСвойства("sum");
		json.ЗаписатьЗначение(ОбщиеСвйостваЧека.Безналичными);		
		json.ЗаписатьКонецОбъекта();
		СуммаОплаты = СуммаОплаты + ОбщиеСвйостваЧека.Безналичными;
	конецЕсли;
	Если ОбщиеСвйостваЧека.ЗачетАванса > 0 тогда
		json.ЗаписатьНачалоОбъекта();
		json.ЗаписатьИмяСвойства("type");
		json.ЗаписатьЗначение("prepaid");
		json.ЗаписатьИмяСвойства("sum");
		json.ЗаписатьЗначение(ОбщиеСвйостваЧека.ЗачетАванса);		
		json.ЗаписатьКонецОбъекта();
		СуммаОплаты = СуммаОплаты + ОбщиеСвйостваЧека.ЗачетАванса;
	конецЕсли;	
	Если ОбщиеСвйостваЧека.Кредит > 0 тогда
		json.ЗаписатьНачалоОбъекта();
		json.ЗаписатьИмяСвойства("type");
		json.ЗаписатьЗначение("credit");
		json.ЗаписатьИмяСвойства("sum");
		json.ЗаписатьЗначение(ОбщиеСвйостваЧека.Кредит);		
		json.ЗаписатьКонецОбъекта();
		СуммаОплаты = СуммаОплаты + ОбщиеСвйостваЧека.Кредит;
	конецЕсли;		
	json.ЗаписатьКонецМассива();
	json.ЗаписатьКонецОбъекта();		
	Если уровеньОтладки >= 3 тогда
		Сообщить("конец: СформироватьJSONЧека");	
	конецЕсли;			
	возврат json.Закрыть();
конецФункции //СформироватьJSONЧека

функция ПолучитьСтруктуруИЗJSON(JSONСтрока) экспорт
	стрЧек = Новый Структура;
	Если СокрЛП(JSONСтрока) = "" тогда
		Возврат стрЧек;
	конецЕсли;
	текСтрМасс = стрЧек;
	ЧтениеJSON = Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(JSONСтрока);
	текИмяСвойства = "";	
	Пока ЧтениеJSON.Прочитать() цикл
		ТипJSON = ЧтениеJSON.ТипТекущегоЗначения;       
		Если ТипJSON=ТипЗначенияJSON.ИмяСвойства тогда
			текИмяСвойства = ЧтениеJSON.ТекущееЗначение;
			Продолжить;
		конецЕсли;	                                  
		Если ТипJSON = ТипЗначенияJSON.Комментарий или ТипJSON=ТипЗначенияJSON.Ничего 
		тогда
			Продолжить;
		конецЕсли;  
		Если текИмяСвойства = "" тогда
			Продолжить;
		конецЕсли;			
		Если ТипJSON = ТипЗначенияJSON.НачалоМассива тогда
			локСтр = "";
			Если ТипЗнч(текСтрМасс) = Тип("Массив") тогда
				текСтрМасс.Добавить(Новый Массив);
				локСтр = текСтрМасс[текСтрМасс.Количество()-1];
			иначе
				Если текИмяСвойства = "" тогда
					текИмяСвойства = "Начало";
				конецЕсли;
				текСтрМасс.Вставить(текИмяСвойства, Новый Массив);
				локСтр = "";                                    
				текСтрМасс.Свойство(текИмяСвойства, локСтр);
			конецЕсли;			
			локСтр.Добавить(текСтрМасс);
			текСтрМасс = локСтр;										
			Продолжить;
		конецЕсли;
		Если ТипJSON = ТипЗначенияJSON.КонецМассива тогда
			текСтрМасс = текСтрМасс[0];
			Продолжить;
		конецЕсли;		
		Если ТипJSON=ТипЗначенияJSON.НачалоОбъекта тогда
			локСтр = "";
			Если ТипЗнч(текСтрМасс) = Тип("Массив") тогда
				текСтрМасс.Добавить(Новый Структура);
				локСтр = текСтрМасс[текСтрМасс.Количество()-1];
			иначе
				текСтрМасс.Вставить(текИмяСвойства, Новый Структура);
				локСтр = "";                                    
				текСтрМасс.Свойство(текИмяСвойства, локСтр);
			конецЕсли;			
			локСтр.Вставить("Родитель", текСтрМасс);
			текСтрМасс = локСтр;							
			Продолжить;
		конецЕсли;
		Если ТипJSON=ТипЗначенияJSON.КонецОбъекта тогда
			Если текСтрМасс.Свойство("Родитель") тогда
				текСтрМасс = текСтрМасс.Родитель;
			конецЕсли;
			Продолжить;
		конецЕсли;                                       
		Если ТипЗнч(текСтрМасс) = Тип("Массив") тогда
			текСтрМасс.Добавить(ЧтениеJSON.ТекущееЗначение);
		иначе
			текСтрМасс.Вставить(текИмяСвойства, ЧтениеJSON.ТекущееЗначение);
		конецЕсли;
	конецЦикла; 	                       
	Возврат стрЧек;	
конецФункции //ПолучитьСтруктуруИЗJSON

функция ПолучитьHTMLЧека(чекСтруктураИзJSON) экспорт
	HTMLЧека = "<html><head>
 		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">
		|<link rel=""stylesheet"" type=""text/css"" href=""__STYLE__"">
		|<base href=""v8config://3cf8a157-8bc7-46fd-8b86-32b5007a5065/mdobject/id839e2a71-ec25-46a9-aa7e-0867d4e09809/8eb4fad1-1fa6-403e-970f-2c12dbb43e23"">
		|</head>  
		|<style> table {border: 1px solid grey;} 
		|th {outine: 1px solid gray;}
		|td {border: 1px solid gray;} 
		|tr.pos {outline: auto;}
		|.pos td {border-top: thin solid black;}
		|.pos td {border-bottom: 0 solid black;}
		|.posdop td {border-top: 0 solid black;}
		|.posdop td {border-bottom: 0 solid black;}
		|.posmark td {border-top: 0 solid black;}
		|.posdop td {font-size: 10px;}
		|.posmark td {font-size: 8px;}
		|</style>
		|<body>";                                                                           
	HTMLЧека = HTMLЧека + "<p>" + ПолучитьПереводТипаЧека(СокрЛП(чекСтруктураИзJSON.type)) + "</p>";
	HTMLЧека = HTMLЧека + "<p>" + "Кассир: " + СокрЛП(чекСтруктураИзJSON.operator.name) + "</p>"; 
	HTMLЧека = HTMLЧека + "
		|<table><tr><th>Товар</th><th>Количество</th><th>Цена</th><th>Сумма</th></tr>";
	текНомПоз = 0;
	Для Каждого поз из чекСтруктураИзJSON.items цикл
		Если текНомПоз = 0 тогда  
			текНомПоз = текНомПоз + 1;
			Продолжить;
		конецЕсли;
		HTMLЧека = HTMLЧека + "<tr class=""pos"">";
		HTMLЧека = HTMLЧека + "<td>" + поз.name + "</td>";
		HTMLЧека = HTMLЧека + "<td>" + поз.quantity + "</td>";
		HTMLЧека = HTMLЧека + "<td>" + поз.price + "</td>";
		HTMLЧека = HTMLЧека + "<td>" + поз.amount + "</td>";
		HTMLЧека = HTMLЧека + "</tr>";                    
		HTMLЧека = HTMLЧека + "<tr class=""posdop"">";                            
		//стрДопИнформ = ПолучитьПереводНДС(поз.tax.type) + " " + ПолучитьПереводСпособаРасчета(поз.paymentMethod) + " " + ПолучитьБуквуМИзРезультатаПроверки(поз.imcParams.itemInfoCheckResult);
		стрДопИнформ = ПолучитьПереводНДС(поз.tax.type) + " " + ПолучитьПереводСпособаРасчета(поз.paymentMethod);
		Если поз.Свойство("imcParams") тогда
			Если поз.imcParams.Свойство("itemInfoCheckResult") тогда
				стрДопИнформ = стрДопИнформ + " " + ПолучитьБуквуМИзРезультатаПроверки(поз.imcParams.itemInfoCheckResult);
			иначе
				стрДопИнформ = стрДопИнформ + " " + "[M?]";
			конецЕсли;
		конецЕсли;
		HTMLЧека = HTMLЧека + "<td colspan=""4"">" + стрДопИнформ + "</td>";
		//HTMLЧека = HTMLЧека + "<td>" + поз.paymentMethod + "</td>";
		//HTMLЧека = HTMLЧека + "<td>" + "[M+]" + "</td>";		
		//HTMLЧека = HTMLЧека + "</tr>";                          
		Если поз.Свойство("imcParams") тогда
			Если поз.imcParams.Свойство("imc") тогда		
				HTMLЧека = HTMLЧека + "<tr class=""posmark"">"; 
				HTMLЧека = HTMLЧека + "<td colspan=""4"">" + поз.imcParams.imc + "</td>";
				HTMLЧека = HTMLЧека + "</tr>";
			конецЕсли;
		конецЕсли;
		текНомПоз = текНомПоз + 1;
	конецЦикла;                                         
	HTMLЧека = HTMLЧека + "</table>";
	текНомПоз = 0;
	для Каждого оплата из чекСтруктураИзJSON.payments цикл
		Если текНомПоз = 0 тогда  
			текНомПоз = текНомПоз + 1;
			Продолжить;
		конецЕсли;		
		строкаОплаты = ВРЕГ(ПеревестиТипОплаты(оплата.type)) + ": " + СокрЛП(оплата.sum);
		HTMLЧека = HTMLЧека + "<p>" + строкаОплаты + "</p>";	
		текНомПоз = текНомПоз + 1;
	конецЦикла;	
	HTMLЧека  = HTMLЧека + "
		|</body></html>";	
	Возврат HTMLЧека;
конецФункции //ПолучитьHTMLЧека

функция СформироватьJSONОтменыЧека(уровеньОтладки = 1) экспорт
	Если уровеньОтладки >= 3 тогда
		Сообщить("начало: СформироватьJSONОтменыЧека");	
	конецЕсли;				
	Если уровеньОтладки >= 3 тогда
		Сообщить("конец: СформироватьJSONОтменыЧека");	
	конецЕсли;					
	возврат "нет json для отмены чека";
конецФункции //СформироватьJSONОтменыЧека\

функция ОтменитьЧек(COMДрайверККТ10 = Неопределено, НастройкаиСвязиСКТТ, описаниеОшибки = "", КодОшибки = 0) экспорт
	УровеньОтладки = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "УровеньОтладки");
	ФлТестовыйРежим = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "ФлТестовыйРежим");		
	
	Если УровеньОтладки >= 3 тогда
		Сообщить("начало: ОтменитьЧек");	
	конецЕсли;			
	рез = ИСТИНА;
	ОтветJSON = "";
	резПодкл = Подключиться(COMДрайверККТ10, НастройкаиСвязиСКТТ, описаниеОшибки, КодОшибки);
	Если НЕ резПодкл тогда
		стрОшибки = описаниеОшибки;
		Если УровеньОтладки >=2 тогда
			Сообщить(стрОшибки);
		конецЕсли;
		ЗалогироватьОпреацию(0, "Подключение ККТ в ОтменитьЧек", УровеньОтладки, False, КодОшибки, стрОшибки);
		рез = ЛОЖЬ;
		Если УровеньОтладки >= 3 тогда
			Сообщить("конец: ОтменитьЧек");	
		конецЕсли;					
		Возврат рез;
	конецЕсли;	    
	
	резВыпКоманды = 0;
	Если НЕ флТестовыйРежим тогда
   		резВыпКоманды = COMДрайверККТ10.cancelReceipt();
	конецЕсли;
	Если резВыпКоманды <> 0 тогда
		кодОшибки = COMДрайверККТ10.errorCode();
		описаниеОшибки = COMДрайверККТ10.errorDescription();          		
		Если УровеньОтладки >=2 тогда
			Сообщить(описаниеОшибки);
		конецЕсли;
		ЗалогироватьОпреацию(0, "ОтменитьЧек", уровеньОтладки, False, КодОшибки, описаниеОшибки);					
		рез = ЛОЖЬ;                                               
	конецЕсли;		                                                  
	
	ОписаниеОшибкиОтключения = "";
	КодОшибкиОтключения = 0;
	резОтключ = Отключиться(COMДрайверККТ10, УровеньОтладки, флТестовыйРежим, ОписаниеОшибкиОтключения, КодОшибкиОтключения);
	Если НЕ резОтключ тогда
		стрОшибки = ОписаниеОшибкиОтключения;
		Если уровеньОтладки >=2 тогда
			Сообщить(стрОшибки);
		конецЕсли;
		ЗалогироватьОпреацию(0, "Отключение от ККТ в ОтменитьЧек", уровеньОтладки, False, КодОшибкиОтключения, стрОшибки);
	конецЕсли;
	Если уровеньОтладки >= 3 тогда
		Сообщить("конец: ОтменитьЧек");	
	конецЕсли;						
	возврат рез; 
конецФункции //ОтменитьЧек

функция СформироватьJSONДопечататьЧек(уровеньОтладки = 1) экспорт
	Если уровеньОтладки >= 3 тогда
		Сообщить("начало: СформироватьJSONДопечататьЧек");	
	конецЕсли;			
	json = Новый ЗаписьJSON;                   
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб);
	json.УстановитьСтроку(ПараметрыЗаписиJSON);
	json.ЗаписатьНачалоОбъекта();	
	json.ЗаписатьИмяСвойства("type");
	json.ЗаписатьЗначение("continuePrint");	
	json.ЗаписатьКонецОбъекта();
	Если уровеньОтладки >= 3 тогда
		Сообщить("конец: СформироватьJSONДопечататьЧек");	
	конецЕсли;				
	возврат json.Закрыть();
конецФункции //СформироватьJSONДопечататьЧек

функция СформироватьJSONОткрытияСмены(кассир, уровеньОтладки = 1) экспорт
	Если уровеньОтладки >= 3 тогда
		Сообщить("начало: СформироватьJSONОткрытияСмены");	
	конецЕсли;			
	json = Новый ЗаписьJSON;                   
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб);
	json.УстановитьСтроку(ПараметрыЗаписиJSON);
	json.ЗаписатьНачалоОбъекта();	
	json.ЗаписатьИмяСвойства("type");
	json.ЗаписатьЗначение("openShift");	
	json.ЗаписатьИмяСвойства("operator");
	json.ЗаписатьНачалоОбъекта();
	json.ЗаписатьИмяСвойства("name");
	json.ЗаписатьЗначение(кассир);
	json.ЗаписатьКонецОбъекта();
	json.ЗаписатьКонецОбъекта();
	Если уровеньОтладки >= 3 тогда
		Сообщить("конец: СформироватьJSONОткрытияСмены");	
	конецЕсли;			
	возврат json.Закрыть();			
конецФункции //СформироватьJSONЗакрытияСмены

функция СформироватьJSONЗакрытияСмены(кассир, уровеньОтладки = 1) экспорт
	Если уровеньОтладки >= 3 тогда
		Сообщить("начало: СформироватьJSONЗакрытияСмены");	
	конецЕсли;			
	json = Новый ЗаписьJSON;                   
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб);
	json.УстановитьСтроку(ПараметрыЗаписиJSON);
	json.ЗаписатьНачалоОбъекта();	
	json.ЗаписатьИмяСвойства("type");
	json.ЗаписатьЗначение("closeShift");	
	json.ЗаписатьИмяСвойства("operator");
	json.ЗаписатьНачалоОбъекта();
	json.ЗаписатьИмяСвойства("name");
	json.ЗаписатьЗначение(кассир);
	json.ЗаписатьКонецОбъекта();
	json.ЗаписатьКонецОбъекта();
	Если уровеньОтладки >= 3 тогда
		Сообщить("конец: СформироватьJSONЗакрытияСмены");	
	конецЕсли;				
	возврат json.Закрыть();			
конецФункции //СформироватьJSONЗакрытияСмены

функция СформироватьJSONXОтчета(кассир, уровеньОтладки = 1) экспорт
	Если уровеньОтладки >= 3 тогда
		Сообщить("начало: СформироватьJSONXОтчета");	
	конецЕсли;			
	json = Новый ЗаписьJSON;                   
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб);
	json.УстановитьСтроку(ПараметрыЗаписиJSON);
	json.ЗаписатьНачалоОбъекта();	
	json.ЗаписатьИмяСвойства("type");
	json.ЗаписатьЗначение("reportX");	
	json.ЗаписатьИмяСвойства("operator");
	json.ЗаписатьНачалоОбъекта();
	json.ЗаписатьИмяСвойства("name");
	json.ЗаписатьЗначение(кассир);
	json.ЗаписатьКонецОбъекта();
	json.ЗаписатьКонецОбъекта();
	Если уровеньОтладки >= 3 тогда
		Сообщить("конец: СформироватьJSONXОтчета");	
	конецЕсли;				
	возврат json.Закрыть();		
конецФункции //СформироватьJSONXОтчета

функция СформироватьJSONПолученияСтатусККТ(уровеньОтладки = 1) экспорт
	Если уровеньОтладки >= 3 тогда
		Сообщить("начало: СформироватьJSONПолученияСтатусККТ");	
	конецЕсли;			
	json = Новый ЗаписьJSON;                   
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб);
	json.УстановитьСтроку(ПараметрыЗаписиJSON);
	json.ЗаписатьНачалоОбъекта();	
	json.ЗаписатьИмяСвойства("type");
	json.ЗаписатьЗначение("getDeviceStatus");	
	json.ЗаписатьКонецОбъекта();
	Если уровеньОтладки >= 3 тогда
		Сообщить("конец: СформироватьJSONПолученияСтатусККТ");	
	конецЕсли;				
	возврат json.Закрыть();	
конецФункции //СформироватьJSONПолученияСтатусККТ

функция СформироватьJSONПолученияСтатусаСмены(уровеньОтладки = 1) экспорт
	Если уровеньОтладки >= 3 тогда
		Сообщить("начало: СформироватьJSONПолученияСтатусаСмены");	
	конецЕсли;			
	json = Новый ЗаписьJSON;                   
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб);
	json.УстановитьСтроку(ПараметрыЗаписиJSON);
	json.ЗаписатьНачалоОбъекта();	
	json.ЗаписатьИмяСвойства("type");
	json.ЗаписатьЗначение("getShiftStatus");	
	json.ЗаписатьКонецОбъекта();
	Если уровеньОтладки >= 3 тогда
		Сообщить("конец: СформироватьJSONПолученияСтатусаСмены");	
	конецЕсли;				
	возврат json.Закрыть();		
конецФункции //СформироватьJSONПолученияСтатусаСмены

функция ТестСвязиСККТ(COMДрайверККТ10 = Неопределено, НастройкаиСвязиСКТТ = Неопределено, описаниеОшибки = "", КодОшибки = 0) экспорт    
	УровеньОтладки = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "УровеньОтладки");
	ФлТестовыйРежим = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "ФлТестовыйРежим");	
	
	Если УровеньОтладки >= 3 тогда
		Сообщить("начало: ТестСвязиСККТ");	
	конецЕсли;		
	рез = ЛОЖЬ;
	описаниеОшибки = "";
	резТеста = Подключиться(COMДрайверККТ10, НастройкаиСвязиСКТТ, описаниеОшибки, КодОшибки); 
	Если НЕ резТеста тогда
		Сообщить(описаниеОшибки);
		ЗалогироватьОпреацию(0, "ТестСвязиСККТ", УровеньОтладки, False, КодОшибки, описаниеОшибки);
	иначе      
		рез = ИСТИНА;       
		ОписаниеОшибкиОтключения = "";
		КодОшибкиОтключения = 0;
		резОтключ = Отключиться(COMДрайверККТ10, УровеньОтладки, ФлТестовыйРежим, ОписаниеОшибкиОтключения, КодОшибкиОтключения);
		Если НЕ резОтключ тогда
			стрОшибки = ОписаниеОшибкиОтключения;
			Если уровеньОтладки >=2 тогда
				Сообщить(стрОшибки);
			конецЕсли;
			ЗалогироватьОпреацию(0, "Не получилось отключиться от ККТ из процедуры ТестСвязиСККТ", УровеньОтладки, False, КодОшибкиОтключения, стрОшибки);
		конецЕсли;
	конецЕсли; 
	Если УровеньОтладки >= 3 тогда
		Сообщить("конец: ТестСвязиСККТ");	
	конецЕсли;			
	Возврат рез;
конецФункции //ТестСвязиСККТ

функция Отключиться(COMДрайверККТ10 = Неопределено, уровеньОтладки = 1, флТестовыйРежим = FALSE, описаниеОшибки = "", КодОшибки = 0)
	рез = ИСТИНА;
	Если уровеньОтладки >= 3 тогда
		Сообщить("начало: Отключиться");
	конецЕсли;                     	
	резОтключения = 0;
	если НЕ флТестовыйРежим тогда
		резОтключения = COMДрайверККТ10.Close();
	конецЕсли;
	Если резОтключения <> 0 тогда
		КодОшибки = COMДрайверККТ10.errorCode();
		описаниеОшибки = COMДрайверККТ10.errorDescription();          
		ЗалогироватьОпреацию(0, "Отключение от ККТ", уровеньОтладки, False, кодОшибки, описаниеОшибки);
		рез = ЛОЖЬ;
	конецЕсли;		
	Если уровеньОтладки >= 3 тогда
		Сообщить("конец: Отключиться");
	конецЕсли;                     		
	возврат рез;
конецФункции //Отключиться

#КонецОбласти     

//читаем JSON овте об принятии марки
//и вставляем реузльтаты проверки этого ответа в структуру
процедура ПрочитатьРезультатПроврекиМаркиизJSONОтвета(JSONСтрока, стрИнфоОМарке)
	//читаем результат проверки марки
	ЧтениеJSON = Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(JSONСтрока);
	текИмяСвойства = "";	
	Пока ЧтениеJSON.Прочитать() цикл
		ТипJSON = ЧтениеJSON.ТипТекущегоЗначения;      
		Если ТипJSON=ТипЗначенияJSON.Булево тогда
			стрИнфоОМарке.Вставить(текИмяСвойства, ЧтениеJSON.ТекущееЗначение);
		конецЕсли;
		Если ТипJSON=ТипЗначенияJSON.ИмяСвойства тогда
			текИмяСвойства = ЧтениеJSON.ТекущееЗначение;
		конецЕсли;
	конецЦикла; 	
конецПроцедуры //ПрочитатьРезультатПРоврекиМаркиизJSONОтвета	

функция ПолучитьСтатусМаркиИзJSONОтвета(JSONСтрока)
	МаркаПроверена = ЛОЖЬ;
	ЧтениеJSON = Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(JSONСтрока);
	текИмяСвойства = "";	
	Пока ЧтениеJSON.Прочитать() цикл
		ТипJSON = ЧтениеJSON.ТипТекущегоЗначения;       
		Если текИмяСвойства = "ready" тогда
			Если ТипJSON=ТипЗначенияJSON.Булево тогда
				МаркаПроверена=ЧтениеJSON.ТекущееЗначение;
				Прервать;
			конецЕсли;
		конецЕсли;
		Если ТипJSON=ТипЗначенияJSON.ИмяСвойства тогда
			текИмяСвойства = ЧтениеJSON.ТекущееЗначение;
		конецЕсли;
	конецЦикла;     
	Возврат МаркаПроверена;
конецФункции //ПолучитьСтатусМарки                                           

функция ПолучитьЗнчениеПоляИзJSON(JSONСтрока, названиеПоля) экспорт
	ЗначениеПоля = "";
	ЧтениеJSON = Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(JSONСтрока);
	текИмяСвойства = "";	
	Пока ЧтениеJSON.Прочитать() цикл
		ТипJSON = ЧтениеJSON.ТипТекущегоЗначения;       
		Если текИмяСвойства = названиеПоля тогда
			ЗначениеПоля=ЧтениеJSON.ТекущееЗначение;
			Прервать;
		конецЕсли;
		Если ТипJSON=ТипЗначенияJSON.ИмяСвойства тогда
			текИмяСвойства = ЧтениеJSON.ТекущееЗначение;
		конецЕсли;
	конецЦикла;     
	Возврат ЗначениеПоля;	
конецФункции //ПолучитьЗнчениеПоляИзJSON

функция ОткрытьСменуЕслиСменаНеОткрыта(всеПараметрыЧека, статусСмены = "", НеЗакрыватьСоединениеСККТ = ЛОЖЬ)
	рез = ИСТИНА;  
	
	УровеньОтладки = ПолучитьЗначениеНастройки(всеПараметрыЧека.НастройкаиСвязиСКТТ, "УровеньОтладки");
	ФлТестовыйРежим = ПолучитьЗначениеНастройки(всеПараметрыЧека.НастройкаиСвязиСКТТ, "ФлТестовыйРежим");			
	
	нужноОткрытьСмену = ЛОЖЬ;                                             
	Если статусСмены = "" тогда
		исходящийJSON = СформироватьJSONПолученияСтатусаСмены(УровеньОтладки);
		ответJSON = "";
		описаниеОшибки = ""; КодОшибки = 0;
		РезультатКоммандыПолученияСтатусаСмены = ВыполнитьЗаданиеJSON(всеПараметрыЧека.COMДрайверККТ10, всеПараметрыЧека.НастройкаиСвязиСКТТ, исходящийJSON, 
		   		 ответJSON, описаниеОшибки, КодОшибки, ?(НеЗакрыватьСоединениеСККТ, ЛОЖЬ, ИСТИНА), НеЗакрыватьСоединениеСККТ);
		если РезультатКоммандыПолученияСтатусаСмены тогда
			статусСмены = ПолучитьЗнчениеПоляИзJSON(ответJSON, "state");									 
			Если статусСмены = "" тогда                                                                      
				статусСмены = ПолучитьЗнчениеПоляИзJSON(ответJSON, "status");
			конецЕсли;                                                    
		конецЕсли;          			   
	конецЕсли;
	Если статусСмены = "closed" тогда
		нужноОткрытьСмену = ИСТИНА;
	конецЕсли;
	Если НЕ нужноОткрытьСмену тогда
		Возврат рез;
	конецЕсли;
	
	исходящийJSON = СформироватьJSONОткрытияСмены(всеПараметрыЧека.списПараметровЧека.Кассир, УровеньОтладки);
	ответJSON = "";
	описаниеОшибки = ""; КодОшибки = 0;
	резКомандыОткрытияСмены = ВыполнитьЗаданиеJSON(всеПараметрыЧека.COMДрайверККТ10, всеПараметрыЧека.НастройкаиСвязиСКТТ, исходящийJSON, 
					   		   		 ответJSON, описаниеОшибки, КодОшибки,
										?(НеЗакрыватьСоединениеСККТ, ЛОЖЬ, ИСТИНА), НеЗакрыватьСоединениеСККТ);
	если не резКомандыОткрытияСмены тогда
		рез = ЛОЖЬ;
	конецЕсли;          		
	Возврат рез;
конецФункции //ОткрытьСменуЕслиСменаНеОткрыта

//функция СменаИстекла(всеПараметрыЧека)
//	рез = ЛОЖЬ;  
//	исходящийJSON = СформироватьJSONПолученияСтатусаСмены(УровеньОтладки);
//	ответJSON = "";
//	описаниеОшибки = ""; КодОшибки = 0;
//	РезультатКоммандыПолученияСтатусаСмены = ВыполнитьЗаданиеJSON(всеПараметрыЧека.COMДрайверККТ10, всеПараметрыЧека.НастройкаиСвязиСКТТ, исходящийJSON, 
//					   		   		 ответJSON, описаниеОшибки, КодОшибки);
//	если РезультатКоммандыПолученияСтатусаСмены тогда
//		статусСмены = ПолучитьЗнчениеПоляИзJSON(ответJSON, "state");
//		Если статусСмены = "" тогда                                                                      
//			статусСмены = ПолучитьЗнчениеПоляИзJSON(ответJSON, "status");									 
//		конецЕсли;                                                    
//		Если статусСмены = "closed" тогда
//			нужноОткрытьСмену = ИСТИНА;
//		конецЕсли;
//	конецЕсли;          			   
//	
//	Если НЕ нужноОткрытьСмену тогда
//		Возврат рез;
//	конецЕсли;	
//конецФункции //СменаИстекла

функция ПолучитьДиректориюЛогФайлов(директорияЛогФайловАтол = "") экспорт
	//C:\Users\Acer\AppData\Roaming\ATOL\drivers10\logs
	//C:\Users\Acer\AppData\Local\Temp\
	текКаталогДляЛогов = КаталогВременныхФайлов();
	текКаталогДляЛогов = СтрЗаменить(текКаталогДляЛогов, "Local\Temp\", "");
	текКаталогДляЛогов = текКаталогДляЛогов + "Roaming\";
	КаталогНаДиске = Новый Файл(текКаталогДляЛогов);
	Если НЕ КаталогНаДиске.Существует() тогда        
		СоздатьКаталог(текКаталогДляЛогов);
	конецЕсли;	                                    
	текКаталогДляЛогов = текКаталогДляЛогов + "ATOL\";
	КаталогНаДиске = Новый Файл(текКаталогДляЛогов);
	Если НЕ КаталогНаДиске.Существует() тогда        
		СоздатьКаталог(текКаталогДляЛогов);
	конецЕсли;		                                  
	текКаталогДляЛогов = текКаталогДляЛогов + "drivers10\";
	КаталогНаДиске = Новый Файл(текКаталогДляЛогов);
	Если НЕ КаталогНаДиске.Существует() тогда        
		СоздатьКаталог(текКаталогДляЛогов);
	конецЕсли;		                                  
	текКаталогДляЛогов = текКаталогДляЛогов + "logs\";             
	директорияЛогФайловАтол = СокрЛП(текКаталогДляЛогов);
	КаталогНаДиске = Новый Файл(текКаталогДляЛогов);
	Если НЕ КаталогНаДиске.Существует() тогда        
		СоздатьКаталог(текКаталогДляЛогов);
	конецЕсли;		                                  
	текКаталогДляЛогов = текКаталогДляЛогов + "1с\";
	КаталогНаДиске = Новый Файл(текКаталогДляЛогов);
	Если НЕ КаталогНаДиске.Существует() тогда        
		СоздатьКаталог(текКаталогДляЛогов);
	конецЕсли;		                                  	
	Возврат текКаталогДляЛогов;	
конецФункции //ПолучитьДиректориюЛогФайлов

функция ПолучитьДатуФайлаИзИменяФала(имяФайла)
	//ггггммддlogs1c
	возрДата = ТекущаяДата();
	try
		возрДата = Дата(Лев(имяФайла, 8));
	except
	endtry;
	Возврат возрДата;
конецФункции //ПолучитьДатуФайлаИзИменяФала

процедура УдалитьФайлыЛогов(дирЛогФайлов, старшеДней = 30, уровеньОтладки = 1)
	НайденныеФайлы = НайтиФайлы(дирЛогФайлов, "*logs1c.txt", ЛОЖЬ);
	датаСтарая = ТекущаяДата() - 86400*старшеДней;
	датаФСтарая = Формат(датаСтарая, "ДФ=ггггММдд");
	Для Каждого файл из НайденныеФайлы цикл
		ДатаТекущФайла = ПолучитьДатуФайлаИзИменяФала(файл.ИмяБезРасширения);
		Если ДатаТекущФайла < датаСтарая тогда
			try
				УдалитьФайлы(файл.ПолноеИмя);
			except         
				Если уровеньОтладки>=3 тогда
					Сообщить(ОписаниеОшибки());
				конецЕсли;
			endtry;
		конецЕсли;
	конецЦикла;
конецПроцедуры //УдалитьФайлыЛогов

функция ПолучитьБуквуМИзРезультатаПроверки(резПроверки) экспорт
	рез = "[М]";
	Если резПроверки.imcCheckFlag и резПроверки.imcCheckResult и резПроверки.imcStatusInfo и 
		резПроверки.imcEstimatedStatusCorrect тогда
		рез = "[М+]";
	иначеЕсли резПроверки.imcCheckFlag тогда
		Если резПроверки.imcCheckResult и резПроверки.imcStatusInfo и НЕ резПроверки.imcEstimatedStatusCorrect тогда
			рез = "[М-]";
		конецЕсли;    
		Если НЕ резПроверки.imcCheckResult и резПроверки.imcStatusInfo и НЕ резПроверки.imcEstimatedStatusCorrect тогда
			рез = "[М-]";
		конецЕсли;    		
		Если НЕ резПроверки.imcCheckResult и НЕ резПроверки.imcStatusInfo и НЕ резПроверки.imcEstimatedStatusCorrect тогда
			рез = "[М-]";
		конецЕсли;    				
	конецЕсли;   
	Возврат рез;
конецФункции //ПолучитьБуквуМИзРезультатаПроверки                                           

функция ПолучитьПереводПредметаРасчета(paymentObject) экспорт
	рез = "Товар";
	Если paymentObject = "service" тогда     
		рез = "Услуга";	
	иначеЕсли paymentObject = "payment" тогда
		рез = "Платёж";	
	иначеЕсли paymentObject = "agentCommission" тогда
		рез = "Агентское вознаграждение";	
	иначеЕсли paymentObject = "another" тогда
		рез = "иной предмет расчета";	
	иначеЕсли paymentObject = "exciseWithoutMarking" тогда
		рез = "Подкацизный без маркировки";	
	иначеЕсли paymentObject = "exciseWithMarking" тогда
		рез = "Подкацизный с маркировкой";			
	иначеЕсли paymentObject = "commodityWithoutMarking" тогда
		рез = "Товар без маркировки";			
	иначеЕсли paymentObject = "commodityWithMarking" тогда
		рез = "Товар с маркировкой";					
	конецЕсли;
	возврат рез;
конецФункции //ПолучитьПереводПредметаРасчета

функция ПолучитьПереводСпособаРасчета(paymentMethod) экспорт
	рез = "полный расчет";
	Если paymentMethod = "fullPrepayment" тогда     
		рез = "предоплата 100%";	
	иначеЕсли paymentMethod = "prepayment" тогда
		рез = "предоплата";	
	иначеЕсли paymentMethod = "advance" тогда
		рез = "аванс";	
	иначеЕсли paymentMethod = "partialPayment" тогда
		рез = "частичный расчет";	
	иначеЕсли paymentMethod = "credit" тогда
		рез = "передача в рассрочку";	
	иначеЕсли paymentMethod = "creditPayment" тогда
		рез = "оплата рассрочки";			
	конецЕсли;
	возврат рез;
конецФункции //ПолучитьПереводСпособаРасчета

функция ПолучитьПереводНДС(ndstype) экспорт
	рез = "БЕЗ НДС";
	Если ndstype = "vat0" тогда     
		рез = "НДС 0%";	
	иначеЕсли ndstype = "vat10" тогда
		рез = "НДС 10%";	
	иначеЕсли ndstype = "vat110" тогда
		рез = "НДС 10/110";	
	иначеЕсли ndstype = "vat20" тогда
		рез = "НДС 20%";	
	иначеЕсли ndstype = "vat120 " тогда
		рез = "НДС 20/120";	
	конецЕсли;
	возврат рез;
конецФункции //ПолучитьПереводНДС

функция ПолучитьПереводСистемыНалогообложения(taxationType) экспорт
	рез = "УСН Д";
	Если taxationType = "osn" тогда     
		рез = "Общая";	
	иначеЕсли taxationType = "usnIncome" тогда     
		рез = "УСН Д";	
	иначеЕсли taxationType = "usnIncomeOutcome" тогда     
		рез = "УСН Д-Р";	
	иначеЕсли taxationType = "esn" тогда     
		рез = "ЕСН";	
	иначеЕсли taxationType = "patent" тогда     
		рез = "Патент";	
	конецЕсли;
	возврат рез;	
конецФункции //ПолучитьПереводСистемыНалогообложения

функция ПолучитьПереводТипаЧека(checktype) экспорт
	рез = "ПРОДАЖА";
	Если checktype = "sellReturn" тогда     
		рез = "ВОЗВРАТ";	
	конецЕсли;
	возврат рез;
конецФункции //ПолучитьПереводТипаЧека

функция ПеревестиТипОплаты(typeOfPayment) экспорт
	рез = "Наличными";
	Если typeOfPayment = "electronically" тогда     
		рез = "Безналичными";	
	иначеЕсли typeOfPayment = "prepaid" тогда     
		рез = "ЗачетАванса";	
	иначеЕсли typeOfPayment = "credit" тогда     
		рез = "Кредит";			
	конецЕсли;
	возврат рез;
конецФункции //ПеревестиТипОплаты   

функция ПеревестиМаркуИзBASE64(строкаВBASE64, убратьСимволыGS = false) экспорт
	двДанные = Base64Значение(строкаВBASE64);
	резСтр = ПолучитьСтрокуИзДвоичныхДанных(двДанные);
	Если убратьСимволыGS тогда
		резСтр = СтрЗаменить(резСтр, Символ(29), "");
	конецЕсли;
	возврат резСтр;
конецФункции //ПеревестиМаркуИзBASE64

функция ПреобразоватьВЧитабельныйВидСтрктуруЧека(фирмаКассыНазв, ИННКассы, чекЗадание, ответЧек) экспорт
	всеПараметрыЧека = Новый Структура;
	всеПараметрыЧека.Вставить("ТипЧека", ПечатьЧекаККТКлиент.ПолучитьПереводТипаЧека(чекЗадание.type));
	всеПараметрыЧека.Вставить("ФирмаНазвание", фирмаКассыНазв);
	всеПараметрыЧека.Вставить("ИННФирмы", ИННКассы);
	всеПараметрыЧека.Вставить("Кассир", чекЗадание.operator.name);
	
	СуммаЧека = 0; текИнд = 1;
	для Каждого стрПозиции из чекЗадание.items цикл
		Если текИнд = 1 тогда
			текИнд = текИнд + 1;
			Продолжить;
		конецЕсли;		
		СуммаЧека  = СуммаЧека + стрПозиции.amount;
		текИнд = текИнд + 1;
	конецЦикла;			
	
	всеПараметрыЧека.Вставить("НомерЧека", "");
	всеПараметрыЧека.Вставить("НомерСмены", "");
	всеПараметрыЧека.Вставить("ДатаИВремяЧека", СокрЛП(ТекущаяДата()));
	всеПараметрыЧека.Вставить("СуммаЧека", СуммаЧека);
	всеПараметрыЧека.Вставить("РегНомерККТ", "");
	всеПараметрыЧека.Вставить("НомерФН", "");
	всеПараметрыЧека.Вставить("ФискалПризнак", "");	
	Если ответЧек.Свойство("fiscalParams") тогда
		всеПараметрыЧека.Вставить("НомерЧека", ответЧек.fiscalParams.fiscalDocumentNumber);
		всеПараметрыЧека.Вставить("НомерСмены", ответЧек.fiscalParams.shiftNumber);
		всеПараметрыЧека.Вставить("ДатаИВремяЧека", ответЧек.fiscalParams.fiscalDocumentDateTime);
		всеПараметрыЧека.Вставить("СуммаЧека", ответЧек.fiscalParams.total);
		всеПараметрыЧека.Вставить("РегНомерККТ", ответЧек.fiscalParams.registrationNumber);
		всеПараметрыЧека.Вставить("НомерФН", ответЧек.fiscalParams.fnNumber);
		всеПараметрыЧека.Вставить("ФискалПризнак", ответЧек.fiscalParams.fiscalDocumentSign);	
	конецЕсли;
	
	ТипЧекаВQRКоде= "1";
	Если чекЗадание.type = "sellReturn" тогда
		ТипЧекаВQRКоде = "2";
	конецЕсли;
	СтрокаQRКода = "";
	Если ответЧек.Свойство("fiscalParams") тогда
		СтрокаQRКода = ПолучитьСтрокуQRЧека(ответЧек.fiscalParams.fiscalDocumentDateTime, 
								ответЧек.fiscalParams.total, ответЧек.fiscalParams.fnNumber, 
								ответЧек.fiscalParams.fiscalDocumentNumber, 
								ответЧек.fiscalParams.fiscalDocumentSign, ТипЧекаВQRКоде);	
	конецЕсли;
	всеПараметрыЧека.Вставить("СтрокаQRКода", СтрокаQRКода);
	Если чекЗадание.Свойство("taxationType") тогда
		всеПараметрыЧека.Вставить("СистемаНалогообложения", ПечатьЧекаККТКлиент.ПолучитьПереводСистемыНалогообложения(чекЗадание.taxationType));
	конецЕсли;
	всеПараметрыЧека.Вставить("ТаблицаОплат", Новый Структура);
	текТаблицаОплат = всеПараметрыЧека.ТаблицаОплат;
	текИнд = 1;
	для Каждого стрОплат из чекЗадание.payments цикл
		Если текИнд = 1 тогда
			текИнд = текИнд + 1;
			Продолжить;
		конецЕсли;
		текТаблицаОплат.Вставить(ПечатьЧекаККТКлиент.ПеревестиТипОплаты(стрОплат.type), стрОплат.sum);
		текИнд = текИнд + 1;
	конецЦикла;
	всеПараметрыЧека.Вставить("Позиции", Новый Массив);
	текТаблицаПозиций = всеПараметрыЧека.Позиции;
	текИнд = 1;
	для Каждого стрПозиции из чекЗадание.items цикл
		Если текИнд = 1 тогда
			текИнд = текИнд + 1;
			Продолжить;
		конецЕсли;		
		текТаблицаПозиций.Добавить(Новый Структура);
		текДобПозиция = текТаблицаПозиций.Получить(текТаблицаПозиций.Количество() - 1);
		текДобПозиция.Вставить("Наименование", стрПозиции.name);
		текДобПозиция.Вставить("Цена", стрПозиции.price);
		текДобПозиция.Вставить("Количество", стрПозиции.quantity);
		текДобПозиция.Вставить("Сумма", стрПозиции.amount);
		текДобПозиция.Вставить("СтавкаНДС", ПечатьЧекаККТКлиент.ПолучитьПереводНДС(стрПозиции.tax.type));
		текДобПозиция.Вставить("ПредметРасчета", ПечатьЧекаККТКлиент.ПолучитьПереводПредметаРасчета(стрПозиции.paymentObject));
		текДобПозиция.Вставить("СпособРасчета", ПечатьЧекаККТКлиент.ПолучитьПереводСпособаРасчета(стрПозиции.paymentMethod));
		Если стрПозиции.Свойство("imcParams") тогда
			текДобПозиция.Вставить("РезультатПроверкиМарки", "[M?]");
			Если стрПозиции.imcParams.Свойство("itemInfoCheckResult") тогда
				текДобПозиция.Вставить("РезультатПроверкиМарки", ПечатьЧекаККТКлиент.ПолучитьБуквуМИзРезультатаПроверки(стрПозиции.imcParams.itemInfoCheckResult));
			конецЕсли;
			текДобПозиция.Вставить("Марка", ПечатьЧекаККТКлиент.ПеревестиМаркуИзBASE64(стрПозиции.imcParams.imc, true));
		конецЕсли;
		текИнд = текИнд + 1;
	конецЦикла;		
	Возврат всеПараметрыЧека;
конецФункции //ПреобразоватьВЧитабельныйВидСтрктуруЧека

функция ПолучитьФорматДатыИВремениЧекаДляQRКода(ДатаИВремяЧека)
	//из 2020-12-10T14:01:00+03:00
	//в 20181007T222000
	рез = Лев(ДатаИВремяЧека, 19);
	рез = СтрЗаменить(рез, "-", "");
	рез = СтрЗаменить(рез, ":", "");
	возврат рез;
конецФункции //ПолучитьФорматДатыИВремениЧекаДляQRКода

функция ПолучитьСтрокуQRЧека(ДатаИВремяЧека, СуммаЧека, ФННомер, ФДНомер, ФискПриз, ТипЧека)
	//t=20181007T222000&s=1955.49&fn=8710000101838052&i=18487&fp=2392195712&n=1
	//Формат()
	стрСуммыЧека = Формат(СуммаЧека, "ЧЦ=10; ЧДЦ=2; ЧРД=.; ЧФ=Ч");
	рез = "t="+ПолучитьФорматДатыИВремениЧекаДляQRКода(ДатаИВремяЧека) + "&s="+стрСуммыЧека+
		  "&fn="+ФННомер+"&i="+ФДНомер+"&fp="+ФискПриз+"&n="+ТипЧека;
	возврат рез;
конецФункции //ПолучитьСтрокуQRЧека

Функция	ЗаменаРУСнаАнгл(ШК) Экспорт
	
	прЗамена = Ложь;
	Для Сч = 1 по СтрДлина(ШК) Цикл
		Если КодСимвола(Сред(ШК,СЧ)) > 191 Тогда
			прЗамена = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если прЗамена тогда
			
		СтруктураЗаменыРБ = Новый Структура;	
		СтруктураЗаменыРБ.Вставить("Й","Q");
		СтруктураЗаменыРБ.Вставить("й","q");
		СтруктураЗаменыРБ.Вставить("Ц","W");
		СтруктураЗаменыРБ.Вставить("ц","w");
		СтруктураЗаменыРБ.Вставить("У","E");
		СтруктураЗаменыРБ.Вставить("у","e");
		СтруктураЗаменыРБ.Вставить("К","R");
		СтруктураЗаменыРБ.Вставить("к","r");
		СтруктураЗаменыРБ.Вставить("Е","T");
		СтруктураЗаменыРБ.Вставить("е","t");
		СтруктураЗаменыРБ.Вставить("Н","Y");
		СтруктураЗаменыРБ.Вставить("н","y");
		СтруктураЗаменыРБ.Вставить("Г","U");
		СтруктураЗаменыРБ.Вставить("г","u");
		СтруктураЗаменыРБ.Вставить("Ш","I");
		СтруктураЗаменыРБ.Вставить("ш","i");
		СтруктураЗаменыРБ.Вставить("Щ","O");
		СтруктураЗаменыРБ.Вставить("щ","o");
		СтруктураЗаменыРБ.Вставить("З","P");
		СтруктураЗаменыРБ.Вставить("з","p");
		СтруктураЗаменыРБ.Вставить("Х","{");
		СтруктураЗаменыРБ.Вставить("х","[");
		СтруктураЗаменыРБ.Вставить("Ъ","}");
		СтруктураЗаменыРБ.Вставить("ъ","]");
		СтруктураЗаменыРБ.Вставить("Ф","A");
		СтруктураЗаменыРБ.Вставить("a","a");
		СтруктураЗаменыРБ.Вставить("Ы","S");
		СтруктураЗаменыРБ.Вставить("ы","s");
		СтруктураЗаменыРБ.Вставить("В","D");
		СтруктураЗаменыРБ.Вставить("в","d");
		СтруктураЗаменыРБ.Вставить("А","F");
		СтруктураЗаменыРБ.Вставить("а","f");
		СтруктураЗаменыРБ.Вставить("П","G");
		СтруктураЗаменыРБ.Вставить("п","g");
		СтруктураЗаменыРБ.Вставить("Р","H");
		СтруктураЗаменыРБ.Вставить("р","h");
		СтруктураЗаменыРБ.Вставить("О","J");
		СтруктураЗаменыРБ.Вставить("о","j");
		СтруктураЗаменыРБ.Вставить("Л","K");
		СтруктураЗаменыРБ.Вставить("л","k");
		СтруктураЗаменыРБ.Вставить("Д","L");
		СтруктураЗаменыРБ.Вставить("д","l");
		СтруктураЗаменыРБ.Вставить("ж",";");
		СтруктураЗаменыРБ.Вставить("Ж",":");
		СтруктураЗаменыРБ.Вставить("э","'");
		СтруктураЗаменыРБ.Вставить("Э","""");
		СтруктураЗаменыРБ.Вставить("\","\");
		СтруктураЗаменыРБ.Вставить("/","|");
		СтруктураЗаменыРБ.Вставить("Я","Z");
		СтруктураЗаменыРБ.Вставить("я","z");
		СтруктураЗаменыРБ.Вставить("Ч","X");
		СтруктураЗаменыРБ.Вставить("ч","x");
		СтруктураЗаменыРБ.Вставить("С","C");
		СтруктураЗаменыРБ.Вставить("с","c");
		СтруктураЗаменыРБ.Вставить("М","V");
		СтруктураЗаменыРБ.Вставить("м","v");
		СтруктураЗаменыРБ.Вставить("И","B");
		СтруктураЗаменыРБ.Вставить("и","b");
		СтруктураЗаменыРБ.Вставить("Т","N");
		СтруктураЗаменыРБ.Вставить("т","n");
		СтруктураЗаменыРБ.Вставить("Ь","M");
		СтруктураЗаменыРБ.Вставить("ь","m");		
		СтруктураЗаменыРБ.Вставить("Б","<");
		СтруктураЗаменыРБ.Вставить("б",",");
		СтруктураЗаменыРБ.Вставить("Ю",">");
		СтруктураЗаменыРБ.Вставить("ю",".");
		СтруктураЗаменыРБ.Вставить(",","?");
		СтруктураЗаменыРБ.Вставить(".","/");
		
		СтруктураЗаменыРБ.Вставить("ё","`");
		СтруктураЗаменыРБ.Вставить("Ё","~");
		СтруктураЗаменыРБ.Вставить("""","@");
		СтруктураЗаменыРБ.Вставить("№","#");
		СтруктураЗаменыРБ.Вставить(";","$");
		СтруктураЗаменыРБ.Вставить(":","^");
		СтруктураЗаменыРБ.Вставить("?","&");
					
		Для Сч = 1 По СтрДлина(ШК) Цикл
			Попытка
			Если СтруктураЗаменыРБ.Свойство(Сред(ШК,Сч,1)) Тогда
				Замена = "";
				СтруктураЗаменыРБ.Свойство(Сред(ШК,Сч,1),Замена)  ;
				ШК = СтрЗаменить(ШК,Сред(ШК,Сч,1),Замена);
			КонецЕсли;
			
			Исключение
				//Скорей всего символ
			КонецПопытки
		КонецЦикла
	КонецЕсли;
		
	Возврат ШК;
	
КонецФункции //ЗаменаРУСнаАнгл

процедура ПроверитьИИсправитьСтрокиОплат(ОбщиеСвойстваЧека, СуммаЧека) экспорт
	Если НЕ ОбщиеСвойстваЧека.Свойство("Наличными") тогда
		ОбщиеСвойстваЧека.Вставить("Наличными", 0);
	конецЕсли;
	Если НЕ ОбщиеСвойстваЧека.Свойство("Безналичными") тогда
		ОбщиеСвойстваЧека.Вставить("Безналичными", 0);
	конецЕсли;
	Если НЕ ОбщиеСвойстваЧека.Свойство("ЗачетАванса") тогда
		ОбщиеСвойстваЧека.Вставить("ЗачетАванса", 0);
	конецЕсли;
	Если НЕ ОбщиеСвойстваЧека.Свойство("Кредит") тогда
		ОбщиеСвойстваЧека.Вставить("Кредит", 0);
	конецЕсли;
	Если НЕ ОбщиеСвойстваЧека.Свойство("Сдача") тогда
		ОбщиеСвойстваЧека.Вставить("Сдача", 0);
	конецЕсли;	
	всегоСуммаОплат = ОбщиеСвойстваЧека.Наличными+ОбщиеСвойстваЧека.Безналичными+
						ОбщиеСвойстваЧека.ЗачетАванса+ОбщиеСвойстваЧека.Кредит;	
	всегоСуммаОплатИсключаяНаличные = ОбщиеСвойстваЧека.Безналичными+
						ОбщиеСвойстваЧека.ЗачетАванса+ОбщиеСвойстваЧека.Кредит;							
	Если всегоСуммаОплатИсключаяНаличные > СуммаЧека тогда
		СуммаНаКоторуюНадоУменьшить = всегоСуммаОплатИсключаяНаличные - СуммаЧека;
		//уменьшаем
		Если ОбщиеСвойстваЧека.Кредит > СуммаНаКоторуюНадоУменьшить тогда
			ОбщиеСвойстваЧека.Кредит = ОбщиеСвойстваЧека.Кредит - СуммаНаКоторуюНадоУменьшить;
			СуммаНаКоторуюНадоУменьшить = 0;
		иначе
			ОбщиеСвойстваЧека.Кредит = 0;
			СуммаНаКоторуюНадоУменьшить = СуммаНаКоторуюНадоУменьшить - ОбщиеСвойстваЧека.Кредит;
		конецЕсли;
		Если ОбщиеСвойстваЧека.ЗачетАванса > СуммаНаКоторуюНадоУменьшить тогда
			ОбщиеСвойстваЧека.ЗачетАванса = ОбщиеСвойстваЧека.ЗачетАванса - СуммаНаКоторуюНадоУменьшить;
			СуммаНаКоторуюНадоУменьшить = 0;
		иначе
			ОбщиеСвойстваЧека.ЗачетАванса = 0;
			СуммаНаКоторуюНадоУменьшить = СуммаНаКоторуюНадоУменьшить - ОбщиеСвойстваЧека.ЗачетАванса;
		конецЕсли;		
		Если ОбщиеСвойстваЧека.Безналичными > СуммаНаКоторуюНадоУменьшить тогда
			ОбщиеСвойстваЧека.Безналичными = ОбщиеСвойстваЧека.Безналичными - СуммаНаКоторуюНадоУменьшить;
			СуммаНаКоторуюНадоУменьшить = 0;
		иначе
			ОбщиеСвойстваЧека.Безналичными = 0;
			СуммаНаКоторуюНадоУменьшить = СуммаНаКоторуюНадоУменьшить - ОбщиеСвойстваЧека.Безналичными;
		конецЕсли;				
	конецЕсли;
	всегоСуммаОплат = ОбщиеСвойстваЧека.Наличными+ОбщиеСвойстваЧека.Безналичными+
						ОбщиеСвойстваЧека.ЗачетАванса+ОбщиеСвойстваЧека.Кредит;	
	всегоСуммаОплатИсключаяНаличные = ОбщиеСвойстваЧека.Безналичными+
						ОбщиеСвойстваЧека.ЗачетАванса+ОбщиеСвойстваЧека.Кредит;								
	
	Если всегоСуммаОплат < СуммаЧека тогда
		ОбщиеСвойстваЧека.Наличными = ОбщиеСвойстваЧека.Наличными + (СуммаЧека - всегоСуммаОплат);
	конецЕсли;
	Если всегоСуммаОплат > СуммаЧека тогда
		ОбщиеСвойстваЧека.Вставить("Сдача", всегоСуммаОплат - СуммаЧека);
	конецЕсли;		
конецПроцедуры //ПроверитьИИсправитьСтрокиОплат