&НаКлиенте
Перем НомИтерации;
&НаКлиенте
Перем ОтветПолучен;
&НаКлиенте
Перем СтоПроцЗакрыть;

&НаКлиенте
функция ПолучитьОтветНаJSONЗаданиеRabbitMQ(ipRabbitMQ)
	Соединение = Новый HTTPСоединение(ipRabbitMQ, 15672, "guest", "guest");
	запрос = Новый HTTPЗапрос("/api/queues/%2F/answers/get");
	запрос.Заголовки.Вставить("Accept", "application/json");
	запрос.УстановитьТелоИзСтроки("{""count"":5,""ackmode"":""ack_requeue_false"",""encoding"":""auto"",""truncate"":50000}");
	рез = Соединение.ВызватьHTTPМетод("POST", запрос);
	КодHTTPОтвета = рез.КодСостояния;
	JSONОтвет = рез.ПолучитьТелоКакСтроку();
	Сообщить("Нам вернули код: " + КодHTTPОтвета);
	Сообщить("Тело результата: " + JSONОтвет);	
	Возврат JSONОтвет;
конецФункции //ПолучитьОтветНаJSONЗаданиеRabbitMQ

&НаКлиенте
Процедура КомандаПослатьМокJSONОтветаККТЧерезRabitMQ(Команда)
	Соединение = Новый HTTPСоединение("localhost", 15672, "guest", "guest");
	запрос = Новый HTTPЗапрос("/api/exchanges/%2F//publish");
	запрос.Заголовки.Вставить("Accept", "application/json");
	стрJSONQuete = СтрЗаменить(РеквизитМокОтветJSON, """", "\""");
	стрJSONQuete = СтрЗаменить(стрJSONQuete, Символ(9), "");
	стрJSONQuete = СтрЗаменить(стрJSONQuete, Символ(10), "");
	стрJSONQuete = СтрЗаменить(стрJSONQuete, Символ(13), "");	
	строкаТелаЗароса = "{""properties"":{},""routing_key"":""answers"",""payload"":""" + 
					стрJSONQuete + """,""payload_encoding"":""string""}";
	запрос.УстановитьТелоИзСтроки(строкаТелаЗароса);
	рез = Соединение.ВызватьHTTPМетод("POST", запрос);
	Сообщить("Нам вернули код: " + рез.КодСостояния);
	Сообщить("Тело результата: " + рез.ПолучитьТелоКакСтроку());
КонецПроцедуры //КомандаПослатьJSONКомандуККТЧерезRabitMQ

&НаКлиенте
Процедура ОжиданиеОтветаОтККТ() экспорт
	НомИтерации = НомИтерации + 1;
	структураОветаПослеЗакрытияФормыОжидания = Новый Структура;
	структураОветаПослеЗакрытияФормыОжидания.Вставить("Результат", false);
	структураОветаПослеЗакрытияФормыОжидания.Вставить("НомерИтерации", НомИтерации);
	
	Элементы.ДекорацияПроцессОжидания.Заголовок = СокрЛП(НомИтерации);
	ответJSON = ПолучитьОтветНаJSONЗаданиеRabbitMQ(РеквизитIpRabbitMQ);
	ошибкаКраткая = ПечатьЧекаККТКлиент.ПолучитьЗнчениеПоляИзJSON(ответJSON, "error");
	ошибкаПолноеОписание = ПечатьЧекаККТКлиент.ПолучитьЗнчениеПоляИзJSON(ответJSON, "reason");
	Если СокрЛП(ошибкаКраткая) = "" тогда
		Если СокрЛП(ответJSON) <> "[]" тогда
			ОтветПолучен = ИСТИНА;
			структураОветаПослеЗакрытияФормыОжидания.Вставить("Результат", true);
			структураОветаПослеЗакрытияФормыОжидания.Вставить("JSONОтвет", ответJSON);
			РеквизитОтветJSON = ответJSON;
		конецЕсли;
	конецЕсли;
	Сообщить(СокрЛП(НомИтерации));
	//Если (НомИтерации > 5) и НЕ(ОтветПолучен) тогда
	//	КомандаПослатьМокJSONОтветаККТЧерезRabitMQ("");
	//	КомандаПослатьМокJSONОтветаККТЧерезRabitMQ("");
	//конецЕсли;
	Если (НомИтерации > 10) или (ОтветПолучен) тогда
		ОтключитьОбработчикОжидания("ОжиданиеОтветаОтККТ");
		структураОветаПослеЗакрытияФормыОжидания.Вставить("ошибкаКраткая", ошибкаКраткая);
		структураОветаПослеЗакрытияФормыОжидания.Вставить("ошибкаПолноеОписание", ошибкаПолноеОписание);
		Закрыть(структураОветаПослеЗакрытияФормыОжидания);
	конецЕсли;
конецПроцедуры //ОжиданиеОтветаОтККТ

&НаКлиенте
Функция ОжиданиеОтветаОтККТФункция(ЭтоСервер = ЛОЖЬ) экспорт
	Если ЭтоСервер тогда
		НомИтерации = 0;
	конецЕсли;
	ОтветПолучен = ЛОЖЬ;
	НомИтерации = НомИтерации + 1;
	структураОветаПослеЗакрытияФормыОжидания = Новый Структура;
	структураОветаПослеЗакрытияФормыОжидания.Вставить("Результат", false);
	структураОветаПослеЗакрытияФормыОжидания.Вставить("НомерИтерации", НомИтерации);
	
	Если НЕ ЭтоСервер тогда
		Элементы.ДекорацияПроцессОжидания.Заголовок = СокрЛП(НомИтерации);
	конецЕсли;
	ответJSON = ПолучитьОтветНаJSONЗаданиеRabbitMQ(РеквизитIpRabbitMQ);
	ошибкаКраткая = ПечатьЧекаККТКлиент.ПолучитьЗнчениеПоляИзJSON(ответJSON, "error");
	ошибкаПолноеОписание = ПечатьЧекаККТКлиент.ПолучитьЗнчениеПоляИзJSON(ответJSON, "reason");
	Если СокрЛП(ошибкаКраткая) = "" тогда
		Если СокрЛП(ответJSON) <> "[]" тогда
			ОтветПолучен = ИСТИНА;
			структураОветаПослеЗакрытияФормыОжидания.Вставить("Результат", true);
			структураОветаПослеЗакрытияФормыОжидания.Вставить("JSONОтвет", ответJSON);
			РеквизитОтветJSON = ответJSON;
		конецЕсли;
	конецЕсли;
	Сообщить(СокрЛП(НомИтерации));
	//Если (НомИтерации > 5) и НЕ(ОтветПолучен) тогда
	//	КомандаПослатьМокJSONОтветаККТЧерезRabitMQ("");
	//	КомандаПослатьМокJSONОтветаККТЧерезRabitMQ("");
	//конецЕсли;
	Если (НомИтерации > 10) или (ОтветПолучен) тогда
		Если НЕ ЭтоСервер тогда
			ОтключитьОбработчикОжидания("ОжиданиеОтветаОтККТ");
		конецЕсли;
		структураОветаПослеЗакрытияФормыОжидания.Вставить("ошибкаКраткая", ошибкаКраткая);
		структураОветаПослеЗакрытияФормыОжидания.Вставить("ошибкаПолноеОписание", ошибкаПолноеОписание);
		Если НЕ ЭтоСервер тогда
			Закрыть(структураОветаПослеЗакрытияФормыОжидания);
		конецЕсли;
	конецЕсли;
	Возврат структураОветаПослеЗакрытияФормыОжидания;
конецФункции //ОжиданиеОтветаОтККТФункция

&НаКлиенте
Процедура Запустить(ОбнулятьИтерацию = ИСТИНА) экспорт
	// Вставить содержимое обработчика.
	Если ОбнулятьИтерацию тогда
		НомИтерации = 0;
	конецЕсли;
	ПодключитьОбработчикОжидания("ОжиданиеОтветаОтККТ", 1, false);
КонецПроцедуры //Запустить

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// Вставить содержимое обработчика.
	НомИтерации = 0;
	ОтветПолучен = ЛОЖЬ;
	СтоПроцЗакрыть = ЛОЖЬ;
	//ОжиданиеОтветаОтККТ();
	Если НЕ ОтветПолучен тогда
		Запустить(ЛОЖЬ);
	иначе
		структураОветаПослеЗакрытияФормыОжидания = Новый Структура;
		структураОветаПослеЗакрытияФормыОжидания.Вставить("Результат", true);
		структураОветаПослеЗакрытияФормыОжидания.Вставить("НомерИтерации", НомИтерации);
		структураОветаПослеЗакрытияФормыОжидания.Вставить("JSONОтвет", РеквизитОтветJSON);				
		//ВыполнитьОбработкуОповещения(РеквизитОписаниеПриЗакрытии, структураОветаПослеЗакрытияФормыОжидания);
	конецЕсли;
КонецПроцедуры //ПриОткрытии

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	РеквизитIpRabbitMQ = Параметры.IpRabbitMQ;
	РеквизитМокОтветJSON = Параметры.ПараметрМокОтветJSON;
	//РеквизитОписаниеПриЗакрытии = Параметры.ПараметрОписаниеПриЗакрытии;
КонецПроцедуры //ПриСозданииНаСервере

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Если (НомИтерации < 10) и (НЕ ОтветПолучен) и (НЕ СтоПроцЗакрыть) тогда
		ОтключитьОбработчикОжидания("ОжиданиеОтветаОтККТ");
		Отказ = ИСТИНА;
		ОписОпов = Новый ОписаниеОповещения("ПередЗакрытиемПродолжение", ЭтотОбъект, Отказ);
		ПоказатьВопрос(ОписОпов, "Закрыть форму?", РежимДиалогаВопрос.ДаНет, 120,, "Подтвердите действие");
	конецЕсли;
КонецПроцедуры //ПередЗакрытием

&НаКлиенте
Процедура ПередЗакрытиемПродолжение(Результат, Отказ) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		СтоПроцЗакрыть = ИСТИНА;
		структураОветаПослеЗакрытияФормыОжидания = Новый Структура;
		структураОветаПослеЗакрытияФормыОжидания.Вставить("Результат", false);
		структураОветаПослеЗакрытияФормыОжидания.Вставить("НомерИтерации", НомИтерации);		
		ошибкаКраткая = "отмена пользователем";
		ошибкаПолноеОписание = "отмена пользователем";
		структураОветаПослеЗакрытияФормыОжидания.Вставить("ошибкаКраткая", ошибкаКраткая);
		структураОветаПослеЗакрытияФормыОжидания.Вставить("ошибкаПолноеОписание", ошибкаПолноеОписание);		
        Закрыть(структураОветаПослеЗакрытияФормыОжидания);
	иначе
		ПодключитьОбработчикОжидания("ОжиданиеОтветаОтККТ", 1, false);
    КонецЕсли;
КонецПроцедуры // ПередЗакрытиемПродолжение()
