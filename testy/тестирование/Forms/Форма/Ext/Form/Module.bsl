&НаКлиенте
Процедура КомандапечатьЧекаНаККТ(Команда)
	формаДокумента = ОткрытьФормуДокументаИзКоторогоБудетПечататьсяЧек();
	//скорее всего здесь надо вставить ссылку на процедуру обработки результата пеачти чека в модуле документа
   	ОповещениеПриЗавершенииПечатиЧека = Новый ОписаниеОповещения("ЗавершениеПечатиЧека", ЭтотОбъект);
	Если ПечатьЧекаККТКлиент.ПечатьЧекаНаККТВместоВстроеннойВКонфигурацию(
				РеквизитФормыДокумОплКарнтой, ОповещениеПриЗавершенииПечатиЧека, формаДокумента)
	тогда
		Возврат; //
	конецЕсли;
	//   ОповещениеПриЗавершенииПечатиЧека = Новый ОписаниеОповещения("ЗавершениеПечатиЧека", ЭтотОбъект);
	//Если ПечатьЧекаККТКлиент.ПечатьЧекаНаККТВместоВстроеннойВКонфигурацию(
	//			Объект.Ссылка, ОповещениеПриЗавершенииПечатиЧека, ЭтаФорма)
	//тогда
	//	Возврат; //
	//конецЕсли;
	////стандартная обработка печати чека конфигурации
КонецПроцедуры //КомандапечатьЧекаНаККТ

&НаКлиенте
Функция ОткрытьФормуДокументаИзКоторогоБудетПечататьсяЧек()
	ПарамДляФормы = Новый Структура("Ключ", РеквизитФормыДокумОплКарнтой);
	ФормаДокументаИзКоторогоБудетПечатьЧека = ПолучитьФорму("Документ.ОперацияПоПлатежнойКарте.Форма.ФормаДокумента", ПарамДляФормы, ЭтаФорма);
	описаниеПриЗакрытии = Новый ОписаниеОповещения("ПослеЗакртияФормыДокументаИзКоторогоИдетПечатьЧека", ЭтотОбъект);
	ФормаДокументаИзКоторогоБудетПечатьЧека.ОписаниеОповещенияОЗакрытии = описаниеПриЗакрытии;
	ФормаДокументаИзКоторогоБудетПечатьЧека.Открыть();	
	Возврат ФормаДокументаИзКоторогоБудетПечатьЧека;
КонецФункции //ОткрытьФормуДокументаИзКоторогоБудетПечататьсяЧек

&НаКлиенте
процедура ЗавершениеПечатиЧека(РезультатПечатиЧекаНаККТ, ДопПараметры) экспорт
	Сообщить("После открытия формы документ и печати чека");
	//обрбабаываем реузльтат печати чека, запоминаем номер Чека, записываем документ
конецПроцедуры //ЗавершениеПечатиЧека

&НаКлиенте
Процедура ПослеЗакртияФормыДокументаИзКоторогоИдетПечатьЧека(РезультатОткрытияФормыИПечатиЧекаНаККТ, ДопПараметры) экспорт
	Сообщить("После открытия формы документ, печати чека, закрытия формы документы");
КонецПроцедуры //ПослеЗакртияФормыДокументаИзКоторогоИдетПечатьЧека





&НаКлиенте
Процедура КомандаТест1(Команда)
	ОповещениеПриЗавершенииПечатиЧека = Новый ОписаниеОповещения("ЗавершениеПечатиЧека", ЭтотОбъект);
	Если ПечатьЧекаККТКлиент.ПечатьЧекаНаККТ2(РеквизитФормыДокумОплКарнтой, ОповещениеПриЗавершенииПечатиЧека, ЭтаФорма) 
	тогда
		Возврат; //
	конецЕсли;
КонецПроцедуры //КомандаТест1
 
&НаКлиенте
Процедура КомандаОткрытьФормуДокумента(Команда)
	ОткрытьФормуДокументаИзКоторогоБудетПечататьсяЧек();
КонецПроцедуры //КомандаОткрытьФормуДокумента





&НаСервере
Функция ПолучитьРодителяТовара(товар, естьРодитель = истина)
	Если товар.Родитель = Справочники.Номенклатура.ПустаяСсылка() Тогда	
		естьРодитель = ЛОЖЬ;		
		возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецЕсли; 
	естьРодитель = ИСТИНА;
	возврат товар.Родитель;
КонецФункции //ПолучитьРодителяТовара ()

&НаСервере
Функция НомеклатураЯвляетсяУслугой(товар)
	рез = ЛОЖЬ;
	Если товар.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар тогда
		рез = ИСТИНА;
	конецЕсли;
	возврат рез;
КонецФункции //ПолучитьРодителяТовара ()

&НаСервере
функция ПодготовитьМассивТоваровПоДокументу(докумСсылка)
	об = докумСсылка.ПолучитьОбъект();
	списОснованийПлатежа = Новый СписокЗначений;
	типРасчета = "аванс";
	Для Каждого ТекСтрока Из об.РасшифровкаПлатежа Цикл 
		//Если ТипЗнч(ТекСтрока.Заказ) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		текОснованиеПлатежа = "";
		текОснованиеПлатежа = ТекСтрока.ОснованиеПлатежа;
		если СокрЛП(текОснованиеПлатежа) = "" тогда
			текОснованиеПлатежа = ТекСтрока.Заказ;
		конецЕсли;
		Если СокрЛП(текОснованиеПлатежа) = "" тогда
			ПродолжитЬ;
		конецЕсли;
		Если ТипЗнч(текОснованиеПлатежа) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда				
			//полный расчет или оплата кредита
			типРасчета = "оплата кредита";
			Если НачалоДня(ТекСтрока.ОснованиеПлатежа.ДатаДок) = НачалоДня(Объект.ДатаДок) тогда
				типРасчета = "полный расчет";
			конецЕсли;
		конецЕсли;
		Если ТипЗнч(текОснованиеПлатежа) = Тип("ДокументСсылка.ЗаказКлиента") Тогда
			//предоплата
			типРасчета = "предоплата";
		КонецЕсли;				
		списОснованийПлатежа.Добавить(текОснованиеПлатежа, типРасчета);
	КонецЦикла;		
	
	// Подготовка таблицы товаров
	ТаблицаТоваров = Новый Массив();
	всегоОснов = списОснованийПлатежа.Количество();
	если всегоОснов > 0 тогда
		для счОсн = 0 по всегоОснов-1 цикл
			текЭлСписка = списОснованийПлатежа.Получить(счОсн);
			основ = текЭлСписка.Значение;
			основОб = основ.ПолучитьОбъект();
			типРасчета = СокрЛП(текЭлСписка.Представление);
			
			Для каждого стрТов Из основОб.Товары Цикл				
			    НомерСекции = 2;
				Если НЕ НомеклатураЯвляетсяУслугой(стрТов.Номенклатура) тогда
					НомерСекции = 1;
				конецЕсли;
				//добПозицияТовара = стрТов.Номенклатура;
				естьРодительЛок = ИСТИНА;
				добПозицияТовара = ПолучитьРодителяТовара(стрТов.Номенклатура, естьРодительЛок);
				если НЕ естьРодительЛок тогда
					добПозицияТовара = стрТов.Номенклатура;
				конецЕсли;
				СтрокаТаблицыТоваров = Новый СписокЗначений();
				СтрокаТаблицыТоваров.Добавить(СокрЛП(добПозицияТовара));//  1 - товар
				СтрокаТаблицыТоваров.Добавить("");                     //  2 - Штрихкод
				СтрокаТаблицыТоваров.Добавить("");                     //  3 - Артикул
				СтрокаТаблицыТоваров.Добавить(НомерСекции);            //  4 - Номер отдела
				СтрокаТаблицыТоваров.Добавить(стрТов.Цена); 		   //  5 - Цена за позицию без скидки
				СтрокаТаблицыТоваров.Добавить(стрТов.Количество);      //  6 - Количество
				СтрокаТаблицыТоваров.Добавить("");                     //  7 - Наименование скидки/наценки	
				СтрокаТаблицыТоваров.Добавить(0);                      //  8 - Сумма скидки/наценки
				СтрокаТаблицыТоваров.Добавить(0);                      //  9 - Процент скидки/наценки
				СтрокаТаблицыТоваров.Добавить(стрТов.Сумма);  		   // 10 - Сумма позиции со скидкой
				СтрокаТаблицыТоваров.Добавить(0);                      // 11 - Номер налога (1)
				СтрокаТаблицыТоваров.Добавить(0);                      // 12 - Сумма налога (1)
				СтрокаТаблицыТоваров.Добавить(0);                      // 13 - Процент налога (1)
				СтрокаТаблицыТоваров.Добавить(0);                      // 14 - Номер налога (2)
				СтрокаТаблицыТоваров.Добавить(0);                      // 15 - Сумма налога (2)
				СтрокаТаблицыТоваров.Добавить(0);                      // 16 - Процент налога (2)
				СтрокаТаблицыТоваров.Добавить(типРасчета);             // 17 - Наименование секции форматирования товарной строки
		
				ТаблицаТоваров.Добавить(СтрокаТаблицыТоваров);								
			КонецЦикла; 
		конецЦикла;
	иначе
		СтрокаТаблицыТоваров = Новый СписокЗначений();
		ПринятоОт = ОбщегоНазначенияУТВызовСервера.ЗначениеРеквизитаОбъекта(об.Контрагент, "НаименованиеПолное");
		СтрокаТаблицыТоваров.Добавить(НСтр("ru = 'Оплата от:'") + " " + ПринятоОт + Символы.ПС
		+ НСтр("ru = 'Основание:'") + " ");					   //  1 - Наименование
		СтрокаТаблицыТоваров.Добавить("");                     //  2 - Штрихкод
		СтрокаТаблицыТоваров.Добавить("");                     //  3 - Артикул
		СтрокаТаблицыТоваров.Добавить(НомерСекции);            //  4 - Номер отдела
		СтрокаТаблицыТоваров.Добавить(об.СуммаДокумента);  //  5 - Цена за позицию без скидки
		СтрокаТаблицыТоваров.Добавить(1);                      //  6 - Количество
		СтрокаТаблицыТоваров.Добавить("");                     //  7 - Наименование скидки/наценки
		СтрокаТаблицыТоваров.Добавить(0);                      //  8 - Сумма скидки/наценки
		СтрокаТаблицыТоваров.Добавить(0);                      //  9 - Процент скидки/наценки
		СтрокаТаблицыТоваров.Добавить(об.СуммаДокумента);  // 10 - Сумма позиции со скидкой
		СтрокаТаблицыТоваров.Добавить(0);                      // 11 - Номер налога (1)
		СтрокаТаблицыТоваров.Добавить(0);                      // 12 - Сумма налога (1)
		СтрокаТаблицыТоваров.Добавить(0);                      // 13 - Процент налога (1)
		СтрокаТаблицыТоваров.Добавить(0);                      // 14 - Номер налога (2)
		СтрокаТаблицыТоваров.Добавить(0);                      // 15 - Сумма налога (2)
		СтрокаТаблицыТоваров.Добавить(0);                      // 16 - Процент налога (2)
		СтрокаТаблицыТоваров.Добавить("аванс");                // 17 - Наименование секции форматирования товарной строки
		ТаблицаТоваров.Добавить(СтрокаТаблицыТоваров);				
	конецЕсли;	
	
	возврат ТаблицаТоваров;
конецФункции //ПодготовитьМассивТоваровПоДокументу

