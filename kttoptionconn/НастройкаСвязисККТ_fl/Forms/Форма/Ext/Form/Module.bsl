&НаКлиенте
Перем COMДрайверККТ10; //COM объект драйвера ККТ Атол 
//&НаКлиенте
//Перем структураНастройкаиСвязиСКТТ; //настройки связи с КТТ
&НаКлиенте
Перем ВыполняетсяЗакрытие;
&НаКлиенте
Перем НомерТика;

&НаСервере
процедура ЗаполнитьПоляФормыНастройкамиККТСервер(структураНастройкаиСвязиСКТТ)
	для Каждого рекв из ЭтаФорма.ПолучитьРеквизиты() цикл
		Если СтрДлина(рекв.Имя) < 9 тогда
			Продолжить;
		конецЕсли;
		текИмяЭлемента = Сред(рекв.Имя, 9);
		элНайден = ЛОЖЬ; текСвойстваНастройки = "";
		для Каждого элНстр из структураНастройкаиСвязиСКТТ цикл
			Если элНстр.Ключ <> текИмяЭлемента тогда продолжить; конецЕсли;
			элНайден = ИСТИНА;
			текСвойстваНастройки = элНстр.Значение;
			Прервать;
		конецЦикла;		
		Если элНайден тогда			
			Если текСвойстваНастройки.Свойство("Значение") тогда
				ЭтаФорма[рекв.Имя] = текСвойстваНастройки.Значение;
			иначе
				ЭтаФорма[рекв.Имя] = текСвойстваНастройки.ЗначПоУмолч;
			конецЕсли;			
		конецЕсли;
	конецЦикла;	
конецПроцедуры //ЗаполнитьПоляФормыНастройкамиККТСервер

&НаСервере
функция ЗаполнитьСтруктуруНастроекИзИнтерфейсаФормыСервер(структураНастройкаиСвязиСКТТ)
	для Каждого рекв из ЭтаФорма.ПолучитьРеквизиты() цикл
		Если СтрДлина(рекв.Имя) < 9 тогда
			Продолжить;
		конецЕсли;		
		текИмяЭлемента = Сред(рекв.Имя, 9);
		элНайден = ЛОЖЬ; текСвойстваНастройки = ""; текЗначение = "";
		для Каждого элНстр из структураНастройкаиСвязиСКТТ цикл
			Если элНстр.Ключ <> текИмяЭлемента тогда продолжить; конецЕсли;
			элНайден = ИСТИНА;
			текЗначение = ЭтаФорма[рекв.Имя];
			текСвойстваНастройки = элНстр.Значение;
			Прервать;
		конецЦикла;		
		Если элНайден тогда
			текСвойстваНастройки.Вставить("Значение", текЗначение);
		конецЕсли;
	конецЦикла;	
	Возврат структураНастройкаиСвязиСКТТ;
конецФункции //ЗаполнитьСтруктуруНастроекИзИнтерфейсаФормыСервер

&НаКлиенте
Процедура СохранитьНастройкиККТМодуль(Команда)
	структураНастройкаиСвязиСКТТ = НастройкиККТСформироватьСтруктуруИзначальную();
	структураНастройкаиСвязиСКТТ = ЗаполнитьСтруктуруНастроекИзИнтерфейсаФормыСервер(структураНастройкаиСвязиСКТТ);
	СохранитьНастройкиККТКлиент(структураНастройкаиСвязиСКТТ);
	//ПечатьЧекаККТСервер.СохранитьНастройкиККТ(СокрЛ(объект.способСвязиСККТ), СокрЛП(объект.IP), объект.номерCOM, 
	//											объект.номерПортаTCP, объект.уровеньОтладки, объект.ИмяКассира, 
	//												объект.флТестовыйРежим, объект.IDWebККТ, объект.ПользовательWEB, 
	//													объект.ПWEB, объект.ЭмулироватьЗадержкуОтветаОтИСМ,
	//														объект.ИммитацияНеПолученияОтветаОтЧестногоЗнака,
	//															объект.МаксимальноеКолПопытокПроверкиМарки,
	//																объект.неЗакрыватьСоедиениеВОднойТранзакцииПечатиЧека);
КонецПроцедуры //СохранитьНастройкиККТМодуль

&НаКлиенте
Процедура ПрочитатьНастройкиККТМодуль(Команда)	
	//об = РеквизитФормыВЗначение("Объект");
	структураНастройкаиСвязиСКТТ = ПрочитатьНастройкиККТКлиент();
	ЗаполнитьПоляФормыНастройкамиККТСервер(структураНастройкаиСвязиСКТТ);
КонецПроцедуры //ПрочитатьНастройкиККТМодуль

&НаКлиенте
Процедура ТестСвязиСККТМодуль(Команда)       
	Элементы.надписьРезультатТестаСвязиСККТ.Заголовок = "OK";
	описаниеОшибки = ""; КодОшибки = 0;
	структураНастройкаиСвязиСКТТ = НастройкиККТСформироватьСтруктуруИзначальную();
	структураНастройкаиСвязиСКТТ = ЗаполнитьСтруктуруНастроекИзИнтерфейсаФормыСервер(структураНастройкаиСвязиСКТТ);
	рез = ТестСвязиСККТКлиент(COMДрайверККТ10, структураНастройкаиСвязиСКТТ, описаниеОшибки, КодОшибки);
	если НЕ рез тогда
		Элементы.надписьРезультатТестаСвязиСККТ.Заголовок = описаниеОшибки + " ("+ СокрЛП(КодОшибки) + ")";
	конецЕсли;
КонецПроцедуры //ТестСвязиСККТМодуль

//ПРЕДОПРЕДЕЛННЫЕ

&НаКлиенте
Процедура ПриОткрытии(Отказ)	
	//Сообщить(Объект.РеквизитОбъектаИмяОбработки);
	РеквизитПосылатьКомандуНаККТПослеФормированияJSON = Истина;
	ВыполняетсяЗакрытие = ЛОЖЬ;
	COMДрайверККТ10 = Неопределено;
	ПрочитатьНастройкиККТМодуль("");
	
	//Если НастройкиККТПустые() тогда
	//	//загрузим текущие настройки из ККТ
	//	объект.МаксимальноеКолПопытокПроверкиМарки = 3;
	//	объект.уровеньОтладки = 0;
	//	описаниеОшибки = "";
	//	ПечатьЧекаККТКлиПолучитьОбъектДрайвера10(COMДрайверККТ10, объект.уровеньОтладки, объект.флТестовыйРежим, описаниеОшибки);
	//	Если описаниеОшибки <> "" тогда                          
	//		Элементы.надписьРезультатТестаСвязиСККТ.Заголовок = описаниеОшибки;
	//		Элементы.надписьРезультатВыполненияКомманд.Заголовок = описаниеОшибки;
	//	иначе                                     
	//		КомандаПрочитатьНастройкиСвязиИзДрайвера("");
	//	конецЕсли;               
	//конецЕсли;    
	//0104815871762904212whMEx4HAxCDi91000592L3jUsetyRCh1DgCz5oqvLA6kP7WG75YzsNn55cEP8Wzj
	//МаркаПример1 = "0104650117240163210000000005NgF91002492UjpfAmDNE6RSpelcVxvtPJHHGl/8ULzQjPZINB8Z/WYPUYMdl7DEReHPNz1tlwqu8pwItLitR85b/XnOERdyuQ==";
	//МаркаПример2 = "0104640016748273210jEn%)BNBbg0A91FFD092dGVzdGgHX5Qr3M0IvhwgfrEXsU++ClPXRZdBxYj+SEA=";
	МаркаПример1 = "0104815871762904212whMEx4HAxCDi91000592L3jUsetyRCh1DgCz5oqvLA6kP7WG75YzsNn55cEP8Wzj";
	МаркаПример2 = "";	
КонецПроцедуры

&НаКлиенте
Процедура ПолеСпособСвзяиККТНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	структураНастройкаиСвязиСКТТ = НастройкиККТСформироватьСтруктуруИзначальную();	
	Список = Новый СписокЗначений;
	для Каждого эл из структураНастройкаиСвязиСКТТ.ТипСвязи.СписокЗначений цикл
		Список.Добавить(эл.Значение);
	конецЦикла;
	РеквизитТипСвязи=ВыбратьИзСписка(Список,
							Элементы.ПолеТипСвязи);
КонецПроцедуры //ПолеСпособСвзяиККТНачалоВыбора

&НаКлиенте
функция ДобавитьВМассивИзменение(было, стало, описание, массивИзменений)
	настройкиБылиИзменены = ЛОЖЬ;
	Если стало <> Неопределено тогда
		Если было <> стало тогда
			настройкиБылиИзменены = ИСТИНА;          
		конецЕсли;                         
	иначеЕсли было <> "" тогда  
		настройкиБылиИзменены = ИСТИНА;              
	конецЕсли;	                 
	Если настройкиБылиИзменены тогда
		измененияСтрук = Новый Структура;                 
		измененияСтрук.Вставить("Изменена", Истина);
		измененияСтрук.Вставить("Наименование", описание);
		измененияСтрук.Вставить("Было", было);
		измененияСтрук.Вставить("Стало", стало);
		массивИзменений.Добавить(измененияСтрук);
	конецЕсли;
конецФункции //ДобавитьВМассивИзменение

функция ПолучитьСтрокуИзмененияНастроек(измененныеНастройкиМассив)
	рез = ""; допСимвЗап = "";
	для каждого настр из измененныеНастройкиМассив цикл
		Если СокрЛП(рез) <> "" тогда
			допСимвЗап = ", ";
		конецЕсли;
		Если настр.Изменена тогда
			наимНастрокйи = настр.Наименование;
			ЗначениеБыло  = настр.Было;
			ЗначениеСтало = настр.Стало;
			рез = рез + допСимвЗап + наимНастрокйи + " с " + ЗначениеБыло + " на " + ЗначениеСтало;
		конецЕсли;
	конецЦикла;
	Возврат рез;
конецФункции //ПолучитьСтрокуИзмененияНастроек

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	//Вставить содержимое обработчика
	изменныеНастройки = "";  
	массивИзменений = Новый Массив;
	try                     
		//настройкиБылиИзменены = ЛОЖЬ;                 
		//запДоб = "";              		
		//рез = ПрочитатьНастройкиККТ(объект.ИмяПользователя, ЛОЖЬ);
		структураНастройкаиСвязиСКТТБыло  = ПрочитатьНастройкиККТКлиент();
		структураНастройкаиСвязиСКТТСтало = НастройкиККТСформироватьСтруктуруИзначальную();
		структураНастройкаиСвязиСКТТСтало = ЗаполнитьСтруктуруНастроекИзИнтерфейсаФормыСервер(структураНастройкаиСвязиСКТТСтало);
		для Каждого элСтало из структураНастройкаиСвязиСКТТСтало цикл
			СтруктутурОднойНастройки = "";
			структураНастройкаиСвязиСКТТБыло.Свойство(элСтало.Ключ, СтруктутурОднойНастройки);
			ДобавитьВМассивИзменение(ПолучитьЗначениеНастройки(структураНастройкаиСвязиСКТТБыло, элСтало.Ключ), 
									 ПолучитьЗначениеНастройки(структураНастройкаиСвязиСКТТСтало, элСтало.Ключ), 
									 СтруктутурОднойНастройки.Описание, массивИзменений);
		конецЦикла;	
				
		строкаИзмененияНастроек = ПолучитьСтрокуИзмененияНастроек(массивИзменений);
		//Если (настройкиБылиИзменены) и (НЕ ВыполняетсяЗакрытие) тогда
		Если (строкаИзмененияНастроек <> "") и (НЕ ВыполняетсяЗакрытие) тогда			
    		Отказ=Истина;
			//ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), 
			//			"Настройки были изменены("+СокрЛП(изменныеНастройки)+"). Сохранить настройки?", РежимДиалогаВопрос.ДаНетОтмена, 
			//				200, КодВозвратаДиалога.Нет, изменныеНастройки);
			ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), 
						"Настройки были изменены("+СокрЛП(строкаИзмененияНастроек)+"). Сохранить настройки?", РежимДиалогаВопрос.ДаНетОтмена,
							200, КодВозвратаДиалога.Нет, "Сохранить настройки связи с ККТ?", КодВозвратаДиалога.Отмена);			
		конецЕсли;
	except 
		Отказ=ложь;                          
		стрОшибки = ОписаниеОшибки();
		Сообщить(стрОшибки);
		//ЗаписьЖурналаРегистрации("Ошибка при закрытии формы настроек связи ККТ",,,,стрОшибки);
	endtry;
КонецПроцедуры //ПередЗакрытием

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ПараметрыЗаписи) Экспорт        
	ОтменитьЗакрытиеФормы = ЛОЖЬ;
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СохранитьНастройкиККТМодуль("");                     
	иначеЕсли РезультатВопроса = КодВозвратаДиалога.Отмена тогда
		ОтменитьЗакрытиеФормы = ИСТИНА;
	КонецЕсли;   
	Если НЕ ОтменитьЗакрытиеФормы тогда
		ВыполняетсяЗакрытие = Истина;
		Закрыть();	
	конецЕсли;
КонецПроцедуры //ПередЗакрытиемЗавершение

&НаКлиенте
Процедура ПолеУровеньОтладкиНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
	Список = Новый СписокЗначений;
	Список.Добавить("0", "ERRORS");
	Список.Добавить("1", "INFO");
	Список.Добавить("2", "DEBUG");
	Список.Добавить("3", "HIDEBUG");
		
	резВыборы=ВыбратьИзСписка(Список,
							Элементы.ПолеУровеньОтладки);	
	РеквизитУровеньОтладки = резВыборы.Значение;
КонецПроцедуры //ПолеУровеньОтладкиНачалоВыбора

&НаКлиенте
Процедура КомандаXОтчет(Команда)                                
	Элементы.надписьРезультатВыполненияКомманд.Заголовок = "OK";      
	Кассир = РеквизитИмяКассира;
	Если СокрЛП(Кассир) = "" тогда
		Кассир = СокрЛП(ИмяПользователя());
	конецЕсли;
	исходящийJSON = СформироватьJSONXОтчета(Кассир, РеквизитУровеньОтладки);
	Если РеквизитПосылатьКомандуНаККТПослеФормированияJSON тогда          
		КомандаПроверитьJSON("");                           
		Если Элементы.надписьРезультатВыполненияКомманд.Заголовок = "OK" тогда
			КомандаОтправитьJSON("");	
		конецЕсли;
	конецЕсли;
КонецПроцедуры //КомандаXОтчет

&НаКлиенте
Процедура КомандаОтправитьJSON(Команда)  
	Элементы.надписьРезультатВыполненияКомманд.Заголовок = "OK";
	ответJSON = "";                                                                             
	описаниеОшибки = ""; КодОшибки = 0;
	структураНастройкаиСвязиСКТТ = НастройкиККТСформироватьСтруктуруИзначальную();
	структураНастройкаиСвязиСКТТ = ЗаполнитьСтруктуруНастроекИзИнтерфейсаФормыСервер(структураНастройкаиСвязиСКТТ);
	рез = ВыполнитьЗаданиеJSON(COMДрайверККТ10, структураНастройкаиСвязиСКТТ, исходящийJSON, ответJSON,
													описаниеОшибки, КодОшибки);		                
	если не рез тогда
		Элементы.надписьРезультатВыполненияКомманд.Заголовок = описаниеОшибки + "("+СокрЛП(КодОшибки) + ")";
		Возврат;				
	конецЕсли;          
	входящийJSON = ответJSON;
КонецПроцедуры //КомандаОтправитьJSON

&НаКлиенте
Процедура КомандаПроверитьJSON(Команда)
	Элементы.надписьРезультатВыполненияКомманд.Заголовок = "OK";
	описаниеОшибки = ""; КодОшибки = 0;
	рез = ПроверитьКорректностьJSON(COMДрайверККТ10, исходящийJSON, РеквизитУровеньОтладки, РеквизитФлТестовыйРежим, описаниеОшибки, КодОшибки);
	Если рез тогда
		Возврат;
	конецЕсли;
	Если Найти(описаниеОшибки, "validateTask") > 0 тогда
		Возврат;
	конецЕсли;
	Элементы.надписьРезультатВыполненияКомманд.Заголовок = описаниеОшибки + "("+СокрЛП(КодОшибки) + ")";
КонецПроцедуры //КомандаПроверитьJSON

&НаКлиенте
Процедура КомандаОтменитьЧек(Команда)
	Элементы.надписьРезультатВыполненияКомманд.Заголовок = "OK";
	//исходящийJSON = СформироватьJSONОтменыЧека(РеквизитУровеньОтладки);
	описаниеОшибки = ""; КодОшибки = 0;
	структураНастройкаиСвязиСКТТ = НастройкиККТСформироватьСтруктуруИзначальную();
	структураНастройкаиСвязиСКТТ = ЗаполнитьСтруктуруНастроекИзИнтерфейсаФормыСервер(структураНастройкаиСвязиСКТТ);
	рез = ОтменитьЧек(COMДрайверККТ10, структураНастройкаиСвязиСКТТ, описаниеОшибки, КодОшибки);
	если не рез тогда
		Элементы.надписьРезультатВыполненияКомманд.Заголовок = описаниеОшибки + "("+СокрЛП(КодОшибки) + ")";
	конецЕсли;          
КонецПроцедуры //КомандаОтменитьЧек

&НаКлиенте
Процедура ОтбитьЧекНаРубль(Команда)                  	
	Элементы.надписьРезультатВыполненияКомманд.Заголовок = "OK";
	ЭтоЧекВозрата = ЛОЖЬ;
	Если Найти(ВРЕГ(СокрЛП(Команда)), ВРЕГ("Возврат")) > 0 тогда
		ЭтоЧекВозрата = ИСТИНА;
	конецЕсли;	                      
	полнСтруктЧека = СформироватьСтруктуруТестовогоЧека(ЭтоЧекВозрата, ЛОЖЬ);
	
	КодОшибки = 0; описаниеОшибки = "";
	ОповещениеПослеПечатиЧека = Новый ОписаниеОповещения("ПослеПечатиЧекаНаККТ", ЭтотОбъект, полнСтруктЧека);
	структураНастройкаиСвязиСКТТ = НастройкиККТСформироватьСтруктуруИзначальную();
	структураНастройкаиСвязиСКТТ = ЗаполнитьСтруктуруНастроекИзИнтерфейсаФормыСервер(структураНастройкаиСвязиСКТТ);
	ПечатьЧекаНаККТ(ЭтаФорма, полнСтруктЧека.списПараметровЧека, полнСтруктЧека.массивЧека, структураНастройкаиСвязиСКТТ, 
										ОповещениеПослеПечатиЧека, COMДрайверККТ10);		
КонецПроцедуры //ОтбитьЧекНаРубль                                  

&НаКлиенте
Процедура ВернутьЧекНаРубль(Команда)
	ОтбитьЧекНаРубль("Возврат");
КонецПроцедуры //ВернутьЧекНаРубль

&НаКлиенте
процедура ПослеПечатиЧекаНаККТ(результатПечатиЧека, ДопПараметры) экспорт
	структураНастройкаиСвязиСКТТ = НастройкиККТСформироватьСтруктуруИзначальную();
	структураНастройкаиСвязиСКТТ = ЗаполнитьСтруктуруНастроекИзИнтерфейсаФормыСервер(структураНастройкаиСвязиСКТТ);
	Если результатПечатиЧека.Свойство("COMДрайверККТ10") тогда
		COMДрайверККТ10 = результатПечатиЧека.COMДрайверККТ10;
	конецЕсли;	
	Если НЕ результатПечатиЧека.Результат тогда
		стрСообщиенияОшибки = "не напечатан по причине: " + результатПечатиЧека.описаниеОшибки + "("+СокрЛП(результатПечатиЧека.КодОшибки) + ")";
		Элементы.надписьРезультатВыполненияКомманд.Заголовок = стрСообщиенияОшибки;
		
		//Если структураНастройкаиСвязиСКТТ.уровеньОтладки>=1 тогда
		стр = Новый Структура;
		текстДок_чека = Новый ТекстовыйДокумент;		
		текстДок_чека.ДобавитьСтроку(ДопПараметры.списПараметровЧека);
		полнПутьКФайлу = ПолучитьДиректориюЛогФайлов() + "check_sl_struktura.txt";
		текстДок_чека.Записать(полнПутьКФайлу);
		текстДок_позиции_чека = Новый ТекстовыйДокумент;		
		текстДок_позиции_чека.ДобавитьСтроку(ДопПараметры.массивЧека);
		полнПутьКФайлу = ПолучитьДиректориюЛогФайлов() + "check_sl_positions.txt";
		текстДок_позиции_чека.Записать(полнПутьКФайлу);		
		текстДок_json_чека =Новый ТекстовыйДокумент;		
		текстДок_request =Новый ТекстовыйДокумент;		
		текстДок_answer =Новый ТекстовыйДокумент;		
		текстДок_full =Новый ТекстовыйДокумент;
		текстДок_error =Новый ТекстовыйДокумент;                         
		текстДок_full.ДобавитьСтроку(стрСообщиенияОшибки);
		текстДок_error.ДобавитьСтроку(стрСообщиенияОшибки);
		полнПутьКФайлу = ПолучитьДиректориюЛогФайлов() + "jsons_sl_error.txt";
		текстДок_error.Записать(полнПутьКФайлу);		
		Если результатПечатиЧека.Свойство("JSONЗапрос") тогда
			текстДок_full.ДобавитьСтроку(результатПечатиЧека.JSONЗапрос);
			текстДок_request.ДобавитьСтроку(результатПечатиЧека.JSONЗапрос);
			полнПутьКФайлу = ПолучитьДиректориюЛогФайлов() + "jsons_sl_request.txt";
			текстДок_request.Записать(полнПутьКФайлу);   
			исходящийJSON = результатПечатиЧека.JSONЗапрос;
		конецЕсли;                            		       
		Если НЕ результатПечатиЧека.Свойство("JSONЧека") тогда
			РеквизитЧекJSON = СформироватьJSONЧека(ДопПараметры.списПараметровЧека, ДопПараметры.массивЧека);
		иначе
			РеквизитЧекJSON = результатПечатиЧека.JSONЧека;
		конецЕсли;
		//Если результатПечатиЧека.Свойство("JSONЧека") тогда
			текстДок_json_чека.ДобавитьСтроку(РеквизитЧекJSON);
			текстДок_full.ДобавитьСтроку(РеквизитЧекJSON);     
			полнПутьКФайлу = ПолучитьДиректориюЛогФайлов() + "jsons_sl_check.txt";
			текстДок_json_чека.Записать(полнПутьКФайлу);
		//конецЕсли;                            
		Если результатПечатиЧека.Свойство("ответJSON") тогда
			текстДок_full.ДобавитьСтроку(результатПечатиЧека.ответJSON);
			текстДок_answer.ДобавитьСтроку(результатПечатиЧека.ответJSON);
			полнПутьКФайлу = ПолучитьДиректориюЛогФайлов() + "jsons_sl_answer.txt";
			текстДок_answer.Записать(полнПутьКФайлу);
			входящийJSON = результатПечатиЧека.ответJSON;
		конецЕсли;
		полнПутьКФайлу = ПолучитьДиректориюЛогФайлов() + "jsons_sl_full_error.txt";
		Если текстДок_full.КоличествоСтрок() > 0 тогда
			текстДок_full.Записать(полнПутьКФайлу);
		конецЕсли;
	иначе
		Элементы.надписьРезультатВыполненияКомманд.Заголовок = "OK. Номер чека = " + СокрЛП(результатПечатиЧека.НомерЧека);	
		Если результатПечатиЧека.Свойство("JSONЧека") тогда
			исходящийJSON = результатПечатиЧека.JSONЧека;
		конецЕсли;
		Если результатПечатиЧека.Свойство("ответJSON") тогда
			входящийJSON = результатПечатиЧека.ответJSON;
		конецЕсли;
		
		Если результатПечатиЧека.Свойство("JSONЧека") тогда
			РеквизитЧекJSON = результатПечатиЧека.JSONЧека;
		конецЕсли;		
		Если ПолучитьЗначениеНастройки(структураНастройкаиСвязиСКТТ, "УровеньОтладки") >= 2 тогда
			текстДок =Новый ТекстовыйДокумент;             
			Если результатПечатиЧека.Свойство("JSONЧека") тогда
				текстДок.ДобавитьСтроку(результатПечатиЧека.JSONЧека);
			конецЕсли;
			Если результатПечатиЧека.Свойство("ответJSON") тогда
				текстДок.ДобавитьСтроку(результатПечатиЧека.ответJSON);
			конецЕсли;
			полнПутьКФайлу = ПолучитьДиректориюЛогФайлов() + "jsons_sl_right.txt";
			Если текстДок.КоличествоСтрок() > 0 тогда
				текстДок.Записать(полнПутьКФайлу);					    
			конецЕсли;
		конецЕсли;                                               		
	конецЕсли;
конецПроцедуры //ПослеПечатиЧекаНаККТ

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
процедура ОчиститьНастройкиККТ(Команда)     
    структураНастройкаиСвязиСКТТ = НастройкиККТСформироватьСтруктуруИзначальную();	
	ЗаполнитьПоляФормыНастройкамиККТСервер(структураНастройкаиСвязиСКТТ);
конецПроцедуры //ОчиститьНастройкиККТ

&НаКлиенте
Процедура КомандаОткрытьПапкуЛогФайлов(Команда)              
	дирАтолЛогов = "";
	дир = ПолучитьДиректориюЛогФайлов(дирАтолЛогов);            
	try
		КопироватьФайл(дирАтолЛогов+"fptr10.log", дир+"fptr10.log");
	except
		Если РеквизитУровеньОтладки >=2 тогда
			Сообщить(ОписаниеОшибки());
		конецЕсли;
	endtry;
	КомандаСистемы("start " + дир);
КонецПроцедуры //КомандаОткрытьПапкуЛогФайлов

&НаКлиенте
Процедура КомандаЗалогироватьОпреацию(Команда)
	ЗалогироватьОпреацию(0, "тестовая,ручная", 3, ЛОЖЬ, -1, "какая-то тестовая ошибка");	
КонецПроцедуры //КомандаЗалогироватьОпреацию

&НаКлиенте
Процедура КомандаВывестиМакетЧека(Команда)
	ПоказатьПечатнуюформуЧека();
	т = Новый ТекстовыйДокумент;
	РеквизитВыводЧека = "<html><head>
 		|<meta http-equiv=""Content-Type"" content=""text/html; charset=utf-8"">
		|<link rel=""stylesheet"" type=""text/css"" href=""__STYLE__"">
		|<base href=""v8config://3cf8a157-8bc7-46fd-8b86-32b5007a5065/mdobject/id839e2a71-ec25-46a9-aa7e-0867d4e09809/8eb4fad1-1fa6-403e-970f-2c12dbb43e23"">
		|</head>  
		|<style> table {border: 1px solid grey;} 
		|th {outine: 1px solid gray;}
		|td {border: 1px solid gray;} 
		|tr.pos {outline: auto;}
		|.pos td {border-top: thin solid black;}
		|.pos td {border-bottom: 0 solid black;}
		|.posdop td {border-top: 0 solid black;}
		|.posdop td {border-bottom: 0 solid black;}
		|.posmark td {border-top: 0 solid black;}
		|.posdop td {font-size: 10px;}
		|.posmark td {font-size: 8px;}
		|</style>
		|<body>";                                                                           
	Если СокрЛП(исходящийJSON) <> "" тогда
		чекСтрИзJSON = ПолучитьСтруктуруИЗJSON(исходящийJSON);
	иначе
		Возврат;
	конецЕсли;     	
	РеквизитВыводЧека = РеквизитВыводЧека + "<p>" + ПолучитьПереводТипаЧека(СокрЛП(чекСтрИзJSON.type)) + "</p>";
	РеквизитВыводЧека = РеквизитВыводЧека + "<p>" + "Кассир: " + СокрЛП(чекСтрИзJSON.operator.name) + "</p>"; 
	РеквизитВыводЧека = РеквизитВыводЧека + "
		|<table><tr><th>Товар</th><th>Количество</th><th>Цена</th><th>Сумма</th></tr>";
	текНомПоз = 0;
	суммаИтогоЧека = 0;
	Для Каждого поз из чекСтрИзJSON.items цикл
		Если текНомПоз = 0 тогда  
			текНомПоз = текНомПоз + 1;
			Продолжить;
		конецЕсли;
		суммаИтогоЧека = суммаИтогоЧека + поз.quantity*поз.price;
		РеквизитВыводЧека = РеквизитВыводЧека + "<tr class=""pos"">";
		РеквизитВыводЧека = РеквизитВыводЧека + "<td>" + поз.name + "</td>";
		РеквизитВыводЧека = РеквизитВыводЧека + "<td>" + поз.quantity + "</td>";
		РеквизитВыводЧека = РеквизитВыводЧека + "<td>" + поз.price + "</td>";
		РеквизитВыводЧека = РеквизитВыводЧека + "<td>" + поз.amount + "</td>";
		РеквизитВыводЧека = РеквизитВыводЧека + "</tr>";                    
		РеквизитВыводЧека = РеквизитВыводЧека + "<tr class=""posdop"">";                            
		//стрДопИнформ = ПолучитьПереводНДС(поз.tax.type) + " " + ПолучитьПереводСпособаРасчета(поз.paymentMethod) + " " + ПолучитьБуквуМИзРезультатаПроверки(поз.imcParams.itemInfoCheckResult);
		стрДопИнформ = ПолучитьПереводНДС(поз.tax.type) + " " + ПолучитьПереводСпособаРасчета(поз.paymentMethod);
		Если поз.Свойство("imcParams") тогда
			Если поз.imcParams.Свойство("itemInfoCheckResult") тогда
				стрДопИнформ = стрДопИнформ + " " + ПолучитьБуквуМИзРезультатаПроверки(поз.imcParams.itemInfoCheckResult);
			иначе
				стрДопИнформ = стрДопИнформ + " " + "[M?]";
			конецЕсли;
		конецЕсли;		
		РеквизитВыводЧека = РеквизитВыводЧека + "<td colspan=""4"">" + стрДопИнформ + "</td>";
		//РеквизитВыводЧека = РеквизитВыводЧека + "<td>" + поз.paymentMethod + "</td>";
		//РеквизитВыводЧека = РеквизитВыводЧека + "<td>" + "[M+]" + "</td>";		
		//РеквизитВыводЧека = РеквизитВыводЧека + "</tr>";
		Если поз.Свойство("imcParams") тогда
			Если поз.imcParams.Свойство("imc") тогда
				РеквизитВыводЧека = РеквизитВыводЧека + "<tr class=""posmark"">"; 
				РеквизитВыводЧека = РеквизитВыводЧека + "<td colspan=""4"">" + поз.imcParams.imc + "</td>";
				РеквизитВыводЧека = РеквизитВыводЧека + "</tr>";
			конецЕсли;
		конецЕсли;
		текНомПоз = текНомПоз + 1;
	конецЦикла;                                                                                     
	РеквизитВыводЧека = РеквизитВыводЧека + "<tr class=""itog"">";                            
	РеквизитВыводЧека = РеквизитВыводЧека + "<td colspan=""3"" style=""text-align:right"">ИТОГО:</td>";
	РеквизитВыводЧека = РеквизитВыводЧека + "<td>" + СокрЛП(суммаИтогоЧека) + "</td>";
	РеквизитВыводЧека = РеквизитВыводЧека + "</tr>";
	РеквизитВыводЧека = РеквизитВыводЧека + "</table>";
	
	текНомПоз = 0;
	для Каждого оплата из чекСтрИзJSON.payments цикл
		Если текНомПоз = 0 тогда  
			текНомПоз = текНомПоз + 1;
			Продолжить;
		конецЕсли;		
		строкаОплаты = ВРЕГ(ПеревестиТипОплаты(оплата.type)) + ": " + СокрЛП(оплата.sum);
		РеквизитВыводЧека = РеквизитВыводЧека + "<p>" + строкаОплаты + "</p>";	
		текНомПоз = текНомПоз + 1;
	конецЦикла;
	РеквизитВыводЧека  = РеквизитВыводЧека + "
		|</body></html>";       
	т.ДобавитьСтроку(РеквизитВыводЧека);
	//т.Записать("c:\share\check.html");
КонецПроцедуры //КомандаВывестиМакетЧека

&НаКлиенте                                                         
функция СформироватьСтруктуруТестовогоЧека(ЭтоЧекВозрата, ДобавлятьМакри, ЭтоПлатеж = ЛОЖЬ)
	резСтрук = Новый Структура;
	списПараметровЧека = Новый Структура;
	списПараметровЧека.Вставить("Наличными", 1);
	списПараметровЧека.Вставить("Безналичными", 1);
	списПараметровЧека.Вставить("ЗачетАванса", 0);
	списПараметровЧека.Вставить("Кассир", "Фамилия ИО");
	списПараметровЧека.Вставить("ЭтоЧекВозврата", ЭтоЧекВозрата);
	Если РеквизитСНО <> "" тогда
		списПараметровЧека.Вставить("СНО", РеквизитСНО);
	конецЕсли;
	массивЧека = Новый Массив;                  
	массивЧека.Добавить(Новый Структура);
	списПараметровПозиции = массивЧека[0];
	списПараметровПозиции.Вставить("Товар", "Тестовый товар 1");
	списПараметровПозиции.Вставить("Цена", 1);
	списПараметровПозиции.Вставить("Количество", 1);
	списПараметровПозиции.Вставить("ПредметРасчета", "Платеж");
	списПараметровПозиции.Вставить("ПризнакРасчета", "Аванс");			
	Если РеквизитНомерОтдела > 0 тогда
		списПараметровПозиции.Вставить("НомерСекции", РеквизитНомерОтдела);
	конецЕсли;
	Если Не ЭтоПлатеж тогда
		списПараметровПозиции.Вставить("ПредметРасчета", "Товар");
		списПараметровПозиции.Вставить("ПризнакРасчета", "Полный рачет");
		Если ДобавлятьМакри тогда 
			списПараметровПозиции.Вставить("марка", МаркаПример1);
		конецЕсли;		
	конецЕсли;
	
	Если СокрЛП(МаркаПример2) = "" тогда
		списПараметровЧека.Вставить("Безналичными", 0);
		резСтрук.Вставить("списПараметровЧека", списПараметровЧека);
		резСтрук.Вставить("массивЧека", массивЧека);		
		Возврат резСтрук;
	конецЕсли;
	//списПараметровЧека.Вставить("imcCheckFlag", "");
	//списПараметровЧека.Вставить("imcCheckResult", "");
	//списПараметровЧека.Вставить("imcStatusInfo", "");
	//списПараметровЧека.Вставить("imcEstimatedStatusCorrect", "");
	
	массивЧека.Добавить(Новый Структура);
	списПараметровПозиции = массивЧека[1];
	списПараметровПозиции.Вставить("Товар", "Тестовый товар 2");
	списПараметровПозиции.Вставить("Цена", 1);
	списПараметровПозиции.Вставить("Количество", 1);
	списПараметровПозиции.Вставить("ПредметРасчета", "Платеж");
	списПараметровПозиции.Вставить("ПризнакРасчета", "Аванс");				
	Если Не ЭтоПлатеж тогда
		списПараметровПозиции.Вставить("ПредметРасчета", "Товар");
		списПараметровПозиции.Вставить("ПризнакРасчета", "Полный рачет");
		Если ДобавлятьМакри тогда 
			списПараметровПозиции.Вставить("марка", МаркаПример2);	
		конецЕсли;                               
	конецЕсли;
	резСтрук.Вставить("списПараметровЧека", списПараметровЧека);
	резСтрук.Вставить("массивЧека", массивЧека);
	Возврат резСтрук;
конецФункции //СформироватьСтруктуруТестовогоЧека

&НаКлиенте                                                         
процедура ПоказатьПечатнуюформуЧека()
	Если СокрЛП(РеквизитЧекJSON) <> "" тогда
		чекСтруктураИзJSONЗадание = ПолучитьСтруктуруИЗJSON(РеквизитЧекJSON);		
	иначеЕсли СокрЛП(исходящийJSON) <> "" тогда
		чекСтруктураИзJSONЗадание = ПолучитьСтруктуруИЗJSON(исходящийJSON);
	иначе
		Возврат;
	конецЕсли;   
	ответСтруктураИзJSON = ПолучитьСтруктуруИЗJSON(входящийJSON);
	НазваниеФирмы = ПолучитьНазваниеФирмы();
	всеПараметрыЧека = ПреобразоватьВЧитабельныйВидСтрктуруЧека(НазваниеФирмы, "", 
												чекСтруктураИзJSONЗадание, ответСтруктураИзJSON);
	печФормаЧека = Новый ТабличныйДокумент;
	//чекСтрИзJSON.type = ПолучитьПереводТипаЧека(СокрЛП(чекСтрИзJSON.type));
	//Для Каждого поз из чекСтрИзJSON.items цикл	
	//	Если поз.Свойство("imcParams") тогда
	//		Если поз.imcParams.Свойство("imc") тогда				
	//			поз.imcParams.imc = ПеревестиМаркуИзBASE64(СокрЛП(поз.imcParams.imc), true);
	//		конецЕсли;
	//	конецЕсли;
	//конецЦикла;	
	Печать(печФормаЧека, всеПараметрыЧека);
	печФормаЧека.Показать("Просмотр чека");
	//ПечатьЧекаККТСервер.Печать(РеквизитПечатнаяФормаЧека, всеПараметрыЧека);
	//РеквизитПечатнаяФормаЧека.Показать("Печатня форма чека");
конецПроцедуры //ПоказатьПечатнуюформуЧека 

#КонецОбласти

#Область ОжиданиеОтветаКомандАсинх

&НаКлиенте
Процедура ОнТик() экспорт  
	НомерТика = НомерТика + 1;
	Элементы.ДекорацияСостояние.Заголовок = СокрЛП(НомерТика);
	Сообщить("номер тика="+СокрЛП(СокрЛП(НомерТика)));
конецПроцедуры //ОнТик

&НаКлиенте
Процедура КомандаЗапуститьЗдание(Команда)
	// Вставить содержимое обработчика.
	НомерТика = 0;
	Элементы.ДекорацияСостояние.Заголовок = СокрЛП(НомерТика);
	ПодключитьОбработчикОжидания("ОнТик", 1, false);
КонецПроцедуры //КомандаЗапуститьЗдание

&НаКлиенте
Процедура КомандаОткрытьФормуОжиданияОтветаОтККТ(Команда)
	ВыполнитьЗаданиеJSONАсинх(ЭтаФорма, "", "", "");
КонецПроцедуры //КомандаОткрытьФормуОжиданияОтветаОтККТ

#КонецОбласти

#Область WEB_сервер_атол

//документация по API
//https://app.swaggerhub.com/apis-docs/atol-dev/fptr-web-requests/1.0.1.0
&НаКлиенте
Процедура КомандаТестСвязиССреверомАтол(Команда)
	Соединение = Новый HTTPСоединение("localhost", 16732);
	запрос = Новый HTTPЗапрос("/api/v2/settings");
	запрос.Заголовки.Вставить("Accept", "application/json");
	запрос.Заголовки.Вставить("Authorization", "Basic YWRtaW46QWRtaW4wMTIzNDU2Nzg5");
	рез = Соединение.Получить(запрос);
	Сообщить("Нам вернули код: " + рез.КодСостояния);
	Сообщить("Тело результата: " + рез.ПолучитьТелоКакСтроку());
КонецПроцедуры //КомандаТестСвязиССреверомАтол

&НаКлиенте
Процедура КомандаПроверкаАтвторизацииНаWebАтол(Команда)
	Соединение = Новый HTTPСоединение("localhost", 16732);
	запрос = Новый HTTPЗапрос("/api/v2/devices");
	запрос.Заголовки.Вставить("Accept", "application/json");
	запрос.Заголовки.Вставить("Authorization", "Basic YWRtaW46QWRtaW4wMTIzNDU2Nzg5");
	рез = Соединение.Получить(запрос);
	Сообщить("Нам вернули код: " + рез.КодСостояния);
	Сообщить("Тело результата: " + рез.ПолучитьТелоКакСтроку());
КонецПроцедуры //КомандаПроверкаАтвторизацииНаWebАтол

&НаКлиенте
Процедура КомандаТестСвязиСWebККТ(Команда)
	//Соединение = Новый HTTPСоединение("localhost", 16732);
	//запрос = Новый HTTPЗапрос("/api/v2/devices");
	//запрос.Заголовки.Вставить("Accept", "application/json");
	//запрос.Заголовки.Вставить("Authorization", "Basic YWRtaW46QWRtaW4wMTIzNDU2Nzg5");
	//запрос.УстановитьТелоИзСтроки("{""code"": 505,""description"": ""unauthorized""}");
	//рез = Соединение.ОтправитьДляОбработки(запрос);
	//Сообщить("Нам вернули код: " + рез.КодСостояния);
	//Сообщить("Тело результата: " + рез.ПолучитьТелоКакСтроку());
	
	Соединение = Новый HTTPСоединение("localhost", 16732);
	запрос = Новый HTTPЗапрос("/api/v2/operations/queryDeviceInfo");
	запрос.Заголовки.Вставить("Accept", "application/json");
	запрос.Заголовки.Вставить("Authorization", "Basic YWRtaW46QWRtaW4wMTIzNDU2Nzg5");
	запрос.УстановитьТелоИзСтроки("");
	рез = Соединение.ОтправитьДляОбработки(запрос);
	Сообщить("Нам вернули код: " + рез.КодСостояния);
	Сообщить("Тело результата: " + рез.ПолучитьТелоКакСтроку());
КонецПроцедуры //КомандаТестСвязиСWebККТ

#КонецОбласти

#Область RabbitMQ

//&НаКлиенте
//Процедура КомандаRabbitMQ(Команда)
//	Соединение = Новый HTTPСоединение("localhost", 15672, "guest", "guest");
//	запрос = Новый HTTPЗапрос("/api/exchanges/%2F/mytestexchange2");
//	//запрос = Новый HTTPЗапрос("/api/exchanges/%2F/tasks");
//	запрос.Заголовки.Вставить("Accept", "application/json");
//	//запрос.Заголовки.Вставить("Authorization", "Basic YWRtaW46QWRtaW4wMTIzNDU2Nzg5");
//	запрос.УстановитьТелоИзСтроки("{""type"":""direct"",""durable"":false}");
//	рез = Соединение.ВызватьHTTPМетод("PUT", запрос);
//	//рез = Соединение.ОтправитьДляОбработки(запрос);
//	Сообщить("Нам вернули код: " + рез.КодСостояния);
//	Сообщить("Тело результата: " + рез.ПолучитьТелоКакСтроку());
//КонецПроцедуры //КомандаRabbitMQ

&НаКлиенте
Процедура КомандаДобавитьОчередь(Команда)
	Соединение = Новый HTTPСоединение("localhost", 15672, "guest", "guest");
	запрос = Новый HTTPЗапрос("/api/queues/%2F/tasks");
	//запрос = Новый HTTPЗапрос("/api/exchanges/%2F/tasks");
	запрос.Заголовки.Вставить("Accept", "application/json");
	//запрос.Заголовки.Вставить("Authorization", "Basic YWRtaW46QWRtaW4wMTIzNDU2Nzg5");
	запрос.УстановитьТелоИзСтроки("{""durable"":false,""auto_delete"":false,""exclusive"":false,""autoDelete"":false,""arguments"":{}}");
	рез = Соединение.ВызватьHTTPМетод("PUT", запрос);
	//рез = Соединение.ОтправитьДляОбработки(запрос);
	Сообщить("Нам вернули код: " + рез.КодСостояния);
	Сообщить("Тело результата: " + рез.ПолучитьТелоКакСтроку());
	запрос = Новый HTTPЗапрос("/api/queues/%2F/answers");
	запрос.Заголовки.Вставить("Accept", "application/json");
	//запрос.Заголовки.Вставить("Authorization", "Basic YWRtaW46QWRtaW4wMTIzNDU2Nzg5");
	запрос.УстановитьТелоИзСтроки("{""durable"":false,""auto_delete"":false,""exclusive"":false,""autoDelete"":false,""arguments"":{}}");
	рез = Соединение.ВызватьHTTPМетод("PUT", запрос);	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПослатьJSONКомандуККТЧерезRabitMQ(Команда)
	Если исходящийJSON = "" тогда
		Сообщить("Пустой завпрос команды");
	конецЕсли;
	Соединение = Новый HTTPСоединение("localhost", 15672, "guest", "guest");
	запрос = Новый HTTPЗапрос("/api/exchanges/%2F//publish");
	запрос.Заголовки.Вставить("Accept", "application/json");
	//запрос.Заголовки.Вставить("Authorization", "Basic YWRtaW46QWRtaW4wMTIzNDU2Nzg5");
	стрJSONQuete = СтрЗаменить(исходящийJSON, """", "\""");
	стрJSONQuete = СтрЗаменить(стрJSONQuete, Символ(9), "");
	стрJSONQuete = СтрЗаменить(стрJSONQuete, Символ(10), "");
	стрJSONQuete = СтрЗаменить(стрJSONQuete, Символ(13), "");
	строкаТелаЗароса = "{""properties"":{},""routing_key"":""tasks"",""payload"":""" + 
					стрJSONQuete + """,""payload_encoding"":""string""}";
	запрос.УстановитьТелоИзСтроки(строкаТелаЗароса);
	рез = Соединение.ВызватьHTTPМетод("POST", запрос);
	Сообщить("Нам вернули код: " + рез.КодСостояния);
	Сообщить("Тело результата: " + рез.ПолучитьТелоКакСтроку());
КонецПроцедуры //КомандаПослатьJSONКомандуККТЧерезRabitMQ

&НаКлиенте
Процедура КомандаПослатьМокJSONОтветаККТЧерезRabitMQ(Команда)
	Соединение = Новый HTTPСоединение("localhost", 15672, "guest", "guest");
	запрос = Новый HTTPЗапрос("/api/exchanges/%2F//publish");
	запрос.Заголовки.Вставить("Accept", "application/json");
	//запрос.Заголовки.Вставить("Authorization", "Basic YWRtaW46QWRtaW4wMTIzNDU2Nzg5");
	стрJSONQuete = СтрЗаменить(входящийJSON, """", "\""");
	стрJSONQuete = СтрЗаменить(стрJSONQuete, Символ(9), "");
	стрJSONQuete = СтрЗаменить(стрJSONQuete, Символ(10), "");
	стрJSONQuete = СтрЗаменить(стрJSONQuete, Символ(13), "");	
	строкаТелаЗароса = "{""properties"":{},""routing_key"":""answers"",""payload"":""" + 
					стрJSONQuete + """,""payload_encoding"":""string""}";
	запрос.УстановитьТелоИзСтроки(строкаТелаЗароса);
	рез = Соединение.ВызватьHTTPМетод("POST", запрос);
	Сообщить("Нам вернули код: " + рез.КодСостояния);
	Сообщить("Тело результата: " + рез.ПолучитьТелоКакСтроку());
КонецПроцедуры //КомандаПослатьJSONКомандуККТЧерезRabitMQ

&НаКлиенте
Процедура КомандаПрочитатьСообщениеИзОчереди(Команда)
	РеквизитСообщенияОтRabbitMQ = "";
	Соединение = Новый HTTPСоединение("localhost", 15672, "guest", "guest");
	запрос = Новый HTTPЗапрос("/api/queues/%2F/answers/get");
	запрос.Заголовки.Вставить("Accept", "application/json");
	//запрос.Заголовки.Вставить("Authorization", "Basic YWRtaW46QWRtaW4wMTIzNDU2Nzg5");
	запрос.УстановитьТелоИзСтроки("{""count"":5,""ackmode"":""ack_requeue_false"",""encoding"":""auto"",""truncate"":50000}");
	рез = Соединение.ВызватьHTTPМетод("POST", запрос);
	//рез = Соединение.ОтправитьДляОбработки(запрос);
	Сообщить("Нам вернули код: " + рез.КодСостояния);
	Сообщить("Тело результата: " + рез.ПолучитьТелоКакСтроку());
	РеквизитСообщенияОтRabbitMQ = рез.ПолучитьТелоКакСтроку();
КонецПроцедуры //КомандаПрочитатьСообщениеИзОчереди

&НаКлиенте
Функция ПолучитьОтветОтККТJSONАсинхRabbitMQ(ipRabbitMQ, ФормаВладелец, описаниеПриЗакрытии)
	ПарамДляФормы = Новый Структура;
	ПарамДляФормы.Вставить("ipRabbitMQ", ipRabbitMQ);
	ПарамДляФормы.Вставить("ПараметрМокОтветJSON", входящийJSON);
	//ПарамДляФормы.Вставить("ПараметрОписаниеПриЗакрытии", описаниеПриЗакрытии);
	
	//ФормаОжиданияОтвета = ПолучитьФорму("ОбщаяФорма.ФормаОжиданияОтветаОтККТ", ПарамДляФормы, ФормаВладелец);
	имяОткрываемойФормы = Объект.РеквизитОбъектаИмяОбработки+".Форма.ФормаОжиданияОтветаОтККТ";
	//Сообщить(имяОткрываемойФормы);
	//ФормаОжиданияОтвета = ПолучитьФорму(РеквизитФормыИмяОбработки+".Форма.ФормаОжиданияОтветаОтККТ", ПарамДляФормы, ФормаВладелец);
	ФормаОжиданияОтвета = ПолучитьФорму(имяОткрываемойФормы, ПарамДляФормы, ФормаВладелец);
	ФормаОжиданияОтвета.ОписаниеОповещенияОЗакрытии = описаниеПриЗакрытии;	
	рез = ФормаОжиданияОтвета.ОжиданиеОтветаОтККТФункция(TRUE);
	Если рез.Результат тогда
		ПослеЗакртияФормыПолученияОтветаОтККТ(рез, "");
	иначе
		ФормаОжиданияОтвета.Открыть();
	конецЕсли;
	
конецФункции //ВыполнитьЗаданиеJSONАсинх

&НаКлиенте
Процедура КомандаПодождатьПолучениеОтветаОтККТ(Команда)
	РеквизитСообщенияОтRabbitMQ = "";
	описаниеПриЗакрытии = Новый ОписаниеОповещения("ПослеЗакртияФормыПолученияОтветаОтККТ", ЭтотОбъект);
	ПолучитьОтветОтККТJSONАсинхRabbitMQ("localhost", ЭтаФорма, описаниеПриЗакрытии);
КонецПроцедуры //КомандаПодождатьПолучениеОтветаОтККТ

&НаКлиенте
функция ПослеЗакртияФормыПолученияОтветаОтККТ(РезультатОжиданияОтветаОтККТ, ДопПараметры) экспорт
	Если НЕ РезультатОжиданияОтветаОтККТ.Результат тогда
		Сообщить("Ошибка (" + СокрЛП(РезультатОжиданияОтветаОтККТ.ошибкаПолноеОписание) + ") получения ответа от ККТ, всего было попыток получения ответа " +
					СокрЛП(РезультатОжиданияОтветаОтККТ.НомерИтерации - 1));
	иначе
		РеквизитСообщенияОтRabbitMQ = РезультатОжиданияОтветаОтККТ.JSONОтвет;
		//fiscSign = ПолучитьЗнчениеПоляИзJSON(РезультатОжиданияОтветаОтККТ.JSONОтвет, "fiscalDocumentSign");
		//ЭтаФорма.Элементы.ДекорацияРезультатОвтет.Заголовок = fiscSign;
		//Сообщить("Ответ от ККТ " + СокрЛП(РезультатОжиданияОтветаОтККТ.JSONОтвет));
		КомандаРазбитьМассивСообщенийОтRabbitMQНаМасстивJSON("");
	конецЕсли;
конецФункции //ПослеЗакртияФормыПолученияОтветаОтККТ

&НаКлиенте
Процедура КомандаПослатьКомандуRabbitMQ(Команда)
	КомандаДобавитьОчередь("");
	КомандаПослатьJSONКомандуККТЧерезRabitMQ("");
	КомандаПодождатьПолучениеОтветаОтККТ("");
КонецПроцедуры //КомандаПослатьКомандуRabbitMQ

&НаКлиенте
функция РазобратьМассивJSONНаМассивJSONов(JSONСтрока)
	//стрЧек = Новый Структура;
	стрЧек = "";
	Если СокрЛП(JSONСтрока) = "" тогда
		Возврат "";
	конецЕсли;
	текСтрМасс = ""; ТеуУрВлож = 0;
	ЧтениеJSON = Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(JSONСтрока);
	текИмяСвойства = "";	
	Пока ЧтениеJSON.Прочитать() цикл
		ТипJSON = ЧтениеJSON.ТипТекущегоЗначения;       
		Если ТипJSON=ТипЗначенияJSON.ИмяСвойства тогда
			текИмяСвойства = ЧтениеJSON.ТекущееЗначение;
			Продолжить;
		конецЕсли;	                                  
		Если ТипJSON = ТипЗначенияJSON.Комментарий или ТипJSON=ТипЗначенияJSON.Ничего 
		тогда
			Продолжить;
		конецЕсли;  
		//Если текИмяСвойства = "" тогда
		//	Продолжить;
		//конецЕсли;			
		Если ТипJSON = ТипЗначенияJSON.НачалоМассива тогда
			ТеуУрВлож = ТеуУрВлож + 1;
			локСтр = "";
			Если ТипЗнч(текСтрМасс) = Тип("Строка") тогда
				локСтр = Новый Массив;
				стрЧек = локСтр;
			иначеЕсли ТипЗнч(текСтрМасс) = Тип("Массив") тогда
				текСтрМасс.Добавить(Новый Массив);
				локСтр = текСтрМасс[текСтрМасс.Количество()-1];
			иначе
				текСтрМасс.Вставить(текИмяСвойства, Новый Массив);
				локСтр = "";                                    
				текСтрМасс.Свойство(текИмяСвойства, локСтр);
			конецЕсли;			
			локСтр.Добавить(текСтрМасс);
			текСтрМасс = локСтр;										
			Продолжить;
		конецЕсли;
		Если ТипJSON = ТипЗначенияJSON.КонецМассива тогда
			ТеуУрВлож = ТеуУрВлож - 1;
			текСтрМасс = текСтрМасс[0];
			текИмяСвойства = "";
			Продолжить;
		конецЕсли;		
		Если ТипJSON=ТипЗначенияJSON.НачалоОбъекта тогда
			ТеуУрВлож = ТеуУрВлож + 1;
			локСтр = "";
			Если ТипЗнч(текСтрМасс) = Тип("Строка") тогда
				локСтр = Новый Структура;
				стрЧек = локСтр;
			иначеЕсли ТипЗнч(текСтрМасс) = Тип("Массив") тогда
				текСтрМасс.Добавить(Новый Структура);
				локСтр = текСтрМасс[текСтрМасс.Количество()-1];
			иначе
				текСтрМасс.Вставить(текИмяСвойства, Новый Структура);
				локСтр = "";                                    
				текСтрМасс.Свойство(текИмяСвойства, локСтр);
			конецЕсли;			
			локСтр.Вставить("Родитель", текСтрМасс);
			текСтрМасс = локСтр;							
			Продолжить;
		конецЕсли;
		Если ТипJSON=ТипЗначенияJSON.КонецОбъекта тогда
			ТеуУрВлож = ТеуУрВлож - 1;
			текИмяСвойства = "";
			Если текСтрМасс.Свойство("Родитель") тогда
				текСтрМасс = текСтрМасс.Родитель;
			конецЕсли;
			Продолжить;
		конецЕсли;                                       
		Если ТипЗнч(текСтрМасс) = Тип("Массив") тогда
			текСтрМасс.Добавить(ЧтениеJSON.ТекущееЗначение);
		иначе
			текСтрМасс.Вставить(текИмяСвойства, ЧтениеJSON.ТекущееЗначение);
		конецЕсли;
	конецЦикла; 	                       
	Возврат стрЧек;	
конецФункции //РазобратьМассивJSONНаМассивJSONов

&НаКлиенте
Процедура КомандаРазбитьМассивСообщенийОтRabbitMQНаМасстивJSON(Команда)
	РеквизитВсехJSONОтветов = "";
	РеквизитJSONОтветRabbitMQ = "";
	массивОтветов = РазобратьМассивJSONНаМассивJSONов(РеквизитСообщенияОтRabbitMQ);
	сч = 1;
	Для Каждого JSONОвет из массивОтветов цикл
		Если сч = 1 тогда
			сч = сч + 1;
			Продолжить;
		конецЕсли;
		Если сч = 2 тогда
			РеквизитJSONОтветRabbitMQ = JSONОвет.payload;
		конецЕсли;		
		РеквизитВсехJSONОтветов = РеквизитВсехJSONОтветов + Символ(10) + Символ(13) + JSONОвет.payload;
		сч = сч + 1;
	конецЦикла;
	fiscSign = ПолучитьЗнчениеПоляИзJSON(РеквизитJSONОтветRabbitMQ, "fiscalDocumentSign");
	ЭтаФорма.Элементы.ДекорацияРезультатОвтет.Заголовок = fiscSign;
	Сообщить(fiscSign);
КонецПроцедуры //КомандаРазбитьМассивСообщенийОтRabbitMQНаМасстивJSON

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.РеквизитОбъектаИмяОбработки = РеквизитФормыВЗначение("Объект").Метаданные().ПолноеИмя();
КонецПроцедуры //ПриСозданииНаСервере

#КонецОбласти  

#Область ОбщиеПроцедурыИФункции
&НаКлиенте
Функция ПрочитатьНастройкиККТКлиент() экспорт
	полноеИмяФайлаНакстроек = ПолучитьПолноеИмяФайлаНастроек();
	структураНастройкаиСвязиСКТТ = НастройкиККТСформироватьСтруктуруИзначальную();
	файлНастроекПроверкаСущестования = Новый Файл(полноеИмяФайлаНакстроек);		
	файлНастроекСуществует = файлНастроекПроверкаСущестования.Существует();
	Если Не файлНастроекСуществует тогда
		Возврат структураНастройкаиСвязиСКТТ;
	конецЕсли;
	тестДокумНастр = Новый ТекстовыйДокумент;
	тестДокумНастр.Прочитать(полноеИмяФайлаНакстроек);
	всегоСтрокНастроек = тестДокумНастр.КоличествоСтрок();
	для номСтр = 1 по всегоСтрокНастроек цикл
		стрНастройки = тестДокумНастр.ПолучитьСтроку(номСтр);
		Если СокрЛП(стрНастройки) = "" тогда
			Продолжить;
		конецЕсли;
		ключ = ""; значениеСтрока = ""; свойстваНастройки = "";
		ПолучитьКлючИЗначениеИзСтроки(стрНастройки, ключ, значениеСтрока);
		СтруктутурОднойНастройки = "";
		структураНастройкаиСвязиСКТТ.Свойство(ключ, СтруктутурОднойНастройки);
		значение = ПреобразоватьИзСтрокиВЗначениеНастройки(СтруктутурОднойНастройки.Тип, ключ, значениеСтрока);
		Если структураНастройкаиСвязиСКТТ.Свойство(ключ, свойстваНастройки) тогда
			свойстваНастройки.Вставить("Значение", значение);
		конецЕсли;
	конецЦикла;
	Возврат структураНастройкаиСвязиСКТТ;
конецФункции //ПрочитатьНастройкиККТКлиент

&НаКлиенте
функция НастройкиККТСформироватьСтруктуруИзначальную() экспорт
	структураНастройкаиСвязиСКТТ = Новый Структура;
	СписокВозможныхЗначений = Новый СписокЗначений;
	СписокВозможныхЗначений.Добавить("через COM/USB");
	СписокВозможныхЗначений.Добавить("по IP ккт");
	СписокВозможныхЗначений.Добавить("через сервер ККТ");
	СписокВозможныхЗначений.Добавить("web сервер");
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "ТипСвязи", Тип("Строка"), "через сервер ККТ", "тип связи с ККТ", СписокВозможныхЗначений);
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "IP", Тип("Строка"), "", "IP");
	//ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "IP_ККТ", "", "IP");
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "Порт_IPККТ", Тип("Число"), 0, "порт IP ККТ");
	//ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "IP_СерверККТ", "", "порт IP ККТ");
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "Таймаут_севрерККТ", Тип("Число"), 1000, "Таймаут ожидания ответа от севрера ККТ");
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "НомерCOM", Тип("Число"), 0, "Номер COM порта");
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "УровеньОтладки", Тип("Число"), 0, "Уровень логирования и отладки (0 - самый низкий)");
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "ИмяКассира", Тип("Строка"), "Фамилия ИО кассира", "имяКассира");
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "ФлТестовыйРежим", Тип("Булево"), FALSE, "Тестовый режим (без пробития чеков на ККТ)");
	
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "IDWebККТ", Тип("Строка"), "", "ID ККТ в web-сервере");
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "ПользовательWEB", Тип("Строка"), "", "Пользователь ККТ в web-сервере");
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "ПWEB", Тип("Строка"), "", "П ККТ в web-сервере");
	//структураНастройкаиСвязиСКТТ.Вставить("COMConnect", false);
	//Если исхСтруктура.номерCOM = 0 тогда
	//	структураНастройкаиСвязиСКТТ.Вставить("COMConnect", true);
	//конецЕсли;                                                 
	//структураНастройкаиСвязиСКТТ.Вставить("IDWebККТ", исхСтруктура.IDWebККТ);
	//структураНастройкаиСвязиСКТТ.Вставить("ПользовательWEB", исхСтруктура.ПользовательWEB);
	//структураНастройкаиСвязиСКТТ.Вставить("ПWEB", исхСтруктура.ПWEB);
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "ЭмулироватьЗадержкуОтветаОтИСМ", Тип("Булево"), FALSE, "Иммитация задержки получения ответа от четного знака");
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "ИмитацияНеПолученияОтветаОтЧестногоЗнака", Тип("Булево"), FALSE, "Иммитация ошибки получения ответа от честного знака");
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "МаксимальноеКолПопытокПроверкиМарки", Тип("Число"), 3, "Максимальное количество попыток проверки марки");	
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "неЗакрыватьСоедиениеВОднойТранзакцииПечатиЧека", Тип("Булево"), ИСТИНА, "не отсоединяться от ККТ в одной транзакции");	
	
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "ПоказыватьПечатнуюФормуЧекаПослеПечатиНаККТ", Тип("Булево"), ИСТИНА, "Показывать печатную форму чека после печати чека на ККТ");	
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "ПоказыватьПечатнуюФормуЧекаПередПробитиемНаККТ", Тип("Булево"), ИСТИНА, "Показывать печатную форму перед пробитием чека на ККТ");	
	
	ДобавитьНастройку(структураНастройкаиСвязиСКТТ, "ПосылатьКомандуНаККТПослеФормированияJSON", Тип("Булево"), ИСТИНА, "Сразу посылать команды на ККТ");	
	Возврат структураНастройкаиСвязиСКТТ;
конецФункции //НастройкиККТСформироватьСтруктуруИзначальную

&НаКлиенте
Процедура СохранитьНастройкиККТКлиент(структураНастройкаиСвязиСКТТ)
	полноеИмяФайлаНакстроек = ПолучитьПолноеИмяФайлаНастроек();
	тестДокумНастр = Новый ТекстовыйДокумент;
	для каждого элНстр из структураНастройкаиСвязиСКТТ цикл
		текСвойстваНастройки = элНстр.Значение;
		Если текСвойстваНастройки.Свойство("Значение") тогда
			текЗначение = текСвойстваНастройки.Значение;
		иначе
			текЗначение = текСвойстваНастройки.ЗначПоУмолч;
		конецЕсли;
		строчкаНастроек = элНстр.Ключ+";";
		текЗначениеСтрока = СокрЛП(текЗначение);
		Если ТипЗнч(текЗначение) = Тип("Число") тогда
			текЗначениеСтрока = Формат(текЗначение, "ЧЦ=10; ЧДЦ=0; ЧРД=.; ЧН=; ЧГ=");
		иначеЕсли ТипЗнч(текЗначение) = Тип("Булево") тогда
			текЗначениеСтрока = "false";
			Если текЗначение тогда
				текЗначениеСтрока = "true";
			конецЕсли;
		конецЕсли;
		строчкаНастроек = строчкаНастроек+текЗначениеСтрока;
		тестДокумНастр.ДобавитьСтроку(строчкаНастроек);
	конецЦикла;
	тестДокумНастр.Записать(полноеИмяФайлаНакстроек);
конецПроцедуры //СохранитьНастройкиККТКлиент

&НаКлиенте
функция ТестСвязиСККТКлиент(COMДрайверККТ10 = Неопределено, НастройкаиСвязиСКТТ = Неопределено, описаниеОшибки = "", КодОшибки = 0) экспорт    
	УровеньОтладки = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "УровеньОтладки");
	ФлТестовыйРежим = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "ФлТестовыйРежим");	
	
	Если УровеньОтладки >= 3 тогда
		Сообщить("начало: ТестСвязиСККТ");	
	конецЕсли;		
	рез = ЛОЖЬ;
	описаниеОшибки = "";
	резТеста = Подключиться(COMДрайверККТ10, НастройкаиСвязиСКТТ, описаниеОшибки, КодОшибки); 
	Если НЕ резТеста тогда
		Сообщить(описаниеОшибки);
		ЗалогироватьОпреацию(0, "ТестСвязиСККТ", УровеньОтладки, False, КодОшибки, описаниеОшибки);
	иначе      
		рез = ИСТИНА;       
		ОписаниеОшибкиОтключения = "";
		КодОшибкиОтключения = 0;
		резОтключ = Отключиться(COMДрайверККТ10, УровеньОтладки, ФлТестовыйРежим, ОписаниеОшибкиОтключения, КодОшибкиОтключения);
		Если НЕ резОтключ тогда
			стрОшибки = ОписаниеОшибкиОтключения;
			Если уровеньОтладки >=2 тогда
				Сообщить(стрОшибки);
			конецЕсли;
			ЗалогироватьОпреацию(0, "Не получилось отключиться от ККТ из процедуры ТестСвязиСККТ", УровеньОтладки, False, КодОшибкиОтключения, стрОшибки);
		конецЕсли;
	конецЕсли; 
	Если УровеньОтладки >= 3 тогда
		Сообщить("конец: ТестСвязиСККТ");	
	конецЕсли;			
	Возврат рез;
конецФункции //ТестСвязиСККТКлиент

&НаКлиенте
функция ПолучитьЗначениеНастройки(структураНастройкаиСвязиСКТТ, Наимен) экспорт
	рез = Неопределено;
	СтруктутурОднойНастройки = "";
	Если структураНастройкаиСвязиСКТТ.Свойство(Наимен, СтруктутурОднойНастройки) тогда
		Если СтруктутурОднойНастройки.Свойство("Значение") тогда
			рез = СтруктутурОднойНастройки.Значение;
		иначе
			рез = СтруктутурОднойНастройки.ЗначПоУмолч;
		конецЕсли;
	конецЕсли;
	Возврат рез;
конецФункции //ПолучитьЗначениеНастройки

&НаКлиенте
функция СформироватьJSONXОтчета(кассир, уровеньОтладки = 1) экспорт
	Если уровеньОтладки >= 3 тогда
		Сообщить("начало: СформироватьJSONXОтчета");	
	конецЕсли;			
	json = Новый ЗаписьJSON;                   
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб);
	json.УстановитьСтроку(ПараметрыЗаписиJSON);
	json.ЗаписатьНачалоОбъекта();	
	json.ЗаписатьИмяСвойства("type");
	json.ЗаписатьЗначение("reportX");	
	json.ЗаписатьИмяСвойства("operator");
	json.ЗаписатьНачалоОбъекта();
	json.ЗаписатьИмяСвойства("name");
	json.ЗаписатьЗначение(кассир);
	json.ЗаписатьКонецОбъекта();
	json.ЗаписатьКонецОбъекта();
	Если уровеньОтладки >= 3 тогда
		Сообщить("конец: СформироватьJSONXОтчета");	
	конецЕсли;				
	возврат json.Закрыть();		
конецФункции //СформироватьJSONXОтчета

&НаКлиенте
функция ВыполнитьЗаданиеJSON(COMДрайверККТ10, НастройкаиСвязиСКТТ, JSONЗадание, ОтветJSON, описаниеОшибки = "", 
								КодОшибки = 0, ПодключатьсяКККТ = ИСТИНА, 
									НеЗакрыватьСоединениеСККТ = FALSE) экспорт
	УровеньОтладки = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "УровеньОтладки");
	ФлТестовыйРежим = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "ФлТестовыйРежим");	
	
	Если УровеньОтладки >= 3 тогда
		Сообщить("начало: ВыполнитьЗаданиеJSON");	
	конецЕсли;			
	рез = ИСТИНА;
	ОтветJSON = "";
	Если ПодключатьсяКККТ тогда
		резПодкл = Подключиться(COMДрайверККТ10, НастройкаиСвязиСКТТ, описаниеОшибки, КодОшибки);
		Если НЕ резПодкл тогда
			стрОшибки = описаниеОшибки;
			Если уровеньОтладки >=2 тогда
				Сообщить(стрОшибки);
			конецЕсли;
			ЗалогироватьОпреацию(0, "Подключение ККТ в ВыполнитьЗаданиеJSON", УровеньОтладки, False, КодОшибки, стрОшибки);
			рез = ЛОЖЬ;
			Если уровеньОтладки >= 3 тогда
				Сообщить("конец: ВыполнитьЗаданиеJSON");	
			конецЕсли;					
			Возврат рез;
		конецЕсли;	
	конецЕсли;
	
	резПровКоманды = 0;
	Если УровеньОтладки >= 3 тогда
    	COMДрайверККТ10.setParam(COMДрайверККТ10.LIBFPTR_PARAM_JSON_DATA, JSONЗадание);
    	резПровКоманды = COMДрайверККТ10.validateJson();
	конецЕсли;  
	Если резПровКоманды <> 0 тогда                                          
		ЛокОписаниеОшибки = COMДрайверККТ10.errorDescription();
		Если Найти(ЛокОписаниеОшибки, "validateTask") > 0 тогда
			резПровКоманды = 0;
			//флТестовыйРежим = ЛОЖЬ;
		конецЕсли;
	конецЕсли;
	Если резПровКоманды <> 0 тогда
		кодОшибки = COMДрайверККТ10.errorCode();
		описаниеОшибки = COMДрайверККТ10.errorDescription();          		
		Если УровеньОтладки >=2 тогда
			Сообщить(описаниеОшибки);
		конецЕсли;
		ЗалогироватьОпреацию(0, "проверить корректность JSON в ВыполнитьЗаданиеJSON", УровеньОтладки, False, КодОшибки, описаниеОшибки);
		рез = ЛОЖЬ;                                               
	конецЕсли;		                                                  	
	
	Если резПровКоманды = 0 тогда    
		резВыпКоманды = 0;
		Если Не ФлТестовыйРежим тогда
    		COMДрайверККТ10.setParam(COMДрайверККТ10.LIBFPTR_PARAM_JSON_DATA, JSONЗадание);
    		резВыпКоманды = COMДрайверККТ10.processJson();
		конецЕсли;
		Если резВыпКоманды <> 0 тогда
			кодОшибки = COMДрайверККТ10.errorCode();
			описаниеОшибки = COMДрайверККТ10.errorDescription();          		
			Если УровеньОтладки >=2 тогда
				Сообщить(описаниеОшибки);
			конецЕсли;
			ЗалогироватьОпреацию(0, "ВыполнитьЗаданиеJSON", УровеньОтладки, False, КодОшибки, описаниеОшибки);					
			рез = ЛОЖЬ;                                               
		иначе                        
			Если Не ФлТестовыйРежим тогда
				ОтветJSON = COMДрайверККТ10.getParamString(COMДрайверККТ10.LIBFPTR_PARAM_JSON_DATA);
			иначе
				ОтветJSON = ПолучитьМокОтветНаJSONКомманду(JSONЗадание);
			конецЕсли;
		конецЕсли;		                                                  
	конецЕсли;
	
	Если НЕ НеЗакрыватьСоединениеСККТ тогда
		ОписаниеОшибкиОтключения = "";
		КодОшибкиОтключения = 0;
		резОтключ = Отключиться(COMДрайверККТ10, УровеньОтладки, ФлТестовыйРежим, ОписаниеОшибкиОтключения, КодОшибкиОтключения);
		Если НЕ резОтключ тогда
			стрОшибки = ОписаниеОшибкиОтключения;
			Если УровеньОтладки >=2 тогда
				Сообщить(стрОшибки);
			конецЕсли;
			ЗалогироватьОпреацию(0, "Отключение от ККТ в ВыполнитьЗаданиеJSON", УровеньОтладки, False, КодОшибкиОтключения, стрОшибки);
		конецЕсли;        
	конецЕсли;
	Если УровеньОтладки >= 3 тогда
		Сообщить("конец: ВыполнитьЗаданиеJSON");	
	конецЕсли;						
	возврат рез;
конецФункции //ВыполнитьЗаданиеJSON

&НаКлиенте
функция ПроверитьКорректностьJSON(COMДрайверККТ10, JSON, уровеньОтладки = 1, флТестовыйРежим = FALSE, описаниеОшибки = "", КодОшибки = 0) экспорт
	рез = ИСТИНА;    
	Возврат рез;
	Если уровеньОтладки >= 3 тогда
		Сообщить("начало: ПроверитьКорректностьJSON");	
	конецЕсли;				
	рез = ИСТИНА;    
	Если COMДрайверККТ10 = Неопределено тогда           
		Если уровеньОтладки >= 3 тогда
			Сообщить("конец (COMДрайверККТ10 неопределено): ПроверитьКорректностьJSON");	
		конецЕсли;
		Возврат рез;
	конецЕсли;	
    COMДрайверККТ10.setParam(COMДрайверККТ10.LIBFPTR_PARAM_JSON_DATA, JSON);
    резВалид = COMДрайверККТ10.validateJson();
	Если резВалид <> 0 тогда
		кодОшибки = COMДрайверККТ10.errorCode();
		описаниеОшибки = COMДрайверККТ10.errorDescription();          		
		стрОшибки = описаниеОшибки;
		Если уровеньОтладки >=2 тогда
			Сообщить(стрОшибки);
		конецЕсли;
		ЗалогироватьОпреацию(0, "ПроверитьКорректностьJSON", уровеньОтладки, False, КодОшибки, стрОшибки);					
		рез = ЛОЖЬ;
	конецЕсли;		                                              
	Если уровеньОтладки >= 3 тогда
		Сообщить("конец: ПроверитьКорректностьJSON");	
	конецЕсли;							
	Возврат рез;
конецФункции //ПроверитьКорректностьJSON                  

&НаКлиенте
функция ОтменитьЧек(COMДрайверККТ10 = Неопределено, НастройкаиСвязиСКТТ, описаниеОшибки = "", КодОшибки = 0) экспорт
	УровеньОтладки = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "УровеньОтладки");
	ФлТестовыйРежим = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "ФлТестовыйРежим");		
	
	Если УровеньОтладки >= 3 тогда
		Сообщить("начало: ОтменитьЧек");	
	конецЕсли;			
	рез = ИСТИНА;
	ОтветJSON = "";
	резПодкл = Подключиться(COMДрайверККТ10, НастройкаиСвязиСКТТ, описаниеОшибки, КодОшибки);
	Если НЕ резПодкл тогда
		стрОшибки = описаниеОшибки;
		Если УровеньОтладки >=2 тогда
			Сообщить(стрОшибки);
		конецЕсли;
		ЗалогироватьОпреацию(0, "Подключение ККТ в ОтменитьЧек", УровеньОтладки, False, КодОшибки, стрОшибки);
		рез = ЛОЖЬ;
		Если УровеньОтладки >= 3 тогда
			Сообщить("конец: ОтменитьЧек");	
		конецЕсли;					
		Возврат рез;
	конецЕсли;	    
	
	резВыпКоманды = 0;
	Если НЕ флТестовыйРежим тогда
   		резВыпКоманды = COMДрайверККТ10.cancelReceipt();
	конецЕсли;
	Если резВыпКоманды <> 0 тогда
		кодОшибки = COMДрайверККТ10.errorCode();
		описаниеОшибки = COMДрайверККТ10.errorDescription();          		
		Если УровеньОтладки >=2 тогда
			Сообщить(описаниеОшибки);
		конецЕсли;
		ЗалогироватьОпреацию(0, "ОтменитьЧек", уровеньОтладки, False, КодОшибки, описаниеОшибки);					
		рез = ЛОЖЬ;                                               
	конецЕсли;		                                                  
	
	ОписаниеОшибкиОтключения = "";
	КодОшибкиОтключения = 0;
	резОтключ = Отключиться(COMДрайверККТ10, УровеньОтладки, флТестовыйРежим, ОписаниеОшибкиОтключения, КодОшибкиОтключения);
	Если НЕ резОтключ тогда
		стрОшибки = ОписаниеОшибкиОтключения;
		Если уровеньОтладки >=2 тогда
			Сообщить(стрОшибки);
		конецЕсли;
		ЗалогироватьОпреацию(0, "Отключение от ККТ в ОтменитьЧек", уровеньОтладки, False, КодОшибкиОтключения, стрОшибки);
	конецЕсли;
	Если уровеньОтладки >= 3 тогда
		Сообщить("конец: ОтменитьЧек");	
	конецЕсли;						
	возврат рез; 
конецФункции //ОтменитьЧек

//печатем чек на кассовом аппарате
//НА ВХОДЕ
//структура - общие данные чека            
// - тип чеа - продажа или возврат
// - кассир - фаимлиия имя отчество кассира
// - система налогообложения //ПАТЕНТ, СНО, УСН, УСН д-р, ПСН
// - сумма оплаты безналичными
// - сумма оплаты наличными
// - сумма оплаты авансом (зачет ранее оплаченного аванса)
//массив позиций чека, в каждой элементе массива структура: товар - тип ТоварныеПозиции; цена - число; количество - число, марка - строка
//структура настроек свызи с атол ККТ
// - тип связи: web, ip, com/usb
// - ip
// - порт Ip
// - номер COM порта                                                   
//оповещение, которое нужно выполнить после печати чека
//COMДрайвера - COM компонента драйвера Атол. По умолчанию Неопределено
//служебные отладочные переменные: уровеньОтладки - уровень отладки от 0 до 3 (3 - свмый высокий), флТестовыйРежим - если TRUE, то чек на ККТ не будет выходить
//НА ВЫХОДЕ
//возвращает в параметр процедуры из ОповещениеПослеПечатиЧека структуру
// - если тип связи не web и COMДрайвера - неопределен, то вернёт в этой переменной COM объект драйвера атол
// - результат boolean - был чек напечатан или нет
// - номер чека
// - код ошибки не равный нулю, если чек не был напечатан
// - описание ошибки, если чек не был напечатан
//если не произошло ошибки, то чек на кассовом аппарате
//результат выполненной операции TRUE
//есил произошла ошибка при печати чека, то на выходе - результат операции FALSE
//так же в верент КОД ОШИБКИ и ОписаниеОшибки
//ПРИМЕР
//стуктура общая данных чека - ОбщиеСвойстваЧека:
//тип чека - продажа
//кассир - Иванова ИИ
//система налогообложения - ПАТЕНТ
//СуммаНаличными - 72
//СуммаБезналичными - 56
//СуммаАванс - 0
//массив позиций чека - таблицаПозицийЧека:  
//                         товар                                  цена  количество    марка (c GS символами и преобраозванная в base64)
//1-ый элемент массива - стркутра:  ТоварнаяПозиции 1, красный, X; 34;  1;          "MDEwNDY1MDExNzI0MDE2MzIxMDAwMDAwMDAwNU5nRh05MTAwMjQdOTJVanBmQW1ETkU2UlNwZWxjVnh2dFBKSEhHbC84VUx6UWpQWklOQjhaL1dZUFVZTWRsN0RFUmVIUE56MXRsd3F1OHB3SXRMaXRSODViL1huT0VSZHl1UT09"
//2-ый элемент массива - стркутра:  ТоварнаяПозиции 2, красный, X; 34;  1;          "MDEwNDY0MDAxNjc0ODI3MzIxMGpFbiUpQk5CYmcwQR05MUZGRDAdOTJkR1Z6ZEdnSFg1UXIzTTBJdmh3Z2ZyRVhzVSsrQ2xQWFJaZEJ4WWorU0VBPQ=="
//3-ый элемент массива - стркутра:  ТоварнаяПозиции 3, синий, XL; 12;  5            
//структура настроек связи с ККТ - НастройкаиСвязиСКТТ                        
//тип связи: COM/USB
//номер COM - 0
//ip - 192.168.0.23
//порт ip - 0          
//оповещение после печати чека - ОповещениеПослеПечатиЧека: ПослеПечатиЧека
//НА ВЫХОДЕ                                                             
//если чек был напечтан успешно
//возвращает в параметр процедуры из ОповещениеПослеПечатиЧека структуру
// - Результат - ИСТИНА
// - COMДрайверККТ10 - COMОбъект драйвера атол
// - НомерЧека - 123
//чек на ККТ
//1 позция: ТоварнаяПозиции 1, красный, X по цене 34 в количестве 1; на сумму 34 [M+] - маркированный товар - прошёл проверку
//2 позция: ТоварнаяПозиции 2, красный, X по цене 34 в количестве 1; на сумму 34 [M+] - маркированный товар - прошёл проверку
//3 позция: ТоварнаяПозиции 3, синий, XL по цене 12 в количестве 5; на сумму 60 
&НаКлиенте
процедура ПечатьЧекаНаККТ(ФормаВладелец, ОбщиеСвойстваЧека, таблицаПозицийЧека, НастройкаиСвязиСКТТ, ОповещениеПослеПечатиЧека, COMДрайверККТ10 = Неопределено) экспорт
	Если таблицаПозицийЧека.Количество() = 0 тогда
		//возращаем результат печати чека в модуль, из которого команда печати чека была вызвана
		стрРезПечатиЧека = Новый Структура;
		стрРезПечатиЧека.Вставить("Результат", ЛОЖЬ);
		стрРезПечатиЧека.Вставить("КодОшибки", -1);
		стрРезПечатиЧека.Вставить("описаниеОшибки", "Нет позиций для печти чека");
		стрРезПечатиЧека.Вставить("COMДрайверККТ10", COMДрайверККТ10);				
		ВыполнитьОбработкуОповещения(ОповещениеПослеПечатиЧека, стрРезПечатиЧека);
		Возврат;
	конецЕсли;
	Если НЕ ОбщиеСвойстваЧека.Свойство("СуммаЧека") тогда
		СуммаЧека = 0;
		для Каждого поз из таблицаПозицийЧека цикл
			СуммаЧека = СуммаЧека + поз.Количество*поз.Цена;
		конецЦикла; //перебор позиций чека
		ОбщиеСвойстваЧека.Вставить("СуммаЧека", СуммаЧека);
	конецЕсли;
	
	//создаём отдельный массив марок для передачи в функию проверки марок
	массивМарок = Новый Массив;
	для Каждого поз из таблицаПозицийЧека цикл  
		Если поз.Свойство("марка") тогда
			Если СокрЛП(поз.Марка) <> "" тогда
				массивМарок.Добавить(Новый Структура);
				текИндЛок = массивМарок.Количество() - 1;
				ТекащяМаркаСтруктура = массивМарок[текИндЛок];
				ТекащяМаркаСтруктура.Вставить("марка", поз.Марка);
			конецЕсли;
		конецЕсли;
	конецЦикла; //перебор позиций чека
	
	//НеЗакрыватьСоединениеСККТ = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "неЗакрыватьСоедиениеВОднойТранзакцииПечатиЧека");
	УровеньОтладки = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "УровеньОтладки");
	//ФлТестовыйРежим = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "ФлТестовыйРежим");
	всеПараметрыЧека = Новый Структура;
	всеПараметрыЧека.Вставить("ФормаВладелец", ФормаВладелец);		
	всеПараметрыЧека.Вставить("списПараметровЧека", ОбщиеСвойстваЧека);
	всеПараметрыЧека.Вставить("массивЧека", таблицаПозицийЧека);	
	всеПараметрыЧека.Вставить("массивМарок", массивМарок);	
	всеПараметрыЧека.Вставить("НастройкаиСвязиСКТТ", НастройкаиСвязиСКТТ);	
	всеПараметрыЧека.Вставить("COMДрайверККТ10", COMДрайверККТ10);	
	всеПараметрыЧека.Вставить("ОповещениеПослеПечатиЧека", ОповещениеПослеПечатиЧека);		
	
	ПроверитьИИсправитьСтрокиОплат(ОбщиеСвойстваЧека, ОбщиеСвойстваЧека.СуммаЧека);
	
	Если ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "ПоказыватьПечатнуюФормуЧекаПередПробитиемНаККТ") тогда
		ОповещениеПослеЗакрытияФормыПредварительногоПросмотраЧека = 
			Новый ОписаниеОповещения("ПослеЗакрытияФормыПредварительногоПросмотраЧека", 
				ЭтотОбъект, всеПараметрыЧека);
		ПарамДляФормы = Новый Структура;
		JSONЧека = СформироватьJSONЧека(ОбщиеСвойстваЧека, таблицаПозицийЧека, УровеньОтладки);		
		ПарамДляФормы.Вставить("ПараметрJSONЧека", JSONЧека);
		ПарамДляФормы.Вставить("Объект", Объект);
		
		имяОткрываемойФормы = Объект.РеквизитОбъектаИмяОбработки+".Форма.ФормаПредварительногоПросмотраЧека";
		Сообщить("имяОткрываемойФормы="""+СокрЛП(имяОткрываемойФормы)+""".");
		//Сообщить(имяОткрываемойФормы);	
		//ФормаПредварительногоПросмотраЧека = ПолучитьФорму("ФормаПредварительногоПросмотраЧека", ПарамДляФормы, ФормаВладелец);
		ФормаПредварительногоПросмотраЧека = ПолучитьФорму(имяОткрываемойФормы, ПарамДляФормы, ФормаВладелец);
		ФормаПредварительногоПросмотраЧека.ОписаниеОповещенияОЗакрытии = ОповещениеПослеЗакрытияФормыПредварительногоПросмотраЧека;
		ФормаПредварительногоПросмотраЧека.Открыть();
	иначе
		резПоказаПредварительногоПросмотраЧека = Новый Структура;
		резПоказаПредварительногоПросмотраЧека.Вставить("Результат", true);		
		ПослеЗакрытияФормыПредварительногоПросмотраЧека(резПоказаПредварительногоПросмотраЧека, всеПараметрыЧека);
	конецЕсли;
конецПроцедуры //ПечатьЧекаНаККТ

&НаКлиенте
функция ЗакрытьКассовуюСмену(Кассир, НастройкаиСвязиСКТТ, COMДрайверККТ10 = Неопределено, КодОшибки = 0, описаниеОшибки = "") экспорт
	УровеньОтладки = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "УровеньОтладки");
	
	РезультатЗакрытияСмены = Новый Структура;
	РезультатЗакрытияСмены.Вставить("Результат", ИСТИНА);									 
	исходящийJSON = СформироватьJSONЗакрытияСмены(Кассир, УровеньОтладки);
	ответJSON = "";
	описаниеОшибки = ""; КодОшибки = 0;
	резКомандыЗакрытияСмены = ВыполнитьЗаданиеJSON(COMДрайверККТ10, НастройкаиСвязиСКТТ, исходящийJSON, 
					   		   		 ответJSON, описаниеОшибки, КодОшибки);	
	РезультатЗакрытияСмены.Вставить("JSONЗапрос", исходящийJSON);
	РезультатЗакрытияСмены.Вставить("ответJSON", ответJSON);													 										 									 
	если не резКомандыЗакрытияСмены тогда 
		РезультатЗакрытияСмены.Вставить("Результат", ЛОЖЬ);									 
		РезультатЗакрытияСмены.Вставить("описаниеОшибки", описаниеОшибки);
		РезультатЗакрытияСмены.Вставить("КодОшибки", КодОшибки);
	иначе
		номерСмены = ПолучитьЗнчениеПоляИзJSON(ответJSON, "shiftNumber");                    
		РезультатЗакрытияСмены.Вставить("Номер_смены", номерСмены);									 
	конецЕсли;     
	Возврат РезультатЗакрытияСмены;
конецФункции //ЗакрытьКассовуюСмену

&НаКлиенте
функция ПолучитьДиректориюЛогФайлов(директорияЛогФайловАтол = "") экспорт
	//C:\Users\Acer\AppData\Roaming\ATOL\drivers10\logs
	//C:\Users\Acer\AppData\Local\Temp\
	текКаталогДляЛогов = КаталогВременныхФайлов();
	текКаталогДляЛогов = СтрЗаменить(текКаталогДляЛогов, "Local\Temp\", "");
	текКаталогДляЛогов = текКаталогДляЛогов + "Roaming\";
	КаталогНаДиске = Новый Файл(текКаталогДляЛогов);
	Если НЕ КаталогНаДиске.Существует() тогда        
		СоздатьКаталог(текКаталогДляЛогов);
	конецЕсли;	                                    
	текКаталогДляЛогов = текКаталогДляЛогов + "ATOL\";
	КаталогНаДиске = Новый Файл(текКаталогДляЛогов);
	Если НЕ КаталогНаДиске.Существует() тогда        
		СоздатьКаталог(текКаталогДляЛогов);
	конецЕсли;		                                  
	текКаталогДляЛогов = текКаталогДляЛогов + "drivers10\";
	КаталогНаДиске = Новый Файл(текКаталогДляЛогов);
	Если НЕ КаталогНаДиске.Существует() тогда        
		СоздатьКаталог(текКаталогДляЛогов);
	конецЕсли;		                                  
	текКаталогДляЛогов = текКаталогДляЛогов + "logs\";             
	директорияЛогФайловАтол = СокрЛП(текКаталогДляЛогов);
	КаталогНаДиске = Новый Файл(текКаталогДляЛогов);
	Если НЕ КаталогНаДиске.Существует() тогда        
		СоздатьКаталог(текКаталогДляЛогов);
	конецЕсли;		                                  
	текКаталогДляЛогов = текКаталогДляЛогов + "1с\";
	КаталогНаДиске = Новый Файл(текКаталогДляЛогов);
	Если НЕ КаталогНаДиске.Существует() тогда        
		СоздатьКаталог(текКаталогДляЛогов);
	конецЕсли;		                                  	
	Возврат текКаталогДляЛогов;	
конецФункции //ПолучитьДиректориюЛогФайлов

&НаКлиенте
функция СформироватьJSONЧека(ОбщиеСвйостваЧека, массивТоваровов, уровеньОтладки = 1) экспорт
	Если уровеньОтладки >= 3 тогда
		Сообщить("начало: СформироватьJSONЧека");	
	конецЕсли;		
	
	кассир = СокрЛП(ОбщиеСвйостваЧека.Кассир);
	типЧека = "sell";
	планируемыСтатусМарки = "itemPieceSold";
	если ОбщиеСвйостваЧека.ЭтоЧекВозврата тогда
		типЧека = "sellReturn";             
		планируемыСтатусМарки = "itemPieceReturn";
	конецЕсли;                                  
	//taxation = ;
	
	json = Новый ЗаписьJSON;                   
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб);
	json.УстановитьСтроку(ПараметрыЗаписиJSON);
	json.ЗаписатьНачалоОбъекта();
	json.ЗаписатьИмяСвойства("type");
	json.ЗаписатьЗначение(типЧека);  
	текОСНЧека = "";
	Если ОбщиеСвйостваЧека.Свойство("СНО", текОСНЧека) тогда
		json.ЗаписатьИмяСвойства("taxationType");
		json.ЗаписатьЗначение(текОСНЧека); 		
	конецЕсли;	
	json.ЗаписатьИмяСвойства("operator");
	json.ЗаписатьНачалоОбъекта();
		json.ЗаписатьИмяСвойства("name");
		json.ЗаписатьЗначение(кассир);  
	json.ЗаписатьКонецОбъекта();     
	json.ЗаписатьИмяСвойства("items");
	json.ЗаписатьНачалоМассива();   
	ОбщаяСуммаЧека = 0;
		для каждого позицияСтр из массивТоваровов цикл
			предметРасчета = "commodity";
			Если ВРег(позицияСтр.ПредметРасчета) = ВРег("платеж") тогда
				предметРасчета = "payment";
			конецЕсли;
			признакРасчета = "fullPayment";
			Если ВРег(позицияСтр.ПризнакРасчета) = ВРег("предоплата 100%") тогда
				признакРасчета = "fullPrepayment";
			иначеЕсли ВРег(позицияСтр.ПризнакРасчета) = ВРег("предоплата частичная") тогда
				признакРасчета = "prepayment";
			иначеЕсли Врег(позицияСтр.ПризнакРасчета) = Врег("аванс")  тогда
				признакРасчета = "advance";				
			иначеЕсли Врег(позицияСтр.ПризнакРасчета) = Врег("частичный расчет")  тогда
				признакРасчета = "partialPayment";							
			иначеЕсли Врег(позицияСтр.ПризнакРасчета) = Врег("рассрочка")  тогда
				признакРасчета = "credit";								
			иначеЕсли Врег(позицияСтр.ПризнакРасчета) = Врег("оплата рассрочки")  тогда
				признакРасчета = "creditPayment";												
			конецЕсли;		
			json.ЗаписатьНачалоОбъекта();
			json.ЗаписатьИмяСвойства("type");
			json.ЗаписатьЗначение("position");  
			json.ЗаписатьИмяСвойства("name");
			json.ЗаписатьЗначение(СокрЛП(позицияСтр.Товар));  			
			json.ЗаписатьИмяСвойства("price");
			json.ЗаписатьЗначение(позицияСтр.Цена);  									
			json.ЗаписатьИмяСвойства("quantity");
			json.ЗаписатьЗначение(позицияСтр.Количество);  						
			текущСуммаПозиции = позицияСтр.Цена*позицияСтр.Количество;
			ОбщаяСуммаЧека = ОбщаяСуммаЧека + текущСуммаПозиции;
			json.ЗаписатьИмяСвойства("amount");
			json.ЗаписатьЗначение(текущСуммаПозиции);  									
			json.ЗаписатьИмяСвойства("measurementUnit");
			json.ЗаписатьЗначение("0");  						
			json.ЗаписатьИмяСвойства("paymentMethod");
			json.ЗаписатьЗначение(признакРасчета); //fullPayment, fullPrepayment, prepayment, advance
			json.ЗаписатьИмяСвойства("paymentObject");
			json.ЗаписатьЗначение("commodity");
			номОтдела = 1;
			Если позицияСтр.Свойство("НомерСекции", номОтдела) тогда
				json.ЗаписатьИмяСвойства("department");
				json.ЗаписатьЗначение(номОтдела); 				
			конецЕсли;			
			json.ЗаписатьИмяСвойства("tax");
			json.ЗаписатьНачалоОбъекта();
				json.ЗаписатьИмяСвойства("type");
				json.ЗаписатьЗначение("none");  			
			json.ЗаписатьКонецОбъекта();      
			Если позицияСтр.Свойство("марка") тогда
				json.ЗаписатьИмяСвойства("imcParams");
				json.ЗаписатьНачалоОбъекта(); 
				json.ЗаписатьИмяСвойства("imcType");    
				json.ЗаписатьЗначение("auto");
				json.ЗаписатьИмяСвойства("imc");
				json.ЗаписатьЗначение(позицияСтр.марка);
				json.ЗаписатьИмяСвойства("itemEstimatedStatus");
				json.ЗаписатьЗначение(планируемыСтатусМарки);
				json.ЗаписатьИмяСвойства("imcModeProcessing");
				json.ЗаписатьЗначение(0);                     
				json.ЗаписатьИмяСвойства("itemInfoCheckResult");
				json.ЗаписатьНачалоОбъекта();
					json.ЗаписатьИмяСвойства("imcCheckFlag");
					если позицияСтр.Свойство("imcCheckFlag") тогда
						json.ЗаписатьЗначение(позицияСтр.imcCheckFlag);                     
					иначе                                                                   
						json.ЗаписатьЗначение(false);                     
					конецЕсли;
					json.ЗаписатьИмяСвойства("imcCheckResult");   
					если позицияСтр.Свойство("imcCheckResult") тогда
						json.ЗаписатьЗначение(позицияСтр.imcCheckResult);                     
					иначе                                                                     
						json.ЗаписатьЗначение(false);                     
					конецЕсли;
					json.ЗаписатьИмяСвойства("imcStatusInfo");      
					если позицияСтр.Свойство("imcStatusInfo") тогда
						json.ЗаписатьЗначение(позицияСтр.imcStatusInfo);                     
					иначе                                                                    
						json.ЗаписатьЗначение(false);                     
					конецЕсли;
					json.ЗаписатьИмяСвойства("imcEstimatedStatusCorrect");
					если позицияСтр.Свойство("imcEstimatedStatusCorrect") тогда
						json.ЗаписатьЗначение(позицияСтр.imcEstimatedStatusCorrect);                     
					иначе
						json.ЗаписатьЗначение(false);                     
					конецЕсли;
					json.ЗаписатьИмяСвойства("ecrStandAloneFlag");
					json.ЗаписатьЗначение(false);                     					
				json.ЗаписатьКонецОбъекта();
				json.ЗаписатьКонецОбъекта();      
			конецЕсли;
			json.ЗаписатьКонецОбъекта(); //позиции
		конецЦикла;
	json.ЗаписатьКонецМассива();
	json.ЗаписатьИмяСвойства("payments");
	json.ЗаписатьНачалоМассива();                        
	СуммаОплаты = 0;
	Если ОбщиеСвйостваЧека.Наличными > 0 тогда
		json.ЗаписатьНачалоОбъекта();
		json.ЗаписатьИмяСвойства("type");
		json.ЗаписатьЗначение("cash");
		json.ЗаписатьИмяСвойства("sum");
		json.ЗаписатьЗначение(ОбщиеСвйостваЧека.Наличными);		
		json.ЗаписатьКонецОбъекта();
		СуммаОплаты = СуммаОплаты + ОбщиеСвйостваЧека.Наличными;
	конецЕсли;
	Если ОбщиеСвйостваЧека.Безналичными > 0 тогда
		json.ЗаписатьНачалоОбъекта();
		json.ЗаписатьИмяСвойства("type");
		json.ЗаписатьЗначение("electronically");
		json.ЗаписатьИмяСвойства("sum");
		json.ЗаписатьЗначение(ОбщиеСвйостваЧека.Безналичными);		
		json.ЗаписатьКонецОбъекта();
		СуммаОплаты = СуммаОплаты + ОбщиеСвйостваЧека.Безналичными;
	конецЕсли;
	Если ОбщиеСвйостваЧека.ЗачетАванса > 0 тогда
		json.ЗаписатьНачалоОбъекта();
		json.ЗаписатьИмяСвойства("type");
		json.ЗаписатьЗначение("prepaid");
		json.ЗаписатьИмяСвойства("sum");
		json.ЗаписатьЗначение(ОбщиеСвйостваЧека.ЗачетАванса);		
		json.ЗаписатьКонецОбъекта();
		СуммаОплаты = СуммаОплаты + ОбщиеСвйостваЧека.ЗачетАванса;
	конецЕсли;	
	Если ОбщиеСвйостваЧека.Кредит > 0 тогда
		json.ЗаписатьНачалоОбъекта();
		json.ЗаписатьИмяСвойства("type");
		json.ЗаписатьЗначение("credit");
		json.ЗаписатьИмяСвойства("sum");
		json.ЗаписатьЗначение(ОбщиеСвйостваЧека.Кредит);		
		json.ЗаписатьКонецОбъекта();
		СуммаОплаты = СуммаОплаты + ОбщиеСвйостваЧека.Кредит;
	конецЕсли;		
	json.ЗаписатьКонецМассива();
	json.ЗаписатьКонецОбъекта();		
	Если уровеньОтладки >= 3 тогда
		Сообщить("конец: СформироватьJSONЧека");	
	конецЕсли;			
	возврат json.Закрыть();
конецФункции //СформироватьJSONЧека

&НаКлиенте
функция ПолучитьДатуФайлаИзИменяФала(имяФайла)
	//ггггммддlogs1c
	возрДата = ТекущаяДата();
	try
		возрДата = Дата(Лев(имяФайла, 8));
	except
	endtry;
	Возврат возрДата;
конецФункции //ПолучитьДатуФайлаИзИменяФала

&НаКлиенте
процедура УдалитьФайлыЛогов(дирЛогФайлов, старшеДней = 30, уровеньОтладки = 1)
	НайденныеФайлы = НайтиФайлы(дирЛогФайлов, "*logs1c.txt", ЛОЖЬ);
	датаСтарая = ТекущаяДата() - 86400*старшеДней;
	датаФСтарая = Формат(датаСтарая, "ДФ=ггггММдд");
	Для Каждого файл из НайденныеФайлы цикл
		ДатаТекущФайла = ПолучитьДатуФайлаИзИменяФала(файл.ИмяБезРасширения);
		Если ДатаТекущФайла < датаСтарая тогда
			try
				УдалитьФайлы(файл.ПолноеИмя);
			except         
				Если уровеньОтладки>=3 тогда
					Сообщить(ОписаниеОшибки());
				конецЕсли;
			endtry;
		конецЕсли;
	конецЦикла;
конецПроцедуры //УдалитьФайлыЛогов

&НаКлиенте
функция ЗалогироватьОпреацию(уровеньЛога, операция, уровеньОтладки = 1, рез = TRUE, кодОшибки = "", описОшибки = "", сумма = 0) экспорт
	резЗаписиВЛог = ИСТИНА;
	Если уровеньЛога > уровеньОтладки тогда
		Возврат ИСТИНА;
	конецЕсли;
	текстЛогов = Новый ТекстовыйДокумент;
	дирЛогФайлов = ПолучитьДиректориюЛогФайлов();
	датаФ = Формат(ТекущаяДата(), "ДФ=ггггММдд");
	полноеИмяФайлаЛога = дирЛогФайлов + датаФ+"logs1c.txt";
	ФайлНаДиске = Новый Файл(полноеИмяФайлаЛога);
	Если ФайлНаДиске.Существует() тогда        
		текстЛогов.Прочитать(полноеИмяФайлаЛога);
	иначе                                 
		старшеДней = 10;
		УдалитьФайлыЛогов(дирЛогФайлов, старшеДней);
	конецЕсли;	                               			
	Ошибки = ""; выпНеВыл = "выполнена успешно";
	Если Не рез тогда
		Ошибки = "код:" + СокрЛП(кодОшибки)+". "+СокрЛП(кодОшибки);
		выпНеВыл = "не выполнена";
	конецЕсли;
	стрЗаписи = СокрЛП(ТекущаяУниверсальнаяДатаВМиллисекундах()) + ";" + СокрЛП(ТекущаяДата()) + ";" + "Операция:"+СокрЛП(операция)+" "+выпНеВыл+Ошибки;
	текстЛогов.ДобавитьСтроку(стрЗаписи);
	текстЛогов.Записать(полноеИмяФайлаЛога, КодировкаТекста.UTF8);
	Если уровеньОтладки >=3 тогда
		Сообщить(стрЗаписи);
	конецЕсли;
	Возврат резЗаписиВЛог;
конецФункции //ЗалогироватьОпреацию         

&НаКлиенте
функция ПолучитьСтруктуруИЗJSON(JSONСтрока) экспорт
	стрЧек = Новый Структура;
	Если СокрЛП(JSONСтрока) = "" тогда
		Возврат стрЧек;
	конецЕсли;
	текСтрМасс = стрЧек;
	ЧтениеJSON = Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(JSONСтрока);
	текИмяСвойства = "";	
	Пока ЧтениеJSON.Прочитать() цикл
		ТипJSON = ЧтениеJSON.ТипТекущегоЗначения;       
		Если ТипJSON=ТипЗначенияJSON.ИмяСвойства тогда
			текИмяСвойства = ЧтениеJSON.ТекущееЗначение;
			Продолжить;
		конецЕсли;	                                  
		Если ТипJSON = ТипЗначенияJSON.Комментарий или ТипJSON=ТипЗначенияJSON.Ничего 
		тогда
			Продолжить;
		конецЕсли;  
		Если текИмяСвойства = "" тогда
			Продолжить;
		конецЕсли;			
		Если ТипJSON = ТипЗначенияJSON.НачалоМассива тогда
			локСтр = "";
			Если ТипЗнч(текСтрМасс) = Тип("Массив") тогда
				текСтрМасс.Добавить(Новый Массив);
				локСтр = текСтрМасс[текСтрМасс.Количество()-1];
			иначе
				Если текИмяСвойства = "" тогда
					текИмяСвойства = "Начало";
				конецЕсли;
				текСтрМасс.Вставить(текИмяСвойства, Новый Массив);
				локСтр = "";                                    
				текСтрМасс.Свойство(текИмяСвойства, локСтр);
			конецЕсли;			
			локСтр.Добавить(текСтрМасс);
			текСтрМасс = локСтр;										
			Продолжить;
		конецЕсли;
		Если ТипJSON = ТипЗначенияJSON.КонецМассива тогда
			текСтрМасс = текСтрМасс[0];
			Продолжить;
		конецЕсли;		
		Если ТипJSON=ТипЗначенияJSON.НачалоОбъекта тогда
			локСтр = "";
			Если ТипЗнч(текСтрМасс) = Тип("Массив") тогда
				текСтрМасс.Добавить(Новый Структура);
				локСтр = текСтрМасс[текСтрМасс.Количество()-1];
			иначе
				текСтрМасс.Вставить(текИмяСвойства, Новый Структура);
				локСтр = "";                                    
				текСтрМасс.Свойство(текИмяСвойства, локСтр);
			конецЕсли;			
			локСтр.Вставить("Родитель", текСтрМасс);
			текСтрМасс = локСтр;							
			Продолжить;
		конецЕсли;
		Если ТипJSON=ТипЗначенияJSON.КонецОбъекта тогда
			Если текСтрМасс.Свойство("Родитель") тогда
				текСтрМасс = текСтрМасс.Родитель;
			конецЕсли;
			Продолжить;
		конецЕсли;                                       
		Если ТипЗнч(текСтрМасс) = Тип("Массив") тогда
			текСтрМасс.Добавить(ЧтениеJSON.ТекущееЗначение);
		иначе
			текСтрМасс.Вставить(текИмяСвойства, ЧтениеJSON.ТекущееЗначение);
		конецЕсли;
	конецЦикла; 	                       
	Возврат стрЧек;	
конецФункции //ПолучитьСтруктуруИЗJSON

&НаКлиенте
функция ПолучитьПереводТипаЧека(checktype) экспорт
	рез = "ПРОДАЖА";
	Если checktype = "sellReturn" тогда     
		рез = "ВОЗВРАТ";	
	конецЕсли;
	возврат рез;
конецФункции //ПолучитьПереводТипаЧека

&НаКлиенте
функция ПолучитьПереводНДС(ndstype) экспорт
	рез = "БЕЗ НДС";
	Если ndstype = "vat0" тогда     
		рез = "НДС 0%";	
	иначеЕсли ndstype = "vat10" тогда
		рез = "НДС 10%";	
	иначеЕсли ndstype = "vat110" тогда
		рез = "НДС 10/110";	
	иначеЕсли ndstype = "vat20" тогда
		рез = "НДС 20%";	
	иначеЕсли ndstype = "vat120 " тогда
		рез = "НДС 20/120";	
	конецЕсли;
	возврат рез;
конецФункции //ПолучитьПереводНДС

&НаКлиенте
функция ПолучитьПереводСпособаРасчета(paymentMethod) экспорт
	рез = "полный расчет";
	Если paymentMethod = "fullPrepayment" тогда     
		рез = "предоплата 100%";	
	иначеЕсли paymentMethod = "prepayment" тогда
		рез = "предоплата";	
	иначеЕсли paymentMethod = "advance" тогда
		рез = "аванс";	
	иначеЕсли paymentMethod = "partialPayment" тогда
		рез = "частичный расчет";	
	иначеЕсли paymentMethod = "credit" тогда
		рез = "передача в рассрочку";	
	иначеЕсли paymentMethod = "creditPayment" тогда
		рез = "оплата рассрочки";			
	конецЕсли;
	возврат рез;
конецФункции //ПолучитьПереводСпособаРасчета

&НаКлиенте
функция ПолучитьБуквуМИзРезультатаПроверки(резПроверки) экспорт
	рез = "[М]";
	Если резПроверки.imcCheckFlag и резПроверки.imcCheckResult и резПроверки.imcStatusInfo и 
		резПроверки.imcEstimatedStatusCorrect тогда
		рез = "[М+]";
	иначеЕсли резПроверки.imcCheckFlag тогда
		Если резПроверки.imcCheckResult и резПроверки.imcStatusInfo и НЕ резПроверки.imcEstimatedStatusCorrect тогда
			рез = "[М-]";
		конецЕсли;    
		Если НЕ резПроверки.imcCheckResult и резПроверки.imcStatusInfo и НЕ резПроверки.imcEstimatedStatusCorrect тогда
			рез = "[М-]";
		конецЕсли;    		
		Если НЕ резПроверки.imcCheckResult и НЕ резПроверки.imcStatusInfo и НЕ резПроверки.imcEstimatedStatusCorrect тогда
			рез = "[М-]";
		конецЕсли;    				
	конецЕсли;   
	Возврат рез;
конецФункции //ПолучитьБуквуМИзРезультатаПроверки                                           

&НаКлиенте
функция ПеревестиТипОплаты(typeOfPayment) экспорт
	рез = "Наличными";
	Если typeOfPayment = "electronically" тогда     
		рез = "Безналичными";	
	иначеЕсли typeOfPayment = "prepaid" тогда     
		рез = "ЗачетАванса";	
	иначеЕсли typeOfPayment = "credit" тогда     
		рез = "Кредит";			
	конецЕсли;
	возврат рез;
конецФункции //ПеревестиТипОплаты   

&НаКлиенте
функция ПреобразоватьВЧитабельныйВидСтрктуруЧека(фирмаКассыНазв, ИННКассы, чекЗадание, ответЧек) экспорт
	всеПараметрыЧека = Новый Структура;
	всеПараметрыЧека.Вставить("ТипЧека", ПолучитьПереводТипаЧека(чекЗадание.type));
	всеПараметрыЧека.Вставить("ФирмаНазвание", фирмаКассыНазв);
	всеПараметрыЧека.Вставить("ИННФирмы", ИННКассы);
	всеПараметрыЧека.Вставить("Кассир", чекЗадание.operator.name);
	
	СуммаЧека = 0; текИнд = 1;
	для Каждого стрПозиции из чекЗадание.items цикл
		Если текИнд = 1 тогда
			текИнд = текИнд + 1;
			Продолжить;
		конецЕсли;		
		СуммаЧека  = СуммаЧека + стрПозиции.amount;
		текИнд = текИнд + 1;
	конецЦикла;			
	
	всеПараметрыЧека.Вставить("НомерЧека", "");
	всеПараметрыЧека.Вставить("НомерСмены", "");
	всеПараметрыЧека.Вставить("ДатаИВремяЧека", СокрЛП(ТекущаяДата()));
	всеПараметрыЧека.Вставить("СуммаЧека", СуммаЧека);
	всеПараметрыЧека.Вставить("РегНомерККТ", "");
	всеПараметрыЧека.Вставить("НомерФН", "");
	всеПараметрыЧека.Вставить("ФискалПризнак", "");	
	Если ответЧек.Свойство("fiscalParams") тогда
		всеПараметрыЧека.Вставить("НомерЧека", ответЧек.fiscalParams.fiscalDocumentNumber);
		всеПараметрыЧека.Вставить("НомерСмены", ответЧек.fiscalParams.shiftNumber);
		всеПараметрыЧека.Вставить("ДатаИВремяЧека", ответЧек.fiscalParams.fiscalDocumentDateTime);
		всеПараметрыЧека.Вставить("СуммаЧека", ответЧек.fiscalParams.total);
		всеПараметрыЧека.Вставить("РегНомерККТ", ответЧек.fiscalParams.registrationNumber);
		всеПараметрыЧека.Вставить("НомерФН", ответЧек.fiscalParams.fnNumber);
		всеПараметрыЧека.Вставить("ФискалПризнак", ответЧек.fiscalParams.fiscalDocumentSign);	
	конецЕсли;
	
	ТипЧекаВQRКоде= "1";
	Если чекЗадание.type = "sellReturn" тогда
		ТипЧекаВQRКоде = "2";
	конецЕсли;
	СтрокаQRКода = "";
	Если ответЧек.Свойство("fiscalParams") тогда
		СтрокаQRКода = ПолучитьСтрокуQRЧека(ответЧек.fiscalParams.fiscalDocumentDateTime, 
								ответЧек.fiscalParams.total, ответЧек.fiscalParams.fnNumber, 
								ответЧек.fiscalParams.fiscalDocumentNumber, 
								ответЧек.fiscalParams.fiscalDocumentSign, ТипЧекаВQRКоде);	
	конецЕсли;
	всеПараметрыЧека.Вставить("СтрокаQRКода", СтрокаQRКода);
	Если чекЗадание.Свойство("taxationType") тогда
		всеПараметрыЧека.Вставить("СистемаНалогообложения", ПолучитьПереводСистемыНалогообложения(чекЗадание.taxationType));
	конецЕсли;
	всеПараметрыЧека.Вставить("ТаблицаОплат", Новый Структура);
	текТаблицаОплат = всеПараметрыЧека.ТаблицаОплат;
	текИнд = 1;
	для Каждого стрОплат из чекЗадание.payments цикл
		Если текИнд = 1 тогда
			текИнд = текИнд + 1;
			Продолжить;
		конецЕсли;
		текТаблицаОплат.Вставить(ПеревестиТипОплаты(стрОплат.type), стрОплат.sum);
		текИнд = текИнд + 1;
	конецЦикла;
	всеПараметрыЧека.Вставить("Позиции", Новый Массив);
	текТаблицаПозиций = всеПараметрыЧека.Позиции;
	текИнд = 1;
	для Каждого стрПозиции из чекЗадание.items цикл
		Если текИнд = 1 тогда
			текИнд = текИнд + 1;
			Продолжить;
		конецЕсли;		
		текТаблицаПозиций.Добавить(Новый Структура);
		текДобПозиция = текТаблицаПозиций.Получить(текТаблицаПозиций.Количество() - 1);
		текДобПозиция.Вставить("Наименование", стрПозиции.name);
		текДобПозиция.Вставить("Цена", стрПозиции.price);
		текДобПозиция.Вставить("Количество", стрПозиции.quantity);
		текДобПозиция.Вставить("Сумма", стрПозиции.amount);
		текДобПозиция.Вставить("СтавкаНДС", ПолучитьПереводНДС(стрПозиции.tax.type));
		текДобПозиция.Вставить("ПредметРасчета", ПолучитьПереводПредметаРасчета(стрПозиции.paymentObject));
		текДобПозиция.Вставить("СпособРасчета", ПолучитьПереводСпособаРасчета(стрПозиции.paymentMethod));
		Если стрПозиции.Свойство("imcParams") тогда
			текДобПозиция.Вставить("РезультатПроверкиМарки", "[M?]");
			Если стрПозиции.imcParams.Свойство("itemInfoCheckResult") тогда
				текДобПозиция.Вставить("РезультатПроверкиМарки", ПолучитьБуквуМИзРезультатаПроверки(стрПозиции.imcParams.itemInfoCheckResult));
			конецЕсли;
			//текДобПозиция.Вставить("Марка", ПеревестиМаркуИзBASE64(стрПозиции.imcParams.imc, true));
		конецЕсли;
		текИнд = текИнд + 1;
	конецЦикла;		
	Возврат всеПараметрыЧека;
конецФункции //ПреобразоватьВЧитабельныйВидСтрктуруЧека

&НаКлиенте
Функция ВыполнитьЗаданиеJSONАсинх(ФормаВладелец, НастройкаиСвязиСКТТ, JSONЗадание, ОтветJSON) экспорт
	ПарамДляФормы = Новый Структура;
	ПарамДляФормы.Вставить("ПараметрМойПараметр", "Значение параметра");
	//ФормаОжиданияОтвета = ПолучитьФорму("ОбщаяФорма.ОкноПродавца", ПарамДляФормы, ФормаВладелец);
	имяОткрываемойФормы = Объект.РеквизитОбъектаИмяОбработки+".Форма.ФормаОжиданияОтветаОтККТ";
	//Сообщить(имяОткрываемойФормы);	
	
	//ФормаОжиданияОтвета = ПолучитьФорму("ОбщаяФорма.ФормаОжиданияОтветаОтККТ", ПарамДляФормы, ФормаВладелец);
	ФормаОжиданияОтвета = ПолучитьФорму(имяОткрываемойФормы, ПарамДляФормы, ФормаВладелец);
	описаниеПриЗакрытии = Новый ОписаниеОповещения("ПослеЗакртияФормыПолученияОтветаОтККТ", ЭтотОбъект);
	ФормаОжиданияОтвета.ОписаниеОповещенияОЗакрытии = описаниеПриЗакрытии;
	//ОткрытьФорму("ОбщаяФорма.ФормаОжиданияОтветаОтККТ", ПарамДляФормы
	ФормаОжиданияОтвета.Открыть();
	//ПодключитьОбработчикОжидания("ПечатьЧекаНаККТКлиент.ОнТик", 1, false);
конецФункции //ВыполнитьЗаданиеJSONАсинх

&НаКлиенте
функция ПолучитьЗнчениеПоляИзJSON(JSONСтрока, названиеПоля) экспорт
	ЗначениеПоля = "";
	ЧтениеJSON = Новый ЧтениеJSON;	
	ЧтениеJSON.УстановитьСтроку(JSONСтрока);
	текИмяСвойства = "";	
	Пока ЧтениеJSON.Прочитать() цикл
		ТипJSON = ЧтениеJSON.ТипТекущегоЗначения;       
		Если текИмяСвойства = названиеПоля тогда
			ЗначениеПоля=ЧтениеJSON.ТекущееЗначение;
			Прервать;
		конецЕсли;
		Если ТипJSON=ТипЗначенияJSON.ИмяСвойства тогда
			текИмяСвойства = ЧтениеJSON.ТекущееЗначение;
		конецЕсли;
	конецЦикла;     
	Возврат ЗначениеПоля;	
конецФункции //ПолучитьЗнчениеПоляИзJSON

&НаКлиенте
функция ПолучитьПолноеИмяФайлаНастроек()
	текКаталогДляНастроек = КаталогВременныхФайлов();
	текКаталогДляНастроек = СтрЗаменить(текКаталогДляНастроек, "Local\Temp\", "");
	текКаталогДляНастроек = текКаталогДляНастроек + "Roaming\";
	КаталогНаДиске = Новый Файл(текКаталогДляНастроек);
	Если НЕ КаталогНаДиске.Существует() тогда        
		СоздатьКаталог(текКаталогДляНастроек);
	конецЕсли;	                                    
	текКаталогДляНастроек = текКаталогДляНастроек + "ATOL\";
	КаталогНаДиске = Новый Файл(текКаталогДляНастроек);
	Если НЕ КаталогНаДиске.Существует() тогда        
		СоздатьКаталог(текКаталогДляНастроек);
	конецЕсли;		                                  
	текКаталогДляНастроек = текКаталогДляНастроек + "drivers10\";
	КаталогНаДиске = Новый Файл(текКаталогДляНастроек);
	Если НЕ КаталогНаДиске.Существует() тогда        
		СоздатьКаталог(текКаталогДляНастроек);
	конецЕсли;		                                  
	текКаталогДляНастроек = текКаталогДляНастроек + "options\";             
	директорияЛогФайловАтол = СокрЛП(текКаталогДляНастроек);
	КаталогНаДиске = Новый Файл(текКаталогДляНастроек);
	Если НЕ КаталогНаДиске.Существует() тогда        
		СоздатьКаталог(текКаталогДляНастроек);
	конецЕсли;		   
	имяФайлаНастроек = "options.ini";
	Возврат текКаталогДляНастроек+имяФайлаНастроек;	
конецФункции //ПолучитьПолноеИмяФайлаНастроек

&НаКлиенте
Процедура ПолучитьКлючИЗначениеИзСтроки(строчкаНастройки, ключ, значение)
	позТочкиСЗап = Найти(строчкаНастройки, ";");
	ключ = Лев(строчкаНастройки, позТочкиСЗап - 1);
	значение = Сред(строчкаНастройки, позТочкиСЗап + 1);	
конецПроцедуры //ПолучитьКлючИЗначениеИзСтроки

&НаКлиенте
функция ПреобразоватьИзСтрокиВЗначениеНастройки(Тип, ключ, значениеСтрока)
	рез = СокрЛП(значениеСтрока);
	Если Тип = Тип("Число") тогда
		рез = Число(значениеСтрока);
	иначеЕсли Тип = Тип("Булево") тогда
		рез = ИСТИНА;
		Если значениеСтрока = "false" тогда
			рез = ЛОЖЬ;
		конецЕсли;
	конецЕсли;
	Возврат рез;
конецФункции //ПреобразоватьИзСтрокиВЗначениеНастройки

&НаКлиенте
функция ДобавитьНастройку(структураНастройкаиСвязиСКТТ, Наимен, Тип, ЗначПоУмолч = НЕОПРЕДЕЛЕНО, Описание = "", СписокВозможныхЗначений = НЕОПРЕДЕЛЕНО, НаимВИнетерфейсе = "")
	структураНастройкаиСвязиСКТТ.Вставить(Наимен, СоздатьИзначальнуюСтруктутурОднойНастройки(Наимен, Тип, ЗначПоУмолч, Описание, СписокВозможныхЗначений, НаимВИнетерфейсе));
конецФункции //ДобавитьНастройку

&НаКлиенте
функция Подключиться(COMДрайверККТ10 = Неопределено, НастройкаиСвязиСКТТ = Неопределено, описаниеОшибки = "", КодОшибки = 0)
	УровеньОтладки = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "УровеньОтладки");
	ФлТестовыйРежим = ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "ФлТестовыйРежим");	
	
	Если УровеньОтладки >=3 тогда
		Сообщить("начало: Подключиться");		
	конецЕсли;
	рез = ЛОЖЬ;                                      
	Если ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "ТипСвязи") = "web сервер" 
	тогда
		//проврека связи с ККТ через http запрос
		Если УровеньОтладки >=3 тогда
			Сообщить("web подключение ещё не реализовано");		
			Сообщить("конец: Подключиться");		
		конецЕсли;			
		Возврат рез;
	конецЕсли;
	COMДрайверККТ10 = ПолучитьОбъектДрайвера10(COMДрайверККТ10, УровеньОтладки, ФлТестовыйРежим, описаниеОшибки);
	Если COMДрайверККТ10 = Неопределено тогда
		стрОшибки = "Ошибка создание COM объекта драйвера (возможно драйвер ККТ АТОЛ ещё не установлен:" + СокрЛП(описаниеОшибки);
		Если УровеньОтладки >=2 тогда
			Сообщить(стрОшибки);
		конецЕсли;    
		описаниеОшибки = стрОшибки;
		КодОшибки = -1;
		ЗалогироватьОпреацию(0, "Подключение к ККТ", УровеньОтладки, False, , стрОшибки);
		Если уровеньОтладки >=3 тогда
			Сообщить("драйвер ККТ атол не установлен");		
			Сообщить("конец: Подключиться");		
		конецЕсли;					
		Возврат рез;
	конецЕсли;                   
	
	Если ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "ТипСвязи") = "web сервер" тогда
		//если черз веб - сервер, то просто отсылка get запросов
		//нужен, соответсвенно IP адрес web сервера ККТ
		//НастройкаСвязи.IPWebСеврера
	иначеЕсли ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "ТипСвязи") = "по IP ккт" тогда
		//касса имеет свой ip
		COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_MODEL, COMДрайверККТ10.LIBFPTR_MODEL_ATOL_AUTO);
		COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_PORT, COMДрайверККТ10.LIBFPTR_PORT_TCPIP);
		COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_IPADDRESS, ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "IP"));
		COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_IPPORT, ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "Порт_IPККТ"));
	иначеЕсли ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "ТипСвязи") = "через сервер ККТ" тогда
		//через сервер ККТ - должен быть открыт порт на компьютере с к кассой 19524                                      
		COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_MODEL, COMДрайверККТ10.LIBFPTR_MODEL_ATOL_AUTO);
		COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_REMOTE_SERVER_ADDR, ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "IP"));
		COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_REMOTE_SERVER_CONNECTION_TIMEOUT, ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "Таймаут_севрерККТ"));
		//и com порту                                                                                            
		Если ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "НомерCOM") > 0 тогда
    		COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_PORT, COMДрайверККТ10.LIBFPTR_PORT_COM);
	    	COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_COM_FILE, ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "НомерCOM"));
    		COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_BAUDRATE, COMДрайверККТ10.LIBFPTR_PORT_BR_115200);					
		иначе
			COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_PORT, COMДрайверККТ10.LIBFPTR_PORT_USB);
		конецЕсли;
    	COMДрайверККТ10.applySingleSettings();	
	иначеЕсли ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "ТипСвязи") = "через COM/USB" тогда
		//по com порту                                                                                                   
		Если ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "НомерCOM") > 0 тогда
    		COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_PORT, COMДрайверККТ10.LIBFPTR_PORT_COM);
	    	COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_COM_FILE, ПолучитьЗначениеНастройки(НастройкаиСвязиСКТТ, "НомерCOM"));
    		COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_BAUDRATE, COMДрайверККТ10.LIBFPTR_PORT_BR_115200);
		иначе
			COMДрайверККТ10.setSingleSetting(COMДрайверККТ10.LIBFPTR_SETTING_PORT, COMДрайверККТ10.LIBFPTR_PORT_USB);
		конецЕсли;
	иначе
		//ничего не делаем, возможно кассовый аппарат сам подцепится по текщий настройкам драйвера
	конецЕсли;	
	
	рез = ИСТИНА; резОткрыт = 0; 
	Если Не ФлТестовыйРежим тогда
		резОткрыт = COMДрайверККТ10.Open();
	конецЕсли;               
	Если резОткрыт <> 0 тогда
		кодОшибки = COMДрайверККТ10.errorCode();
		описаниеОшибки = COMДрайверККТ10.errorDescription();          
		ЗалогироватьОпреацию(0, "Подключение к ККТ", УровеньОтладки, False, кодОшибки, описаниеОшибки);
		рез = ЛОЖЬ;
	конецЕсли;
	Если УровеньОтладки >=3 тогда
		Сообщить("конец: Подключиться");		
	конецЕсли;	
	Возврат рез;
конецФункции //Подключиться

&НаКлиенте
функция Отключиться(COMДрайверККТ10 = Неопределено, уровеньОтладки = 1, флТестовыйРежим = FALSE, описаниеОшибки = "", КодОшибки = 0)
	рез = ИСТИНА;
	Если уровеньОтладки >= 3 тогда
		Сообщить("начало: Отключиться");
	конецЕсли;                     	
	резОтключения = 0;
	если НЕ флТестовыйРежим тогда
		резОтключения = COMДрайверККТ10.Close();
	конецЕсли;
	Если резОтключения <> 0 тогда
		КодОшибки = COMДрайверККТ10.errorCode();
		описаниеОшибки = COMДрайверККТ10.errorDescription();          
		ЗалогироватьОпреацию(0, "Отключение от ККТ", уровеньОтладки, False, кодОшибки, описаниеОшибки);
		рез = ЛОЖЬ;
	конецЕсли;		
	Если уровеньОтладки >= 3 тогда
		Сообщить("конец: Отключиться");
	конецЕсли;                     		
	возврат рез;
конецФункции //Отключиться

&НаКлиенте
функция ПолучитьМокОтветНаJSONКомманду(JSONЗадание, уровеньОтладки = 1, результатГотов = ИСТИНА)
	Если уровеньОтладки >= 3 тогда
		Сообщить("начало: ПолучитьМокОтветНаJSONКомманду");	
	конецЕсли;	  
	типОперации = ПолучитьЗнчениеПоляИзJSON(JSONЗадание, "type");
	json = Новый ЗаписьJSON;                   
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб);
	json.УстановитьСтроку(ПараметрыЗаписиJSON);
	json.ЗаписатьНачалоОбъекта();	
	Если Найти(JSONЗадание, "getMarkingCodeValidationStatus") > 0 тогда
		//Если результатГотов тогда
			json.ЗаписатьИмяСвойства("ready");
			json.ЗаписатьЗначение(результатГотов);
			json.ЗаписатьИмяСвойства("sentImcRequest");
			json.ЗаписатьЗначение(true);               			
			json.ЗаписатьИмяСвойства("driverError");
			json.ЗаписатьНачалоОбъекта();
			json.ЗаписатьИмяСвойства("code");
			json.ЗаписатьЗначение(0);               						
			json.ЗаписатьКонецОбъекта();			
			json.ЗаписатьИмяСвойства("onlineValidation");
			json.ЗаписатьНачалоОбъекта();
				json.ЗаписатьИмяСвойства("itemInfoCheckResult");
				json.ЗаписатьНачалоОбъекта();                       
					json.ЗаписатьИмяСвойства("imcCheckFlag");
					json.ЗаписатьЗначение(true);               														
					json.ЗаписатьИмяСвойства("imcCheckResult");
					json.ЗаписатьЗначение(true);               														
					json.ЗаписатьИмяСвойства("imcStatusInfo");
					json.ЗаписатьЗначение(true);               														
					json.ЗаписатьИмяСвойства("ecrStandAloneFlag");
					json.ЗаписатьЗначение(true);               																			
				json.ЗаписатьКонецОбъекта();						
				json.ЗаписатьИмяСвойства("markOperatorItemStatus");
				json.ЗаписатьЗначение("itemEstimatedStatusCorrect");               										
				json.ЗаписатьИмяСвойства("markOperatorResponse");
				json.ЗаписатьНачалоОбъекта();
					json.ЗаписатьИмяСвойства("responseStatus");
					json.ЗаписатьЗначение(true);               														
					json.ЗаписатьИмяСвойства("itemStatusCheck");
					json.ЗаписатьЗначение(true);               																							
				json.ЗаписатьКонецОбъекта();										
				json.ЗаписатьИмяСвойства("markOperatorResponseResult");
				json.ЗаписатьЗначение("correct");               										
				json.ЗаписатьИмяСвойства("imcType");
				json.ЗаписатьЗначение("imcFmVerifyCode88");               										
				json.ЗаписатьИмяСвойства("imcBarcode");
				json.ЗаписатьЗначение("MDEwMjkwMDAwMDQ3NTgzMDIxTWRFZng6WHA2WUZkNx05MTgwMjkdOTJhUUlRa0k3b0hYbXpHL21kS3h6Q1VDS1RKSFhvQk9EZG1DZE01azhRajdnYVpWMnhibjY2eEJYR0lLcnRmdnFQSU5BMmprYmp5ajMvTytreTZvdTFOQT09");               										
				json.ЗаписатьИмяСвойства("imcModeProcessing");
				json.ЗаписатьЗначение(0);               														
			json.ЗаписатьКонецОбъекта();						
		//иначе     			
		//конецЕсли;
	иначеЕсли Найти(JSONЗадание, "acceptMarkingCode") > 0 тогда
		json.ЗаписатьИмяСвойства("itemInfoCheckResult");
		json.ЗаписатьНачалоОбъекта();
			json.ЗаписатьИмяСвойства("ecrStandAloneFlag");
			json.ЗаписатьЗначение(false);
			json.ЗаписатьИмяСвойства("imcCheckFlag");
			json.ЗаписатьЗначение(true);						
			json.ЗаписатьИмяСвойства("imcCheckResult");
			json.ЗаписатьЗначение(true);						
			json.ЗаписатьИмяСвойства("imcEstimatedStatusCorrect");
			json.ЗаписатьЗначение(true);						
			json.ЗаписатьИмяСвойства("imcStatusInfo");
			json.ЗаписатьЗначение(true);									
		json.ЗаписатьКонецОбъекта();
	иначеЕсли (Найти(JSONЗадание, "sell") > 0) или (Найти(JSONЗадание, "sellReturn") > 0) тогда
		json.ЗаписатьИмяСвойства("fiscalParams");
		json.ЗаписатьНачалоОбъекта();
			json.ЗаписатьИмяСвойства("fiscalDocumentDateTime");
			json.ЗаписатьЗначение("2023-11-09T09:54:00+03:00");
			json.ЗаписатьИмяСвойства("fiscalDocumentNumber");
			json.ЗаписатьЗначение(123);						
			json.ЗаписатьИмяСвойства("fiscalDocumentSign");
			json.ЗаписатьЗначение("1494325660");						
			json.ЗаписатьИмяСвойства("fiscalReceiptNumber");
			json.ЗаписатьЗначение(1);						
			json.ЗаписатьИмяСвойства("fnNumber");
			json.ЗаписатьЗначение("9999078900000961");									
			json.ЗаписатьИмяСвойства("registrationNumber");
			json.ЗаписатьЗначение("0000000001002292");									
			json.ЗаписатьИмяСвойства("shiftNumber");
			json.ЗаписатьЗначение(12);									
			json.ЗаписатьИмяСвойства("total");
			json.ЗаписатьЗначение(72.34);									
			json.ЗаписатьИмяСвойства("fnsUrl");
			json.ЗаписатьЗначение("www.nalog.gov.ru");												
		json.ЗаписатьКонецОбъекта();
		json.ЗаписатьИмяСвойства("warnings");               
		json.ЗаписатьЗначение("");						
	иначеЕсли Найти(JSONЗадание, "closeShift") тогда
		json.ЗаписатьИмяСвойства("fiscalParams");
		json.ЗаписатьНачалоОбъекта();
			json.ЗаписатьИмяСвойства("fiscalDocumentDateTime");
			json.ЗаписатьЗначение("");
			json.ЗаписатьИмяСвойства("fiscalDocumentNumber");
			json.ЗаписатьЗначение(69);						
			json.ЗаписатьИмяСвойства("fiscalDocumentSign");
			json.ЗаписатьЗначение("1494325660");						
			json.ЗаписатьИмяСвойства("fnNumber");
			json.ЗаписатьЗначение("9999078900000961");									
			json.ЗаписатьИмяСвойства("registrationNumber");
			json.ЗаписатьЗначение("0000000001002292");									
			json.ЗаписатьИмяСвойства("shiftNumber");
			json.ЗаписатьЗначение(14);									
			json.ЗаписатьИмяСвойства("receiptsCount");
			json.ЗаписатьЗначение(72);									
			json.ЗаписатьИмяСвойства("fnsUrl");
			json.ЗаписатьЗначение("www.nalog.gov.ru");												
		json.ЗаписатьКонецОбъекта();
		json.ЗаписатьИмяСвойства("warnings");               
		json.ЗаписатьЗначение("");						
	иначеЕсли Найти(JSONЗадание, "getRegistrationInfo") тогда
		json.ЗаписатьИмяСвойства("organization");
		json.ЗаписатьНачалоОбъекта();
			json.ЗаписатьИмяСвойства("name");
			json.ЗаписатьЗначение("ООО ""Организация какая-то""");
			json.ЗаписатьИмяСвойства("taxationTypes");
			json.ЗаписатьНачалоМассива();
				json.ЗаписатьЗначение("patent"); //osn, usnIncome, usnIncomeOutcome, esn, patent
			json.ЗаписатьКонецМассива();
		json.ЗаписатьКонецОбъекта();		
	иначеЕсли Найти(JSONЗадание, "getShiftStatus") тогда
		json.ЗаписатьИмяСвойства("shiftStatus");
		json.ЗаписатьНачалоОбъекта();
			json.ЗаписатьИмяСвойства("documentsCount");
			json.ЗаписатьЗначение(2);
			json.ЗаписатьИмяСвойства("state");
			json.ЗаписатьЗначение("opened"); //opened, closed, expired
		json.ЗаписатьКонецОбъекта();				
	иначе                                  
		json.ЗаписатьИмяСвойства("operation");    
		json.ЗаписатьЗначение(типОперации);
		json.ЗаписатьИмяСвойства("result");
		json.ЗаписатьЗначение("мок ответ от ККК");
		json.ЗаписатьИмяСвойства("result code");
		json.ЗаписатьЗначение(0);				
	конецЕсли;
	json.ЗаписатьКонецОбъекта();
	Если уровеньОтладки >= 3 тогда
		Сообщить("конец: ПолучитьМокОтветНаJSONКомманду");	
	конецЕсли;					
	Возврат json.Закрыть();
конецФункции //ПолучитьМокОтветНаJSONКомманду

&НаКлиенте
процедура ПроверитьИИсправитьСтрокиОплат(ОбщиеСвойстваЧека, СуммаЧека) экспорт
	Если НЕ ОбщиеСвойстваЧека.Свойство("Наличными") тогда
		ОбщиеСвойстваЧека.Вставить("Наличными", 0);
	конецЕсли;
	Если НЕ ОбщиеСвойстваЧека.Свойство("Безналичными") тогда
		ОбщиеСвойстваЧека.Вставить("Безналичными", 0);
	конецЕсли;
	Если НЕ ОбщиеСвойстваЧека.Свойство("ЗачетАванса") тогда
		ОбщиеСвойстваЧека.Вставить("ЗачетАванса", 0);
	конецЕсли;
	Если НЕ ОбщиеСвойстваЧека.Свойство("Кредит") тогда
		ОбщиеСвойстваЧека.Вставить("Кредит", 0);
	конецЕсли;
	Если НЕ ОбщиеСвойстваЧека.Свойство("Сдача") тогда
		ОбщиеСвойстваЧека.Вставить("Сдача", 0);
	конецЕсли;	
	всегоСуммаОплат = ОбщиеСвойстваЧека.Наличными+ОбщиеСвойстваЧека.Безналичными+
						ОбщиеСвойстваЧека.ЗачетАванса+ОбщиеСвойстваЧека.Кредит;	
	всегоСуммаОплатИсключаяНаличные = ОбщиеСвойстваЧека.Безналичными+
						ОбщиеСвойстваЧека.ЗачетАванса+ОбщиеСвойстваЧека.Кредит;							
	Если всегоСуммаОплатИсключаяНаличные > СуммаЧека тогда
		СуммаНаКоторуюНадоУменьшить = всегоСуммаОплатИсключаяНаличные - СуммаЧека;
		//уменьшаем
		Если ОбщиеСвойстваЧека.Кредит > СуммаНаКоторуюНадоУменьшить тогда
			ОбщиеСвойстваЧека.Кредит = ОбщиеСвойстваЧека.Кредит - СуммаНаКоторуюНадоУменьшить;
			СуммаНаКоторуюНадоУменьшить = 0;
		иначе
			ОбщиеСвойстваЧека.Кредит = 0;
			СуммаНаКоторуюНадоУменьшить = СуммаНаКоторуюНадоУменьшить - ОбщиеСвойстваЧека.Кредит;
		конецЕсли;
		Если ОбщиеСвойстваЧека.ЗачетАванса > СуммаНаКоторуюНадоУменьшить тогда
			ОбщиеСвойстваЧека.ЗачетАванса = ОбщиеСвойстваЧека.ЗачетАванса - СуммаНаКоторуюНадоУменьшить;
			СуммаНаКоторуюНадоУменьшить = 0;
		иначе
			ОбщиеСвойстваЧека.ЗачетАванса = 0;
			СуммаНаКоторуюНадоУменьшить = СуммаНаКоторуюНадоУменьшить - ОбщиеСвойстваЧека.ЗачетАванса;
		конецЕсли;		
		Если ОбщиеСвойстваЧека.Безналичными > СуммаНаКоторуюНадоУменьшить тогда
			ОбщиеСвойстваЧека.Безналичными = ОбщиеСвойстваЧека.Безналичными - СуммаНаКоторуюНадоУменьшить;
			СуммаНаКоторуюНадоУменьшить = 0;
		иначе
			ОбщиеСвойстваЧека.Безналичными = 0;
			СуммаНаКоторуюНадоУменьшить = СуммаНаКоторуюНадоУменьшить - ОбщиеСвойстваЧека.Безналичными;
		конецЕсли;				
	конецЕсли;
	всегоСуммаОплат = ОбщиеСвойстваЧека.Наличными+ОбщиеСвойстваЧека.Безналичными+
						ОбщиеСвойстваЧека.ЗачетАванса+ОбщиеСвойстваЧека.Кредит;	
	всегоСуммаОплатИсключаяНаличные = ОбщиеСвойстваЧека.Безналичными+
						ОбщиеСвойстваЧека.ЗачетАванса+ОбщиеСвойстваЧека.Кредит;								
	
	Если всегоСуммаОплат < СуммаЧека тогда
		ОбщиеСвойстваЧека.Наличными = ОбщиеСвойстваЧека.Наличными + (СуммаЧека - всегоСуммаОплат);
	конецЕсли;
	Если всегоСуммаОплат > СуммаЧека тогда
		ОбщиеСвойстваЧека.Вставить("Сдача", всегоСуммаОплат - СуммаЧека);
	конецЕсли;		
конецПроцедуры //ПроверитьИИсправитьСтрокиОплат

&НаКлиенте
процедура ПослеЗакрытияФормыПредварительногоПросмотраЧека(резЗакрытияПредварительногоПросмотраЧека, всеПараметрыЧека) экспорт
	стрРезПечатиЧека = Новый Структура;
	резЗакрытияФормыПредваритПросмЧека = ИСТИНА;
	Если резЗакрытияПредварительногоПросмотраЧека = НЕОПРЕДЕЛЕНО тогда
		резЗакрытияФормыПредваритПросмЧека = ЛОЖЬ;
	иначеЕсли Не резЗакрытияПредварительногоПросмотраЧека.Результат тогда
		резЗакрытияФормыПредваритПросмЧека = ЛОЖЬ;
	конецЕсли;
	Если НЕ резЗакрытияФормыПредваритПросмЧека тогда
		//пользователь отменил печать чека
		стрОписаниеОшибки = "Печать чека отменена пользователем";
		стрРезПечатиЧека.Вставить("Результат", ЛОЖЬ);
		стрРезПечатиЧека.Вставить("КодОшибки", -2);
		стрРезПечатиЧека.Вставить("описаниеОшибки", стрОписаниеОшибки);
		стрРезПечатиЧека.Вставить("COMДрайверККТ10", всеПараметрыЧека.COMДрайверККТ10);
		ВыполнитьОбработкуОповещения(всеПараметрыЧека.ОповещениеПослеПечатиЧека, стрРезПечатиЧека);
		Возврат;	
		//если печать чека отменена пользловатлем
	иначеЕсли резЗакрытияПредварительногоПросмотраЧека.Свойство("ТаблицаОплат") тогда
		//меням суммы оплат
		//ЗаполнитьНовымиСуммамиОплат(всеПараметрыЧека.списПараметровЧека, резЗакрытияПредварительногоПросмотраЧека.ТаблицаОплат);
		для Каждого стрОплатНовые из резЗакрытияПредварительногоПросмотраЧека.ТаблицаОплат цикл
			всеПараметрыЧека.списПараметровЧека.Вставить(стрОплатНовые.Ключ, стрОплатНовые.Значение);
		конецЦикла;			
	конецЕсли;
	
	НеЗакрыватьСоединениеСККТ = ПолучитьЗначениеНастройки(всеПараметрыЧека.НастройкаиСвязиСКТТ, "неЗакрыватьСоедиениеВОднойТранзакцииПечатиЧека");
	УровеньОтладки = ПолучитьЗначениеНастройки(всеПараметрыЧека.НастройкаиСвязиСКТТ, "УровеньОтладки");
	ФлТестовыйРежим = ПолучитьЗначениеНастройки(всеПараметрыЧека.НастройкаиСвязиСКТТ, "ФлТестовыйРежим");
	
	//получаем статус смены
	исходящийJSON = СформироватьJSONПолученияСтатусаСмены(УровеньОтладки);
	ответJSON = "";
	описаниеОшибки = ""; КодОшибки = 0; ПодключатьсяКККТ = ИСТИНА;
	РезультатКоммандыПолученияСтатусаСмены = ВыполнитьЗаданиеJSON(всеПараметрыЧека.COMДрайверККТ10, всеПараметрыЧека.НастройкаиСвязиСКТТ, исходящийJSON, 
					   		   		 		ответJSON, описаниеОшибки, КодОшибки, ПодключатьсяКККТ, НеЗакрыватьСоединениеСККТ);
	//											
	статусСмены = "";									 
	если РезультатКоммандыПолученияСтатусаСмены тогда
		статусСмены = ПолучитьЗнчениеПоляИзJSON(ответJSON, "state");
		Если статусСмены = "" тогда                                                                      
			статусСмены = ПолучитьЗнчениеПоляИзJSON(ответJSON, "status");									 
		конецЕсли;                                                    
	конецЕсли;       
	Если статусСмены = "expired" тогда
		стрРезПечатиЧека = Новый Структура;
		стрРезПечатиЧека.Вставить("Результат", ЛОЖЬ);
		стрРезПечатиЧека.Вставить("КодОшибки", -2);
		стрРезПечатиЧека.Вставить("описаниеОшибки", "Открытая смена превысила 24 часа. Закройте смену на кассе.");
		стрРезПечатиЧека.Вставить("COMДрайверККТ10", всеПараметрыЧека.COMДрайверККТ10);				
		Если НеЗакрыватьСоединениеСККТ тогда
			Отключиться(всеПараметрыЧека.COMДрайверККТ10, УровеньОтладки, ФлТестовыйРежим);
		конецЕсли;
		ВыполнитьОбработкуОповещения(всеПараметрыЧека.ОповещениеПослеПечатиЧека, стрРезПечатиЧека);
		Возврат;		
		//сменв превысила 24 часа
	конецЕсли;
	
	Если всеПараметрыЧека.массивМарок.Количество() > 0 тогда
		//ОповещениеПослеПроверкиВсехМарок = Новый ОписаниеОповещения("ПродолжитьПечатьЧекаПослеПроверкиМарок", ЭтотОбъект, всеПараметрыЧека);
		//ОткрытьСменуЕслиСменаНеОткрыта(всеПараметрыЧека, статусСмены, НеЗакрыватьСоединениеСККТ);
		//ПроверитьМарки(всеПараметрыЧека.массивМарок, ОповещениеПослеПроверкиВсехМарок, всеПараметрыЧека);
	иначе                                      
		резПроверкиМарок = Новый Структура;
		резПроверкиМарок.Вставить("Результат", true);
		ПродолжитьПечатьЧекаПослеПроверкиМарок(резПроверкиМарок, всеПараметрыЧека);
	конецЕсли;		
конецПроцедуры //ПослеПоказаПечатнойФормыПредварительногоПросмотраЧекаККТ

&НаКлиенте
функция ПолучитьСтрокуQRЧека(ДатаИВремяЧека, СуммаЧека, ФННомер, ФДНомер, ФискПриз, ТипЧека)
	//t=20181007T222000&s=1955.49&fn=8710000101838052&i=18487&fp=2392195712&n=1
	//Формат()
	стрСуммыЧека = Формат(СуммаЧека, "ЧЦ=10; ЧДЦ=2; ЧРД=.; ЧФ=Ч");
	рез = "t="+ПолучитьФорматДатыИВремениЧекаДляQRКода(ДатаИВремяЧека) + "&s="+стрСуммыЧека+
		  "&fn="+ФННомер+"&i="+ФДНомер+"&fp="+ФискПриз+"&n="+ТипЧека;
	возврат рез;
конецФункции //ПолучитьСтрокуQRЧека

&НаКлиенте
функция СоздатьИзначальнуюСтруктутурОднойНастройки(Наимен, Тип, ЗначПоУмолч = "", Описание = "", СписокВозможныхЗначений = НЕОПРЕДЕЛЕНО, НаимВИнетерфейсе = "")
	струк = Новый Структура;
	струк.Вставить("Наимен", Наимен);
	струк.Вставить("Тип", Тип);
	струк.Вставить("ЗначПоУмолч", ЗначПоУмолч);
	струк.Вставить("СписокЗначений", СписокВозможныхЗначений);
	струк.Вставить("Описание", Описание);
	струк.Вставить("НаимВИнетерфейсе", НаимВИнетерфейсе);
	//струк.Вставить("Значение", "");
	возврат струк;
конецФункции //СоздатьИзначальнуюСтруктутурОднойНастройки

&НаКлиенте
функция ПолучитьОбъектДрайвера10(COMДрайверККТ10 = Неопределено, уровеньОтладки = 1, флТестовыйРежим = FALSE, описаниеОшибки = "") экспорт
	Если уровеньОтладки >=3 тогда
		Сообщить("начало: ПолучитьОбъектДрайвера10");			
	конецЕсли;
	Если COMДрайверККТ10 = Неопределено тогда
		COMДрайверККТ10 = СоздатьОбъектДрайвера(уровеньОтладки, флТестовыйРежим, описаниеОшибки);
		Если COMДрайверККТ10 = Неопределено тогда
			стрОшибки = описаниеОшибки;
			Сообщить(стрОшибки);
			ЗалогироватьОпреацию(0, "ПолучитьОбъектДрайвера10", уровеньОтладки, False, , стрОшибки);			
		конецЕсли;
	конецЕсли;
	Если уровеньОтладки >=3 тогда
		Сообщить("конец: ПолучитьОбъектДрайвера10");			
	конецЕсли;	
	возврат COMДрайверККТ10;
конецФункции //ПолучитьОбъектДрайвера10

&НаКлиенте
функция СформироватьJSONПолученияСтатусаСмены(уровеньОтладки = 1) экспорт
	Если уровеньОтладки >= 3 тогда
		Сообщить("начало: СформироватьJSONПолученияСтатусаСмены");	
	конецЕсли;			
	json = Новый ЗаписьJSON;                   
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб);
	json.УстановитьСтроку(ПараметрыЗаписиJSON);
	json.ЗаписатьНачалоОбъекта();	
	json.ЗаписатьИмяСвойства("type");
	json.ЗаписатьЗначение("getShiftStatus");	
	json.ЗаписатьКонецОбъекта();
	Если уровеньОтладки >= 3 тогда
		Сообщить("конец: СформироватьJSONПолученияСтатусаСмены");	
	конецЕсли;				
	возврат json.Закрыть();		
конецФункции //СформироватьJSONПолученияСтатусаСмены

&НаКлиенте
функция ОткрытьСменуЕслиСменаНеОткрыта(всеПараметрыЧека, статусСмены = "", НеЗакрыватьСоединениеСККТ = ЛОЖЬ)
	рез = ИСТИНА;  
	
	УровеньОтладки = ПолучитьЗначениеНастройки(всеПараметрыЧека.НастройкаиСвязиСКТТ, "УровеньОтладки");
	ФлТестовыйРежим = ПолучитьЗначениеНастройки(всеПараметрыЧека.НастройкаиСвязиСКТТ, "ФлТестовыйРежим");			
	
	нужноОткрытьСмену = ЛОЖЬ;                                             
	Если статусСмены = "" тогда
		исходящийJSON = СформироватьJSONПолученияСтатусаСмены(УровеньОтладки);
		ответJSON = "";
		описаниеОшибки = ""; КодОшибки = 0;
		РезультатКоммандыПолученияСтатусаСмены = ВыполнитьЗаданиеJSON(всеПараметрыЧека.COMДрайверККТ10, всеПараметрыЧека.НастройкаиСвязиСКТТ, исходящийJSON, 
		   		 ответJSON, описаниеОшибки, КодОшибки, ?(НеЗакрыватьСоединениеСККТ, ЛОЖЬ, ИСТИНА), НеЗакрыватьСоединениеСККТ);
		если РезультатКоммандыПолученияСтатусаСмены тогда
			статусСмены = ПолучитьЗнчениеПоляИзJSON(ответJSON, "state");									 
			Если статусСмены = "" тогда                                                                      
				статусСмены = ПолучитьЗнчениеПоляИзJSON(ответJSON, "status");
			конецЕсли;                                                    
		конецЕсли;          			   
	конецЕсли;
	Если статусСмены = "closed" тогда
		нужноОткрытьСмену = ИСТИНА;
	конецЕсли;
	Если НЕ нужноОткрытьСмену тогда
		Возврат рез;
	конецЕсли;
	
	исходящийJSON = СформироватьJSONОткрытияСмены(всеПараметрыЧека.списПараметровЧека.Кассир, УровеньОтладки);
	ответJSON = "";
	описаниеОшибки = ""; КодОшибки = 0;
	резКомандыОткрытияСмены = ВыполнитьЗаданиеJSON(всеПараметрыЧека.COMДрайверККТ10, всеПараметрыЧека.НастройкаиСвязиСКТТ, исходящийJSON, 
					   		   		 ответJSON, описаниеОшибки, КодОшибки,
										?(НеЗакрыватьСоединениеСККТ, ЛОЖЬ, ИСТИНА), НеЗакрыватьСоединениеСККТ);
	если не резКомандыОткрытияСмены тогда
		рез = ЛОЖЬ;
	конецЕсли;          		
	Возврат рез;
конецФункции //ОткрытьСменуЕслиСменаНеОткрыта

//продожение функции ПечатьЧекаНаККТ
//
&НаКлиенте
процедура ПродолжитьПечатьЧекаПослеПроверкиМарок(СтрРезультатПроверки, всеПараметрыЧека) экспорт
	НеЗакрыватьСоединениеСККТ = ПолучитьЗначениеНастройки(всеПараметрыЧека.НастройкаиСвязиСКТТ, "неЗакрыватьСоедиениеВОднойТранзакцииПечатиЧека");
	УровеньОтладки = ПолучитьЗначениеНастройки(всеПараметрыЧека.НастройкаиСвязиСКТТ, "УровеньОтладки");
	ФлТестовыйРежим = ПолучитьЗначениеНастройки(всеПараметрыЧека.НастройкаиСвязиСКТТ, "ФлТестовыйРежим");
	
	стрРезПечатиЧека = Новый Структура;
	Если Не СтрРезультатПроверки.Результат тогда		                                    
	конецЕсли;
	
	//переносим результат проверок марок в таблицу чеков
	Если СтрРезультатПроверки.Свойство("резПроверкиМарок") тогда
		для Каждого стрМарки из всеПараметрыЧека.массивЧека цикл
			Если НЕ стрМарки.Свойство("Марка") тогда
				Продолжить;
			конецЕсли;
			для Каждого резПроверкиМарки из СтрРезультатПроверки.резПроверкиМарок цикл
				Если стрМарки.Марка = резПроверкиМарки.Марка тогда
					Для каждого эл из резПроверкиМарки цикл
						Если Врег(эл.Ключ) = Врег("Марка") тогда
							Продолжить;
						конецЕсли;
						стрМарки.Вставить(эл.Ключ, эл.Значение);
					конецЦикла;
					прервать;
				конецЕсли;
			конецЦикла;		
		конецЦикла;
	конецЕсли;
	
	ответJSON = "";
	описаниеОшибки = ""; КодОшибки = 0;
	исходящийJSON = СформироватьJSONЧека(всеПараметрыЧека.списПараметровЧека, всеПараметрыЧека.массивЧека, УровеньОтладки);
	стрРезПечатиЧека.Вставить("JSONЧека", исходящийJSON);
	резПечатиЧека = ВыполнитьЗаданиеJSON(всеПараметрыЧека.COMДрайверККТ10, всеПараметрыЧека.НастройкаиСвязиСКТТ, исходящийJSON, 
				ответJSON, описаниеОшибки, КодОшибки, ?(НеЗакрыватьСоединениеСККТ, ЛОЖЬ, ИСТИНА), ЛОЖЬ);
	стрРезПечатиЧека.Вставить("ответJSON", ответJSON);							   
	
	если не резПечатиЧека тогда
		стрРезПечатиЧека.Вставить("Результат", ЛОЖЬ);
		стрРезПечатиЧека.Вставить("JSONЗапрос", исходящийJSON);
		стрРезПечатиЧека.Вставить("JSONЧека", исходящийJSON);
		стрРезПечатиЧека.Вставить("ответJSON", ответJSON);
		стрРезПечатиЧека.Вставить("КодОшибки", КодОшибки);		
		стрРезПечатиЧека.Вставить("описаниеОшибки", описаниеОшибки);
		стрРезПечатиЧека.Вставить("COMДрайверККТ10", всеПараметрыЧека.COMДрайверККТ10);                      
		//возращаем результат печати чека в модуль из, которого команда печати чека была вызвана
		ВыполнитьОбработкуОповещения(всеПараметрыЧека.ОповещениеПослеПечатиЧека, стрРезПечатиЧека);
		Возврат;	
	конецЕсли;          
								
	//возращаем результат печати чека в модуль, из которого команда печати чека была вызвана
	НомерЧека = ПолучитьЗнчениеПоляИзJSON(ответJSON, "fiscalDocumentNumber");
	стрРезПечатиЧека.Вставить("Результат", ИСТИНА);
	//стрРезПечатиЧека.Вставить("ответJSON", ответJSON);
	стрРезПечатиЧека.Вставить("НомерЧека", НомерЧека);
	стрРезПечатиЧека.Вставить("COMДрайверККТ10", всеПараметрыЧека.COMДрайверККТ10);		
	ВыполнитьОбработкуОповещения(всеПараметрыЧека.ОповещениеПослеПечатиЧека, стрРезПечатиЧека);
конецПроцедуры //ПродолжитьПечатьЧекаПослеПроверкиМарок

&НаКлиенте
функция ПолучитьФорматДатыИВремениЧекаДляQRКода(ДатаИВремяЧека)
	//из 2020-12-10T14:01:00+03:00
	//в 20181007T222000
	рез = Лев(ДатаИВремяЧека, 19);
	рез = СтрЗаменить(рез, "-", "");
	рез = СтрЗаменить(рез, ":", "");
	возврат рез;
конецФункции //ПолучитьФорматДатыИВремениЧекаДляQRКода

&НаКлиенте
функция СоздатьОбъектДрайвера(уровеньОтладки = 1, флТестовыйРежим = FALSE, описаниеОшибки = "")
	Если уровеньОтладки >=3 тогда
		Сообщить("начало: СоздатьОбъектДрайвера");				
	конецЕсли;
	описаниеОшибки = "";
	try
		COMДрайверККТ10 = Новый COMОбъект("AddIn.Fptr10");
		//отладка                
		Если уровеньОтладки >=3 тогда
			Сообщить("COMОбъект(""AddIn.Fptr10"" создан");						
		конецЕсли;
	except                                                          
		описаниеОшибки  = ОписаниеОшибки();		
		COMДрайверККТ10 = Неопределено;
		стрОшибки       = описаниеОшибки;
		Сообщить(стрОшибки);
		ЗалогироватьОпреацию(0, "СоздатьОбъектДрайвера", уровеньОтладки, False, , стрОшибки);					
	endtry;
	Если уровеньОтладки >=3 тогда
		Сообщить("конец: СоздатьОбъектДрайвера");				
	конецЕсли;	
	Возврат COMДрайверККТ10;
конецФункции //СоздатьОбъектДрайвера

&НаКлиенте
функция СформироватьJSONОткрытияСмены(кассир, уровеньОтладки = 1) экспорт
	Если уровеньОтладки >= 3 тогда
		Сообщить("начало: СформироватьJSONОткрытияСмены");	
	конецЕсли;			
	json = Новый ЗаписьJSON;                   
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб);
	json.УстановитьСтроку(ПараметрыЗаписиJSON);
	json.ЗаписатьНачалоОбъекта();	
	json.ЗаписатьИмяСвойства("type");
	json.ЗаписатьЗначение("openShift");	
	json.ЗаписатьИмяСвойства("operator");
	json.ЗаписатьНачалоОбъекта();
	json.ЗаписатьИмяСвойства("name");
	json.ЗаписатьЗначение(кассир);
	json.ЗаписатьКонецОбъекта();
	json.ЗаписатьКонецОбъекта();
	Если уровеньОтладки >= 3 тогда
		Сообщить("конец: СформироватьJSONОткрытияСмены");	
	конецЕсли;			
	возврат json.Закрыть();			
конецФункции //СформироватьJSONЗакрытияСмены

&НаКлиенте
функция СформироватьJSONЗакрытияСмены(кассир, уровеньОтладки = 1) экспорт
	Если уровеньОтладки >= 3 тогда
		Сообщить("начало: СформироватьJSONЗакрытияСмены");	
	конецЕсли;			
	json = Новый ЗаписьJSON;                   
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб);
	json.УстановитьСтроку(ПараметрыЗаписиJSON);
	json.ЗаписатьНачалоОбъекта();	
	json.ЗаписатьИмяСвойства("type");
	json.ЗаписатьЗначение("closeShift");	
	json.ЗаписатьИмяСвойства("operator");
	json.ЗаписатьНачалоОбъекта();
	json.ЗаписатьИмяСвойства("name");
	json.ЗаписатьЗначение(кассир);
	json.ЗаписатьКонецОбъекта();
	json.ЗаписатьКонецОбъекта();
	Если уровеньОтладки >= 3 тогда
		Сообщить("конец: СформироватьJSONЗакрытияСмены");	
	конецЕсли;				
	возврат json.Закрыть();			
конецФункции //СформироватьJSONЗакрытияСмены


&НаКлиенте
функция ПолучитьПереводСистемыНалогообложения(taxationType) экспорт
	рез = "УСН Д";
	Если taxationType = "osn" тогда     
		рез = "Общая";	
	иначеЕсли taxationType = "usnIncome" тогда     
		рез = "УСН Д";	
	иначеЕсли taxationType = "usnIncomeOutcome" тогда     
		рез = "УСН Д-Р";	
	иначеЕсли taxationType = "esn" тогда     
		рез = "ЕСН";	
	иначеЕсли taxationType = "patent" тогда     
		рез = "Патент";	
	конецЕсли;
	возврат рез;	
конецФункции //ПолучитьПереводСистемыНалогообложения

&НаКлиенте
функция ПолучитьПереводПредметаРасчета(paymentObject) экспорт
	рез = "Товар";
	Если paymentObject = "service" тогда     
		рез = "Услуга";	
	иначеЕсли paymentObject = "payment" тогда
		рез = "Платёж";	
	иначеЕсли paymentObject = "agentCommission" тогда
		рез = "Агентское вознаграждение";	
	иначеЕсли paymentObject = "another" тогда
		рез = "иной предмет расчета";	
	иначеЕсли paymentObject = "exciseWithoutMarking" тогда
		рез = "Подкацизный без маркировки";	
	иначеЕсли paymentObject = "exciseWithMarking" тогда
		рез = "Подкацизный с маркировкой";			
	иначеЕсли paymentObject = "commodityWithoutMarking" тогда
		рез = "Товар без маркировки";			
	иначеЕсли paymentObject = "commodityWithMarking" тогда
		рез = "Товар с маркировкой";					
	конецЕсли;
	возврат рез;
конецФункции //ПолучитьПереводПредметаРасчета

&НаСервере
функция ПолучитьНазваниеФирмы() экспорт
	//рез = Константы.НаименованиеФирмы.Получить();
	рез = "Какая-то фирма";
	Возврат рез;
конецФункции //ПолучитьНазваниеФирмы 

&НаСервере
процедура Печать(печФормаЧека, всеПараметрыЧека) экспорт
	макет = ПолучитьОбщийМакет("МакетЧека");
	областьШапкаЧека = макет.ПолучитьОбласть("шапкаЧека");
	областьзаголовокТаблицы = макет.ПолучитьОбласть("заголовокТаблицыЧека");
	областьСтрокаТовара = макет.ПолучитьОбласть("СтрокаТовара");
	областьмаркаСтрока = макет.ПолучитьОбласть("маркаСтрока");
	областьпустаяСтрока = макет.ПолучитьОбласть("пустаяСтрока");
	областьИтого = макет.ПолучитьОбласть("итого");
	областьстрокаТипаОплаты = макет.ПолучитьОбласть("строкаТипОплаты");
	областьндсИтого = макет.ПолучитьОбласть("ндсИтого");
	областьПодвал = макет.ПолучитьОбласть("подвал");
	областТекстQRКода = макет.ПолучитьОбласть("ТекстQRКода");
	областьqrкод = макет.ПолучитьОбласть("qrcode");
	
	областьШапкаЧека.Параметры.НомерЧека = СокрЛП(всеПараметрыЧека.НомерЧека);
	областьШапкаЧека.Параметры.ТипЧека = СокрЛП(всеПараметрыЧека.ТипЧека);
	областьШапкаЧека.Параметры.ДатаИВремя = СокрЛП(всеПараметрыЧека.ДатаИВремяЧека);
	областьШапкаЧека.Параметры.НомерСмены = СокрЛП(всеПараметрыЧека.НомерСмены);
	областьШапкаЧека.Параметры.Кассир = СокрЛП(всеПараметрыЧека.Кассир);
	
	печФормаЧека.Очистить();
	печФормаЧека.Вывести(областьШапкаЧека);
	печФормаЧека.Вывести(областьзаголовокТаблицы);
			
	текНомПоз = 1;
	суммаИтогоЧека = 0;
	Для Каждого поз из всеПараметрыЧека.Позиции цикл
		Если текНомПоз > 1 тогда
			печФормаЧека.Вывести(областьпустаяСтрока);
		конецЕсли;
		областьСтрокаТовара.Параметры.печНомПоз = текНомПоз;
		областьСтрокаТовара.Параметры.Наименовние = поз.Наименование;
		областьСтрокаТовара.Параметры.ПечЦена = поз.Цена;
		областьСтрокаТовара.Параметры.ПечКол = поз.Количество;
		областьСтрокаТовара.Параметры.ПечСумма = поз.Сумма;
		областьСтрокаТовара.Параметры.печПредмРасч = поз.ПредметРасчета;
		областьСтрокаТовара.Параметры.печСпосРасч = поз.СпособРасчета;
		областьСтрокаТовара.Параметры.печРезПровМарки = "";
		Если поз.Свойство("РезультатПроверкиМарки") тогда
			областьСтрокаТовара.Параметры.печРезПровМарки = поз.РезультатПроверкиМарки;
		конецЕсли;
		областьСтрокаТовара.Параметры.ПечСтавкаНДС = поз.СтавкаНДС;
		печФормаЧека.Вывести(областьСтрокаТовара);
		Если поз.Свойство("Марка") тогда
			областьмаркаСтрока.Параметры.печМарка = СокрЛП(поз.Марка);
			печФормаЧека.Вывести(областьмаркаСтрока);
		конецЕсли;		
		текНомПоз = текНомПоз + 1;
	конецЦикла;
	
	печФормаЧека.Вывести(областьпустаяСтрока);
	областьИтого.Параметры.ПечИтогоЧека = всеПараметрыЧека.СуммаЧека;
	печФормаЧека.Вывести(областьИтого);
	для Каждого стрОплаты из всеПараметрыЧека.ТаблицаОплат цикл
		областьстрокаТипаОплаты.Параметры.печТипОплаты = ПреобразоватьВПечетнуюФормуТипОплаты(стрОплаты.Ключ);
		областьстрокаТипаОплаты.Параметры.печСуммаТипаОплаты = стрОплаты.Значение;
		печФормаЧека.Вывести(областьстрокаТипаОплаты);
	конецЦикла;
		
	//печФормаЧека.Вывести(областьндсИтого);
	печФормаЧека.Вывести(областьпустаяСтрока);
	областьПодвал.Параметры.печНазвФирмы = всеПараметрыЧека.ФирмаНазвание;
	областьПодвал.Параметры.печИННФирмы  = всеПараметрыЧека.ИННФирмы;
	областьПодвал.Параметры.печСистНалог = "";
	Если всеПараметрыЧека.Свойство("СистемаНалогообложения") тогда
		областьПодвал.Параметры.печСистНалог = всеПараметрыЧека.СистемаНалогообложения;
	конецЕсли;
	областьПодвал.Параметры.печРегНом    = всеПараметрыЧека.РегНомерККТ;
	областьПодвал.Параметры.печНомФН     = всеПараметрыЧека.НомерФН;
	областьПодвал.Параметры.печНомерЧека = всеПараметрыЧека.НомерЧека;
	областьПодвал.Параметры.печФискПриз  = всеПараметрыЧека.ФискалПризнак;
	печФормаЧека.Вывести(областьПодвал);
	областТекстQRКода.Параметры.печQRКод = всеПараметрыЧека.СтрокаQRКода;
	печФормаЧека.Вывести(областТекстQRКода);
	Если всеПараметрыЧека.СтрокаQRКода <> "" тогда
		КартинкаПечатьQRCode = областьqrкод.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
		КартинкаПечатьQRCode.Картинка = ПолучитьКартинкуQRКода(всеПараметрыЧека.СтрокаQRКода);
		КартинкаПечатьQRCode.Верх = 3;
		КартинкаПечатьQRCode.Высота = 20;
		КартинкаПечатьQRCode.Ширина = 20;
		КартинкаПечатьQRCode.Лево = 28;
		КартинкаПечатьQRCode.ГраницаСверху = Ложь;
		КартинкаПечатьQRCode.ГраницаСлева = Ложь;
		КартинкаПечатьQRCode.ГраницаСправа = Ложь;
		КартинкаПечатьQRCode.ГраницаСнизу = Ложь;
		КартинкаПечатьQRCode.РазмерКартинки = РазмерКартинки.АвтоРазмер;
		печФормаЧека.Вывести(областьqrкод);
	конецЕсли;
конецПроцедуры //Печать   

&НаСервере
функция ПреобразоватьВПечетнуюФормуТипОплаты(типОплаты)
	рез = типОплаты;
	Если типОплаты = "ЗачетАванса" тогда
		рез = "Аванс (зачет ранее оплаченного аванса)";
	иначеЕсли типОплаты = "Кредит" тогда
		рез = "Кредит (рассрочка)";
	конецЕсли;
	возврат рез;
конецФункции //ПреобразоватьВПечетнуюФормуТипОплаты

&НаСервере
Функция ПодключитьКомпонентуИзМакета(Идентификатор)	
	СимволическоеИмя = Идентификатор + "SymbolicName";	
	//Если ПодключитьВнешнююКомпоненту(МестоположениеКомпоненты, СимволическоеИмя) Тогда		
	Если ПодключитьВнешнююКомпоненту("ОбщийМакет.КомпонентаПечатиQRКода", СимволическоеИмя, ТипВнешнейКомпоненты.Native) тогда
		Попытка
			ПодключаемыйМодуль = Новый("AddIn." + СимволическоеИмя + "." + Идентификатор);
			Если ПодключаемыйМодуль = Неопределено Тогда 
				ВызватьИсключение НСтр("ru = 'Оператор Новый вернул Неопределено'");
			КонецЕсли;
		Исключение
			ПодключаемыйМодуль = Неопределено;
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;		
		Если ПодключаемыйМодуль = Неопределено Тогда			
			ТекстОшибки = ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось создать объект внешней компоненты ""%1"", подключенной на сервере
				           |из макета ""%2"",
				           |по причине:
				           |%3'"),
				Идентификатор,
				"",
				ТекстОшибки);			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Подключение внешней компоненты на сервере'",
					КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,,,
				ТекстОшибки);			
		КонецЕсли;		
	Иначе		
		ТекстОшибки = ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось подключить внешнюю компоненту ""%1"" на сервере
			           |из макета ""%2""
			           |по причине:
			           |Метод ПодключитьВнешнююКомпоненту вернул Ложь.'"),
			Идентификатор,
			"");
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Подключение внешней компоненты на сервере'",
				КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ТекстОшибки);
		
	КонецЕсли;	
	Возврат ПодключаемыйМодуль;	
КонецФункции //ПодключитьКомпонентуИзМакета

&НаСервере
Функция КомпонентаФормированияQRКода()
	
	ТекстОшибки = НСтр("ru = 'Не удалось подключить внешнюю компоненту для генерации QR-кода. Подробности в журнале регистрации.'");
	
	QRCodeGenerator = ПодключитьКомпонентуИзМакета("QRCodeExtension");
	
	Если QRCodeGenerator = Неопределено Тогда 
		СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	Возврат QRCodeGenerator;
	
КонецФункции //КомпонентаФормированияQRКода

&НаСервере
функция ПолучитьДвоичныеДанныеQRКода(СтрокаQRКода, УровеньКоррекции = 0, Размер = 200)
	//УстановитьОтключениеБезопасногоРежима(Истина);
	ГенераторQRКода = КомпонентаФормированияQRКода();
	Если ГенераторQRКода = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		ДвоичныеДанныеКартинки = ГенераторQRКода.GenerateQRCode(СтрокаQRКода, УровеньКоррекции, Размер);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Формирование QR-кода'", КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ДвоичныеДанныеКартинки;	
конецФункции //ПолучитьДвоичныеДанныеQRКода

&НаСервере
функция ПолучитьКартинкуQRКода(СтрокаQRКода)
	ДвоичныеДанныеQRКода = ПолучитьДвоичныеДанныеQRКода(СтрокаQRКода);
	рез = Новый Картинка(ДвоичныеДанныеQRКода);
	возврат рез;
конецФункции //ПолучитьКартинкуQRКода 

&НаСервере
Функция ПодставитьПараметрыСПроцентом(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = "";
	Позиция = Найти(СтрокаПодстановки, "%");
	Пока Позиция > 0 Цикл 
		Результат = Результат + Лев(СтрокаПодстановки, Позиция - 1);
		СимволПослеПроцента = Сред(СтрокаПодстановки, Позиция + 1, 1);
		ПодставляемыйПараметр = Неопределено;
		Если СимволПослеПроцента = "1" Тогда
			ПодставляемыйПараметр = Параметр1;
		ИначеЕсли СимволПослеПроцента = "2" Тогда
			ПодставляемыйПараметр = Параметр2;
		ИначеЕсли СимволПослеПроцента = "3" Тогда
			ПодставляемыйПараметр = Параметр3;
		ИначеЕсли СимволПослеПроцента = "4" Тогда
			ПодставляемыйПараметр = Параметр4;
		ИначеЕсли СимволПослеПроцента = "5" Тогда
			ПодставляемыйПараметр = Параметр5;
		ИначеЕсли СимволПослеПроцента = "6" Тогда
			ПодставляемыйПараметр = Параметр6;
		ИначеЕсли СимволПослеПроцента = "7" Тогда
			ПодставляемыйПараметр = Параметр7
		ИначеЕсли СимволПослеПроцента = "8" Тогда
			ПодставляемыйПараметр = Параметр8;
		ИначеЕсли СимволПослеПроцента = "9" Тогда
			ПодставляемыйПараметр = Параметр9;
		КонецЕсли;
		Если ПодставляемыйПараметр = Неопределено Тогда
			Результат = Результат + "%";
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 1);
		Иначе
			Результат = Результат + ПодставляемыйПараметр;
			СтрокаПодстановки = Сред(СтрокаПодстановки, Позиция + 2);
		КонецЕсли;
		Позиция = Найти(СтрокаПодстановки, "%");
	КонецЦикла;
	Результат = Результат + СтрокаПодстановки;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПодставитьПараметрыВСтроку(Знач ШаблонСтроки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено, Знач Параметр6 = Неопределено,
	Знач Параметр7 = Неопределено, Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено) Экспорт
	
	ЕстьПараметрыСПроцентом = Найти(Параметр1, "%")
		Или Найти(Параметр2, "%")
		Или Найти(Параметр3, "%")
		Или Найти(Параметр4, "%")
		Или Найти(Параметр5, "%")
		Или Найти(Параметр6, "%")
		Или Найти(Параметр7, "%")
		Или Найти(Параметр8, "%")
		Или Найти(Параметр9, "%");
		
	Если ЕстьПараметрыСПроцентом Тогда
		Возврат ПодставитьПараметрыСПроцентом(ШаблонСтроки, Параметр1,
			Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	КонецЕсли;
	
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%1", Параметр1);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%2", Параметр2);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%3", Параметр3);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%4", Параметр4);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%5", Параметр5);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%6", Параметр6);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%7", Параметр7);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%8", Параметр8);
	ШаблонСтроки = СтрЗаменить(ШаблонСтроки, "%9", Параметр9);
	Возврат ШаблонСтроки;
	
КонецФункции

&НаСервере
Процедура СообщитьПользователюВызов(
		Знач ТекстСообщенияПользователю,
		Знач КлючДанных,
		Знач Поле,
		Знач ПутьКДанным = "",
		Отказ = Ложь,
		ЭтоОбъект = Ложь) Экспорт
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстСообщенияПользователю;
	Сообщение.Поле = Поле;
	
	Попытка
		Если ЭтоОбъект Тогда
			Сообщение.УстановитьДанные(КлючДанных);
		Иначе
			Сообщение.КлючДанных = КлючДанных;
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПутьКДанным) Тогда
			Сообщение.ПутьКДанным = ПутьКДанным;
		КонецЕсли;
	Исключение
	
	КонецПопытки;
	
	Сообщение.Сообщить();
	
	Отказ = Истина;
	
КонецПроцедуры

&НаСервере
Процедура СообщитьПользователю( 
	Знач ТекстСообщенияПользователю,
	Знач КлючДанных = Неопределено,
	Знач Поле = "",
	Знач ПутьКДанным = "",
	Отказ = Ложь) Экспорт
	
	ЭтоОбъект = Ложь;
	
	Если КлючДанных <> Неопределено
		И XMLТипЗнч(КлючДанных) <> Неопределено Тогда
		
		ТипЗначенияСтрокой = XMLТипЗнч(КлючДанных).ИмяТипа;
		ЭтоОбъект = Найти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
	
	СообщитьПользователюВызов(
		ТекстСообщенияПользователю,
		КлючДанных,
		Поле,
		ПутьКДанным,
		Отказ,
		ЭтоОбъект);
	
КонецПроцедуры

&НаСервере
Функция КодОсновногоЯзыка()
	Возврат Метаданные.ОсновнойЯзык.КодЯзыка;
КонецФункции
#КонецОбласти